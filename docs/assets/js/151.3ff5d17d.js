(window.webpackJsonp=window.webpackJsonp||[]).push([[151],{1279:function(t,a,e){"use strict";e.r(a);var r=e(7),i=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"algorithm-overview"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#algorithm-overview"}},[t._v("#")]),t._v(" Algorithm overview")]),t._v(" "),e("h2",{attrs:{id:"essential-algos"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#essential-algos"}},[t._v("#")]),t._v(" Essential Algos")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.pinimg.com/736x/ed/be/4d/edbe4d9c3aba5b95d1e4ee911a1c31f3.jpg",alt:"10 common algos"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.pinimg.com/736x/57/b6/0a/57b60a8d0975585455c2304a0018f812.jpg",alt:"Essential Algos"}})]),t._v(" "),e("h3",{attrs:{id:"validation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#validation"}},[t._v("#")]),t._v(" Validation")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.pinimg.com/564x/12/c2/7b/12c27b7fb4c7a886718dd6d67587d13f.jpg",alt:"Validation"}})]),t._v(" "),e("h3",{attrs:{id:"load-balancing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#load-balancing"}},[t._v("#")]),t._v(" Load balancing")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.pinimg.com/564x/32/08/5e/32085e17f4315262381f6f620e6deecd.jpg",alt:"Load balancing algos"}})]),t._v(" "),e("h3",{attrs:{id:"rate-limiting"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rate-limiting"}},[t._v("#")]),t._v(" Rate limiting")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.pinimg.com/originals/25/74/97/257497d9a5ed6744230f92ae334f7a40.png",alt:"Rate limiting"}})]),t._v(" "),e("ul",[e("li",[t._v("fixed window")]),t._v(" "),e("li",[t._v("sliding window")]),t._v(" "),e("li",[t._v("token bucket")]),t._v(" "),e("li",[t._v("concurrency")])]),t._v(" "),e("h3",{attrs:{id:"retry"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#retry"}},[t._v("#")]),t._v(" Retry")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.pinimg.com/originals/d1/ca/0c/d1ca0c625b789c2f9f2834d83adf8f54.gif",alt:"Retry patterns"}})]),t._v(" "),e("h3",{attrs:{id:"generate-ids"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#generate-ids"}},[t._v("#")]),t._v(" Generate Ids")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.pinimg.com/564x/3d/59/a6/3d59a68c59c98ada1128c88e9efebaf9.jpg",alt:"Generate Ids"}})]),t._v(" "),e("h3",{attrs:{id:"pagination"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pagination"}},[t._v("#")]),t._v(" Pagination")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.pinimg.com/originals/d9/13/8b/d9138b427392b49ab03c76b99ff9ac9b.jpg",alt:"Pagination"}})]),t._v(" "),e("h3",{attrs:{id:"locking"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#locking"}},[t._v("#")]),t._v(" Locking")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.pinimg.com/originals/64/a5/98/64a598fe190fb7675a80180d73fd7b5c.png",alt:"Locking concurrency"}})]),t._v(" "),e("h2",{attrs:{id:"data-structure"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#data-structure"}},[t._v("#")]),t._v(" Data structure")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.pinimg.com/564x/e1/ed/b9/e1edb99e16875b42f26b6aa2e017d799.jpg",alt:"Data structure cheatsheet"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.pinimg.com/736x/90/ef/ed/90efed321dc519b64ffb140de061454c.jpg",alt:"Data structure list2"}})]),t._v(" "),e("ul",[e("li",[t._v("Arrays")]),t._v(" "),e("li",[t._v("Linked list")]),t._v(" "),e("li",[t._v("Stack")]),t._v(" "),e("li",[t._v("Queue")]),t._v(" "),e("li",[t._v("Hash table")]),t._v(" "),e("li",[t._v("Tree")]),t._v(" "),e("li",[t._v("Graph")])]),t._v(" "),e("h3",{attrs:{id:"unordered-data-structures"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#unordered-data-structures"}},[t._v("#")]),t._v(" Unordered data structures")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://pbs.twimg.com/media/F1AXBhOWwAE1896?format=jpg&name=4096x4096",alt:"key-value and connected elements"}})]),t._v(" "),e("p",[t._v("useful for storing and retrieving information that doesn't follow a specific order.\nFor speed, they utilize key-value pairs or relationships between elements.")]),t._v(" "),e("h3",{attrs:{id:"hierarchical-data-structures"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hierarchical-data-structures"}},[t._v("#")]),t._v(" Hierarchical data structures")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://pbs.twimg.com/media/F1AXA8sX0AAbp2P?format=jpg&name=4096x4096",alt:"tree-like"}})]),t._v(" "),e("p",[t._v("Hierarchical data structures represent data in a tree-like shape.")]),t._v(" "),e("p",[t._v("They are great for organizing and managing data with ordered parent-child relationships to quickly search, access, and insert elements quickly.")]),t._v(" "),e("h3",{attrs:{id:"linear-data-structures"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linear-data-structures"}},[t._v("#")]),t._v(" Linear data structures")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://pbs.twimg.com/media/F1AXAbAWwAERvCm?format=jpg&name=4096x4096",alt:"array"}})]),t._v(" "),e("p",[t._v("Linear data structures are used to arrange items sequentially and in a specific order. They can be traversed in a linear fashion, which makes them ideal for organizing and manipulating data when access, insertion, or removal must take place in a specific sequence or place.")]),t._v(" "),e("h3",{attrs:{id:"skiplist"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#skiplist"}},[t._v("#")]),t._v(" Skiplist")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://en.wikipedia.org/wiki/Skip_list",target:"_blank",rel:"noopener noreferrer"}},[t._v("Wiki read more"),e("OutboundLink")],1)]),t._v(" "),e("ul",[e("li",[t._v("a common in-memory index type")]),t._v(" "),e("li",[t._v("to build the "),e("code",[t._v("Sorted Set")])]),t._v(" "),e("li",[t._v("allows for fast lookups, range queries, and other operations")]),t._v(" "),e("li",[t._v("DB used: Redis")])]),t._v(" "),e("p",[t._v("https://www.geeksforgeeks.org/skip-list/")]),t._v(" "),e("p",[t._v("https://www.npmjs.com/package/ts-skiplist")]),t._v(" "),e("h3",{attrs:{id:"bloom-filter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bloom-filter"}},[t._v("#")]),t._v(" Bloom filter")]),t._v(" "),e("p",[t._v("A Bloom filter is a "),e("strong",[t._v("space-efficient probabilistic")]),t._v(" data structure that is used to test whether an element is a member of a set.")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.pinimg.com/originals/92/bd/47/92bd474a86e4c58dd75fddaec02129b8.png",alt:"Bloom filter"}})]),t._v(" "),e("p",[t._v("Use case:")]),t._v(" "),e("ul",[e("li",[t._v("avoid attack miss cache attack")])]),t._v(" "),e("p",[t._v("Refs")]),t._v(" "),e("ul",[e("li",[t._v("Node Package "),e("a",{attrs:{href:"https://www.npmjs.com/package/bloom-filters",target:"_blank",rel:"noopener noreferrer"}},[t._v("bloom-filters"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.geeksforgeeks.org/bloom-filters-introduction-and-python-implementation/?ref=gcse",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bloom filters Introduction"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"system-design-interview"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#system-design-interview"}},[t._v("#")]),t._v(" System design interview")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.pinimg.com/564x/8a/42/13/8a42135c1a113a7890cbae34301fc061.jpg",alt:"System design interview"}})])])}),[],!1,null,null,null);a.default=i.exports}}]);