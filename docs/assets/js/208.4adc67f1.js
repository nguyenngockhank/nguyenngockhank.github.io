(window.webpackJsonp=window.webpackJsonp||[]).push([[208],{768:function(e,t,a){"use strict";a.r(t);var s=a(7),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"c-h-a-p-t-e-r-t-e-n"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-h-a-p-t-e-r-t-e-n"}},[e._v("#")]),e._v(" C H A P T E R T E N")]),e._v(" "),a("p",[a("strong",[e._v("Extracting Unrelated Subproblems")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("109\n")])])]),a("p",[e._v("Engineering is all about breaking down big problems into smaller ones and putting the")]),e._v(" "),a("p",[e._v("solutions for those problems back together. Applying this principle to code makes it more")]),e._v(" "),a("p",[e._v("robust and easier to read.")]),e._v(" "),a("p",[e._v("The advice for this chapter is to "),a("strong",[e._v("aggressively identify and extract unrelated")])]),e._v(" "),a("p",[a("strong",[e._v("subproblems.")]),e._v(" Here’s what we mean:")]),e._v(" "),a("ol",[a("li",[e._v("Look at a given function or block of code, and ask yourself, “What is the high-level goal\nof this code?”")]),e._v(" "),a("li",[e._v("For each line of code, ask, “Is it working "),a("em",[e._v("directly")]),e._v(" to that goal? Or is it solving an "),a("em",[e._v("unrelated")]),e._v(" "),a("em",[e._v("subproblem")]),e._v(" needed to meet it?”")]),e._v(" "),a("li",[e._v("If enough lines are solving an unrelated subproblem, extract that code into a separate\nfunction.")])]),e._v(" "),a("p",[e._v("Extracting code into separate functions is something you probably do every day. But for this")]),e._v(" "),a("p",[e._v("chapter, we decided to focus on the specific case of extracting "),a("em",[e._v("unrelated subproblems")]),e._v(" , where the")]),e._v(" "),a("p",[e._v("extracted code is blissfully unaware of why it’s being called.")]),e._v(" "),a("p",[e._v("As you’ll see, it’s an easy technique to apply but can improve your code substantially. Yet for")]),e._v(" "),a("p",[e._v("some reason, many programmers don’t use this technique enough. The trick is to actively look")]),e._v(" "),a("p",[e._v("for these unrelated subproblems.")]),e._v(" "),a("p",[e._v("In this chapter, we will go through a variety of examples that illustrate this technique for")]),e._v(" "),a("p",[e._v("different situations you might run into.")]),e._v(" "),a("h3",{attrs:{id:"introductory-example-findclosestlocation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introductory-example-findclosestlocation"}},[e._v("#")]),e._v(" Introductory Example: findClosestLocation()")]),e._v(" "),a("p",[e._v("The high-level goal of the following JavaScript code is, "),a("em",[e._v("find the location that’s closest to a given")])]),e._v(" "),a("p",[a("em",[e._v("point")]),e._v(" (don’t get bogged down by the advanced geometry, which we’ve italicized):")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Return which element of 'array' is closest to the given latitude/longitude.\n// Models the Earth as a perfect sphere.\nvar findClosestLocation = function (lat, lng, array) {\nvar closest;\nvar closest_dist = Number.MAX_VALUE;\nfor (var i = 0; i < array.length; i += 1) {\n// Convert both points to radians.\nvar lat_rad = radians(lat);\nvar lng_rad = radians(lng);\nvar lat2_rad = radians(array[i].latitude);\nvar lng2_rad = radians(array[i].longitude);\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// Use the "Spherical Law of Cosines" formula.\nvar dist = Math.acos(Math.sin(lat_rad) * Math.sin(lat2_rad) +\nMath.cos(lat_rad) * Math.cos(lat2_rad) *\nMath.cos(lng2_rad - lng_rad));\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (dist < closest_dist) {\nclosest = array[i];\n")])])]),a("p",[a("strong",[e._v("110")]),e._v(" CHAPTER TEN")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("closest_dist = dist;\n}\n}\nreturn closest;\n};\n")])])]),a("p",[e._v("Most of the code inside the loop is working on an unrelated subproblem: "),a("em",[e._v("Compute the spherical")])]),e._v(" "),a("p",[a("em",[e._v("distance between two lat/long points.")]),e._v(" Because there is so much of that code, it makes sense to")]),e._v(" "),a("p",[e._v("extract it into a separate spherical_distance() function:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var spherical_distance = function (lat1, lng1, lat2, lng2) {\nvar lat1_rad = radians(lat1);\nvar lng1_rad = radians(lng1);\nvar lat2_rad = radians(lat2);\nvar lng2_rad = radians(lng2);\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// Use the "Spherical Law of Cosines" formula.\nreturn Math.acos(Math.sin(lat1_rad) * Math.sin(lat2_rad) +\nMath.cos(lat1_rad) * Math.cos(lat2_rad) *\nMath.cos(lng2_rad - lng1_rad));\n};\n')])])]),a("p",[e._v("Now the remaining code becomes:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var findClosestLocation = function (lat, lng, array) {\nvar closest;\nvar closest_dist = Number.MAX_VALUE;\nfor (var i = 0; i < array.length; i += 1) {\nvar dist = spherical_distance(lat, lng, array[i].latitude, array[i].longitude);\nif (dist < closest_dist) {\nclosest = array[i];\nclosest_dist = dist;\n}\n}\nreturn closest;\n};\n")])])]),a("p",[e._v("This code is far more readable because the reader can focus on the high-level goal without")]),e._v(" "),a("p",[e._v("getting distracted by intense geometry equations.")]),e._v(" "),a("p",[e._v("As an added bonus, spherical_distance() will be easier to test in isolation. And")]),e._v(" "),a("p",[e._v("spherical_distance() is the type of function that could be reused in the future. This is why it’s")]),e._v(" "),a("p",[e._v("an “unrelated” subproblem—it’s completely self-contained and unaware of how applications")]),e._v(" "),a("p",[e._v("are using it.")]),e._v(" "),a("h3",{attrs:{id:"pure-utility-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pure-utility-code"}},[e._v("#")]),e._v(" Pure Utility Code")]),e._v(" "),a("p",[e._v("There is a core set of basic tasks that most programs do, such as manipulating strings, using")]),e._v(" "),a("p",[e._v("hash tables, and reading/writing files.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("EXTRACTING UNRELATED SUBPROBLEMS 111\n")])])]),a("p",[e._v("Often, these “basic utilities” are implemented by the built-in libraries in your programming")]),e._v(" "),a("p",[e._v("language. For instance, if you want to read the entire contents of a file, in PHP you can call")]),e._v(" "),a("p",[e._v('file_get_contents("filename"), or in Python, you can do open("filename").read().')]),e._v(" "),a("p",[e._v("But sometimes you have to fill in the gaps yourself. In C++, for instance, there is no succinct")]),e._v(" "),a("p",[e._v("way to read an entire file. Instead, you inevitably end up writing code like this:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ifstream file(file_name);\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Calculate the file's size, and allocate a buffer of that size.\nfile.seekg(0, ios::end);\nconst int file_size = file.tellg();\nchar* file_buf = new char [file_size];\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Read the entire file into the buffer.\nfile.seekg(0, ios::beg);\nfile.read(file_buf, file_size);\nfile.close();\n")])])]),a("p",[e._v("This is a classic example of an unrelated subproblem that should be extracted into a new")]),e._v(" "),a("p",[e._v("function like ReadFileToString(). Now, the rest of your codebase can act as if C++ "),a("em",[e._v("did")]),e._v(" have a")]),e._v(" "),a("p",[e._v("ReadFileToString() function.")]),e._v(" "),a("p",[e._v("In general, if you find yourself thinking, “I wish our library had an XYZ() function,” go ahead")]),e._v(" "),a("p",[e._v("and write it! (Assuming it doesn’t already exist.) Over time, you’ll build up a nice collection of")]),e._v(" "),a("p",[e._v("utility code that can be used across projects.")]),e._v(" "),a("h3",{attrs:{id:"other-general-purpose-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#other-general-purpose-code"}},[e._v("#")]),e._v(" Other General-Purpose Code")]),e._v(" "),a("p",[e._v("When debugging JavaScript, programmers often use alert() to pop up a message box that")]),e._v(" "),a("p",[e._v("displays some information to the programmer, the Web’s version of “printf() debugging.” For")]),e._v(" "),a("p",[e._v("example, the following function call submits data to the server using Ajax and then displays")]),e._v(" "),a("p",[e._v("the dictionary returned from the server:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('ajax_post({\nurl: \'http://example.com/submit\',\ndata: data,\non_success: function (response_data) {\nvar str = "{\\n";\nfor (var key in response_data) {\nstr += " " + key + " = " + response_data[key] + "\\n";\n}\nalert(str + "}");\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Continue handling 'response_data' ...\n}\n});\n")])])]),a("p",[a("strong",[e._v("112")]),e._v(" CHAPTER TEN")]),e._v(" "),a("p",[e._v("The high-level goal of this code is, "),a("em",[e._v("Make an Ajax call to the server, and handle the response.")]),e._v(" But a")]),e._v(" "),a("p",[e._v("lot of the code is solving the unrelated subproblem, "),a("em",[e._v("Pretty-print a dictionary.")]),e._v(" It’s easy to extract")]),e._v(" "),a("p",[e._v("that code into a function like format_pretty(obj):")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('var format_pretty = function (obj) {\nvar str = "{\\n";\nfor (var key in obj) {\nstr += " " + key + " = " + obj[key] + "\\n";\n}\nreturn str + "}";\n};\n')])])]),a("p",[a("strong",[e._v("Unexpected Benefits")])]),e._v(" "),a("p",[e._v("There are a lot of reasons why extracting format_pretty() is a good idea. It makes the calling")]),e._v(" "),a("p",[e._v("code simpler, and format_pretty() is a handy function to have around.")]),e._v(" "),a("p",[e._v("But there’s another great reason that’s not as obvious: "),a("strong",[e._v("it’s easier to improve")]),e._v(" format_pretty()")]),e._v(" "),a("p",[a("strong",[e._v("when the code is by itself.")]),e._v(" When you’re working on a smaller function in isolation, it feels")]),e._v(" "),a("p",[e._v("easier to add features, improve reliability, take care of edge cases, and so on.")]),e._v(" "),a("p",[e._v("Here are some cases format_pretty(obj) doesn’t handle:")]),e._v(" "),a("ul",[a("li",[e._v("It expects obj to be an object. If instead it’s a plain string (or undefined), the current code\nwill throw an exception.")]),e._v(" "),a("li",[e._v("It expects each value of obj to be a simple type. If instead it contains nested objects, the\ncurrent code will display them as [object Object], which isn’t very pretty.")])]),e._v(" "),a("p",[e._v("Before we separated format_pretty() into its own function, it would have felt like a lot of work")]),e._v(" "),a("p",[e._v("to make all these improvements. (In fact, recursively printing nested objects is very difficult")]),e._v(" "),a("p",[e._v("without a separate function.)")]),e._v(" "),a("p",[e._v("But now, adding this functionality is easy. Here’s what the improved code looks like:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('var format_pretty = function (obj, indent) {\n// Handle null, undefined, strings, and non-objects.\nif (obj === null) return "null";\nif (obj === undefined) return "undefined";\nif (typeof obj === "string") return \'"\' + obj + \'"\';\nif (typeof obj !== "object") return String(obj);\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('if (indent === undefined) indent = "";\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// Handle (non-null) objects.\nvar str = "{\\n";\nfor (var key in obj) {\nstr += indent + " " + key + " = ";\nstr += format_pretty (obj[key], indent + " ") + "\\n";\n}\nreturn str + indent + "}";\n};\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("EXTRACTING UNRELATED SUBPROBLEMS 113\n")])])]),a("p",[e._v("This covers the shortcomings listed previously and produces output like this:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\nkey1 = 1\nkey2 = true\nkey3 = undefined\nkey4 = null\nkey5 = {\nkey5a = {\nkey5a1 = "hello world"\n}\n}\n}\n')])])]),a("h3",{attrs:{id:"create-a-lot-of-general-purpose-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-a-lot-of-general-purpose-code"}},[e._v("#")]),e._v(" Create a Lot of General-Purpose Code")]),e._v(" "),a("p",[e._v("The functions ReadFileToString() and format_pretty() are great examples of unrelated")]),e._v(" "),a("p",[e._v("subproblems. They’re so basic and widely applicable that they are likely to be reused across")]),e._v(" "),a("p",[e._v("projects. Codebases often have a special directory for code like this (e.g., util/) so that it can")]),e._v(" "),a("p",[e._v("be easily shared.")]),e._v(" "),a("p",[e._v("General-purpose code is great because "),a("strong",[e._v("it’s completely decoupled from the rest of your")])]),e._v(" "),a("p",[a("strong",[e._v("project.")]),e._v(" Code like this is easier to develop, easier to test, and easier to understand. If only all")]),e._v(" "),a("p",[e._v("of your code could be like this!")]),e._v(" "),a("p",[e._v("Think about many of the powerful libraries and systems that you use, such as SQL databases,")]),e._v(" "),a("p",[e._v("JavaScript libraries, and HTML templating systems. You don’t have to worry about their")]),e._v(" "),a("p",[e._v("internals—those codebases are completely isolated from your project. As a result, your project’s")]),e._v(" "),a("p",[e._v("codebase remains small.")]),e._v(" "),a("p",[e._v("The more of your project you can break away as isolated libraries, the better, because the rest")]),e._v(" "),a("p",[e._v("of your code will be smaller and easier to think about.")]),e._v(" "),a("p",[e._v("IS THIS TOP-DOWN OR BOTTOM-UP PROGRAMMING?")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Top-down programming is a style where the highest-level modules and functions are designed first\nand the lower-level functions are implemented as needed to support them.\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Bottom-up programming tries to anticipate and solve all the subproblems first and then build the\nhigher-level components using these pieces.\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("This chapter isn’t advocating one method over the other. Most programming involves a combination\nof both. What’s important is the end result: subproblems are removed and tackled separately.\n")])])]),a("p",[a("strong",[e._v("114")]),e._v(" CHAPTER TEN")]),e._v(" "),a("h3",{attrs:{id:"project-specific-functionality"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#project-specific-functionality"}},[e._v("#")]),e._v(" Project-Specific Functionality")]),e._v(" "),a("p",[e._v("Ideally, the subproblems you extract would be completely project-agnostic. But even if they’re")]),e._v(" "),a("p",[e._v("not, that’s okay. Breaking off subproblems still works wonders.")]),e._v(" "),a("p",[e._v("Here is an example from a business reviews website. This Python code creates a new")]),e._v(" "),a("p",[e._v("Business object and sets its name, url, and date_created:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('business = Business()\nbusiness. name = request.POST["name"]\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('url_path_name = business.name.lower()\nurl_path_name = re.sub(r"[\'\\.]", "", url_path_name)\nurl_path_name = re.sub(r"[^a-z0-9]+", "-", url_path_name)\nurl_path_name = url_path_name.strip("-")\nbusiness. url = "/biz/" + url_path_name\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("business. date_created = datetime.datetime.utcnow()\nbusiness.save_to_database()\n")])])]),a("p",[e._v("The url is supposed to be a “clean” version of the name. For example, if the name is “A.C. Joe’s")]),e._v(" "),a("p",[e._v('Tire & Smog, Inc.,” the url will be "/biz/ac-joes-tire-smog-inc".')]),e._v(" "),a("p",[e._v("The unrelated subproblem in this code is: "),a("em",[e._v("Turn a name into a valid URL.")]),e._v(" We can extract this code")]),e._v(" "),a("p",[e._v("quite easily. While we’re at it, we can also precompile the regular expressions (and give them")]),e._v(" "),a("p",[e._v("readable names):")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('CHARS_TO_REMOVE = re.compile(r"[\'\\.]+")\nCHARS_TO_DASH = re.compile(r"[^a-z0-9]+")\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("def make_url_friendly (text):\ntext = text.lower()\ntext = CHARS_TO_REMOVE.sub('', text)\ntext = CHARS_TO_DASH.sub('-', text)\nreturn text.strip(\"-\")\n")])])]),a("p",[e._v("Now the original code has a much more “regular” pattern:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('business = Business()\nbusiness. name = request.POST["name"]\nbusiness. url = "/biz/" + make_url_friendly (business.name)\nbusiness. date_created = datetime.datetime.utcnow()\nbusiness.save_to_database()\n')])])]),a("p",[e._v("This code requires far less effort to read because you aren’t distracted by the regular expressions")]),e._v(" "),a("p",[e._v("and deep string manipulation.")]),e._v(" "),a("p",[e._v("Where should you put the code for make_url_friendly()? It seems like a fairly general function,")]),e._v(" "),a("p",[e._v("so it might make sense to put it in a separate util/ directory. On the other hand, those regular")]),e._v(" "),a("p",[e._v("expressions were designed with U.S. business names in mind, so perhaps the code should stay")]),e._v(" "),a("p",[e._v("in the same file where it’s used. It actually doesn’t matter that much, and you can easily move")]),e._v(" "),a("p",[e._v("the definition later on. What’s more important is that make_url_friendly() was extracted at all.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("EXTRACTING UNRELATED SUBPROBLEMS 115\n")])])]),a("h3",{attrs:{id:"simplifying-an-existing-interface"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#simplifying-an-existing-interface"}},[e._v("#")]),e._v(" Simplifying an Existing Interface")]),e._v(" "),a("p",[e._v("Everybody loves when a library offers a clean interface—one that takes few arguments, doesn’t")]),e._v(" "),a("p",[e._v("need much setup, and generally requires little effort to use. It makes your code look elegant:")]),e._v(" "),a("p",[e._v("simple and powerful at the same time.")]),e._v(" "),a("p",[e._v("But if an interface you’re using isn’t clean, you can still make your own “wrapper” functions")]),e._v(" "),a("p",[e._v("that are.")]),e._v(" "),a("p",[e._v("For example, dealing with browser cookies in JavaScript is far from ideal. Conceptually, cookies")]),e._v(" "),a("p",[e._v("are a set of name/value pairs. But the interface the browser provides presents a single")]),e._v(" "),a("p",[e._v("document.cookie string whose syntax is:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("name1=value1; name2=value2; ...\n")])])]),a("p",[e._v("To find the cookie you want, you’re forced to parse this giant string yourself. Here’s an example")]),e._v(" "),a("p",[e._v('of code that reads the value for the cookie named "max_results":')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var max_results;\nvar cookies = document.cookie.split(';');\nfor (var i = 0; i < cookies.length; i++) {\nvar c = cookies[i];\nc = c.replace(/^[ ]+/, ''); // remove leading spaces\nif (c.indexOf(\"max_results=\") === 0)\nmax_results = Number(c.substring(12, c.length));\n}\n")])])]),a("p",[e._v("Wow, that’s some ugly code. Clearly, there’s a get_cookie() function waiting to be made so that")]),e._v(" "),a("p",[e._v("we can just write:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('var max_results = Number( get_cookie ("max_results"));\n')])])]),a("p",[e._v("Creating or changing a cookie value is even stranger. You have to set document.cookie to a value")]),e._v(" "),a("p",[e._v("with an exact syntax:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('document.cookie = " max_results=50 ; expires=Wed, 1 Jan 2020 20:53:47 UTC; path=/";\n')])])]),a("p",[e._v("That statement looks like it would overwrite all other existing cookies, but (magically) it")]),e._v(" "),a("p",[e._v("doesn’t!")]),e._v(" "),a("p",[e._v("A more ideal interface to setting a cookie would be something like:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("set_cookie (name, value, days_to_expire);\n")])])]),a("p",[e._v("Erasing a cookie is also unintuitive: you have to set the cookie to expire in the past. Instead,")]),e._v(" "),a("p",[e._v("an ideal interface would be simply:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("delete_cookie (name);\n")])])]),a("p",[e._v("The lesson here is that "),a("strong",[e._v("you should never have to settle for an interface that’s less than")])]),e._v(" "),a("p",[a("strong",[e._v("ideal.")]),e._v(" You can always create your own wrapper functions to hide the ugly details of an")]),e._v(" "),a("p",[e._v("interface you’re stuck with.")]),e._v(" "),a("p",[a("strong",[e._v("116")]),e._v(" CHAPTER TEN")]),e._v(" "),a("h3",{attrs:{id:"reshaping-an-interface-to-your-needs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reshaping-an-interface-to-your-needs"}},[e._v("#")]),e._v(" Reshaping an Interface to Your Needs")]),e._v(" "),a("p",[e._v("A lot of code in a program is there just to support other code—for example, setting up inputs")]),e._v(" "),a("p",[e._v("to a function or postprocessing the output. This “glue” code often has nothing to do with the")]),e._v(" "),a("p",[e._v("real logic of your program. Mundane code like this is a great candidate to be pulled out into")]),e._v(" "),a("p",[e._v("separate functions.")]),e._v(" "),a("p",[e._v("For example, let’s say you have a Python dictionary containing sensitive user information like")]),e._v(" "),a("p",[e._v('{ "username": "...", "password": "..." } and you need to put all that information into a URL.')]),e._v(" "),a("p",[e._v("Because it’s sensitive, you decide to encrypt the dictionary first, using a Cipher class.")]),e._v(" "),a("p",[e._v("But Cipher expects a string of bytes as input, not a dictionary. And Cipher returns a string of")]),e._v(" "),a("p",[e._v("bytes, but we need something that’s URL-safe. Cipher also takes a number of extra parameters")]),e._v(" "),a("p",[e._v("and is pretty cumbersome to use.")]),e._v(" "),a("p",[e._v("What started as a simple task turns into a lot of glue code:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('user_info = { "username": "...", "password": "..." }\nuser_str = json.dumps(user_info)\ncipher = Cipher ("aes_128_cbc", key=PRIVATE_KEY, init_vector=INIT_VECTOR, op=ENCODE)\nencrypted_bytes = cipher.update (user_str)\nencrypted_bytes += cipher.final () # flush out the current 128 bit block\nurl = "http://example.com/?user_info=" + base64.urlsafe_b64encode(encrypted_bytes)\n')])])]),a("p",[e._v("Even though the problem we’re tackling is "),a("em",[e._v("Encrypt the user’s information into a URL,")]),e._v(" the majority")]),e._v(" "),a("p",[e._v("of this code is just doing "),a("em",[e._v("Encrypt this Python object into a URL-friendly string.")]),e._v(" It’s easy to extract")]),e._v(" "),a("p",[e._v("that subproblem:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('def url_safe_encrypt (obj):\nobj_str = json.dumps(obj)\ncipher = Cipher("aes_128_cbc", key=PRIVATE_KEY, init_vector=INIT_VECTOR, op=ENCODE)\nencrypted_bytes = cipher.update(obj_str)\nencrypted_bytes += cipher.final() # flush out the current 128 bit block\nreturn base64.urlsafe_b64encode(encrypted_bytes)\n')])])]),a("p",[e._v("Then, the resulting code to execute the "),a("em",[e._v("real")]),e._v(" logic of the program is simple:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('user_info = { "username": "...", "password": "..." }\nurl = "http://example.com/?user_info=" + url_safe_encrypt (user_info)\n')])])]),a("h3",{attrs:{id:"taking-things-too-far"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#taking-things-too-far"}},[e._v("#")]),e._v(" Taking Things Too Far")]),e._v(" "),a("p",[e._v("As we said at the beginning of the chapter, our goal is to “ "),a("em",[e._v("aggressively")]),e._v(" identify and extract")]),e._v(" "),a("p",[e._v("unrelated subproblems.” We say “aggressively” because most coders aren’t aggressive enough.")]),e._v(" "),a("p",[e._v("But it’s possible to get overexcited and take things too far.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("EXTRACTING UNRELATED SUBPROBLEMS 117\n")])])]),a("p",[e._v("For example, the code from the previous section could have been broken down much further,")]),e._v(" "),a("p",[e._v("like this:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('user_info = { "username": "...", "password": "..." }\nurl = "http://example.com/?user_info=" + url_safe_encrypt_obj (user_info)\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("def url_safe_encrypt_obj (obj):\nobj_str = json.dumps(obj)\nreturn url_safe_encrypt_str (obj_str)\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("def url_safe_encrypt_str (data):\nencrypted_bytes = encrypt (data)\nreturn base64.urlsafe_b64encode(encrypted_bytes)\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("def encrypt (data):\ncipher = make_cipher ()\nencrypted_bytes = cipher.update(data)\nencrypted_bytes += cipher.final() # flush out any remaining bytes\nreturn encrypted_bytes\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('def make_cipher ():\nreturn Cipher("aes_128_cbc", key=PRIVATE_KEY, init_vector=INIT_VECTOR, op=ENCODE)\n')])])]),a("p",[e._v("Introducing all these tiny functions actually hurts readability, because the reader has more to")]),e._v(" "),a("p",[e._v("keep track of, and following the path of execution requires jumping around.")]),e._v(" "),a("p",[e._v("There is a small (but tangible) readability cost of adding a new function to your code. In the")]),e._v(" "),a("p",[e._v("previous case, nothing is being gained to offset this cost. It may make sense to add these smaller")]),e._v(" "),a("p",[e._v("functions if they’re needed by other parts of your project. But until then, there is no need.")]),e._v(" "),a("h3",{attrs:{id:"summary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#summary"}},[e._v("#")]),e._v(" Summary")]),e._v(" "),a("p",[e._v("A simple way to think about this chapter is to "),a("strong",[e._v("separate the generic code from the project-")])]),e._v(" "),a("p",[a("strong",[e._v("specific code.")]),e._v(" As it turns out, most code is generic. By building a large set of libraries and")]),e._v(" "),a("p",[e._v("helper functions to solve the general problems, what’s left will be a small core of what makes")]),e._v(" "),a("p",[e._v("your program unique.")]),e._v(" "),a("p",[e._v("The main reason this technique helps is that it lets the programmer focus on smaller, well-")]),e._v(" "),a("p",[e._v("defined problems that are detached from the rest of your project. As a result, the solutions to")]),e._v(" "),a("p",[e._v("those subproblems tend to be more thorough and correct. You might also be able to reuse")]),e._v(" "),a("p",[e._v("them later.")]),e._v(" "),a("p",[a("strong",[e._v("118")]),e._v(" CHAPTER TEN")]),e._v(" "),a("p",[e._v("FURTHER READING")]),e._v(" "),a("p",[e._v("Martin Fowler’s "),a("em",[e._v("Refactoring: Improving the Design of Existing Code")]),e._v(" (Fowler et al., Addison-Wesley")]),e._v(" "),a("p",[e._v("Professional, 1999) describes the “Extract Method” of refactoring and catalogs many other ways to")]),e._v(" "),a("p",[e._v("refactor your code.")]),e._v(" "),a("p",[e._v("Kent Beck’s "),a("em",[e._v("Smalltalk Best Practice Patterns")]),e._v(" (Prentice Hall, 1996) describes the “Composed Method")]),e._v(" "),a("p",[e._v("Pattern,” which lists a number of principles for breaking down your code into lots of little functions.")]),e._v(" "),a("p",[e._v("In particular, one of the principles is “Keep all of the operations in a single method at the same level")]),e._v(" "),a("p",[e._v("of abstraction.”")]),e._v(" "),a("p",[e._v("These ideas are similar to our advice of “extracting unrelated subproblems.” What we discussed in")]),e._v(" "),a("p",[e._v("this chapter is a simple and particular case of when to extract a method.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("EXTRACTING UNRELATED SUBPROBLEMS 119\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);