(window.webpackJsonp=window.webpackJsonp||[]).push([[350],{1106:function(e,t,n){"use strict";n.r(t);var i=n(7),o=Object(i.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[n("strong",[e._v("Clean Code")])]),e._v(" "),n("p",[n("strong",[e._v("Robert C. Martin Series")])]),e._v(" "),n("p",[e._v("The mission of this series is to improve the state of the art of software craftsmanship.\nThe books in this series are technical, pragmatic, and substantial. The authors are")]),e._v(" "),n("p",[e._v("highly experienced craftsmen and professionals dedicated to writing about what\nactually works in practice, as opposed to what might work in theory. You will read\nabout what the author has done, not what he thinks you should do. If the book is\nabout programming, there will be lots of code. If the book is about managing, there\nwill be lots of case studies from real projects.")]),e._v(" "),n("p",[e._v("These are the books that all serious practitioners will have on their bookshelves.\nThese are the books that will be remembered for making a difference and for guiding\nprofessionals to become true craftsman.")]),e._v(" "),n("p",[n("em",[e._v("Managing Agile Projects")]),e._v("\nSanjiv Augustine")]),e._v(" "),n("p",[n("em",[e._v("Agile Estimating and Planning")]),e._v("\nMike Cohn")]),e._v(" "),n("p",[n("em",[e._v("Working Effectively with Legacy Code")])]),e._v(" "),n("p",[e._v("Michael C. Feathers")]),e._v(" "),n("p",[n("em",[e._v("Agile Java™: Crafting Code with Test-Driven Development")]),e._v("\nJeff Langr")]),e._v(" "),n("p",[n("em",[e._v("Agile Principles, Patterns, and Practices in C#")]),e._v("\nRobert C. Martin and Micah Martin")]),e._v(" "),n("p",[n("em",[e._v("Agile Software Development: Principles, Patterns, and Practices")]),e._v("\nRobert C. Martin")]),e._v(" "),n("p",[n("em",[e._v("Clean Code: A Handbook of Agile Software Craftsmanship")]),e._v("\nRobert C. Martin")]),e._v(" "),n("p",[n("em",[e._v("UML For Java™ Programmers")])]),e._v(" "),n("p",[e._v("Robert C. Martin")]),e._v(" "),n("p",[n("em",[e._v("Fit for Developing Software: Framework for Integrated Tests")]),e._v("\nRick Mugridge and Ward Cunningham")]),e._v(" "),n("p",[n("em",[e._v("Agile Software Development with SCRUM")]),e._v("\nKen Schwaber and Mike Beedle")]),e._v(" "),n("p",[n("em",[e._v("Extreme Software Engineering: A Hands on Approach")]),e._v("\nDaniel H. Steinberg and Daniel W. Palmer")]),e._v(" "),n("p",[n("strong",[e._v("For more information, visit informit.com/martinseries")])]),e._v(" "),n("h2",{attrs:{id:"clean-code"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#clean-code"}},[e._v("#")]),e._v(" Clean Code")]),e._v(" "),n("p",[n("strong",[n("em",[e._v("A Handbook of Agile")])])]),e._v(" "),n("p",[n("strong",[n("em",[e._v("Software Craftsmanship")])])]),e._v(" "),n("p",[e._v("The Object Mentors:")]),e._v(" "),n("h4",{attrs:{id:"robert-c-martin"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#robert-c-martin"}},[e._v("#")]),e._v(" Robert C. Martin")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Michael C. Feathers Timothy R. Ottinger\nJeffrey J. Langr Brett L. Schuchert\nJames W. Grenning Kevin Dean Wampler\nObject Mentor Inc.\n")])])]),n("p",[n("em",[e._v("Writing clean code is what you must do in order to call yourself a professional.")])]),e._v(" "),n("p",[n("em",[e._v("There is no reasonable excuse for doing anything less than your best.")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Upper Saddle River, NJ • Boston • Indianapolis • San Francisco\nNew York • Toronto • Montreal • London • Munich • Paris • Madrid\nCapetown • Sydney • Tokyo • Singapore • Mexico City\n")])])]),n("p",[e._v("Many of the designations used by manufacturers and sellers to distinguish their products are claimed as\ntrademarks. Where those designations appear in this book, and the publisher was aware of a trademark claim,\nthe designations have been printed with initial capital letters or in all capitals.\nThe authors and publisher have taken care in the preparation of this book, but make no expressed or\nimplied warranty of any kind and assume no responsibility for errors or omissions. No liability is assumed\nfor incidental or consequential damages in connection with or arising out of the use of the infor mation or\nprograms contained herein.\nThe publisher offers excellent discounts on this book when ordered in quantity for bulk purchases or\nspecial sales, which may include electronic versions and/or custom covers and content particular to your\nbusiness, training goals, marketing focus, and branding interests. For more information, please contact:\nU.S. Corporate and Government Sales\n(800) 382-\ncorpsales@pearsontechgroup.com\nFor sales outside the United States please contact:\nInternational Sales\ninternational@pearsoned.com")]),e._v(" "),n("p",[e._v("Includes bibliographical references and index.\nISBN 0-13-235088-2 (pbk. : alk. paper)")]),e._v(" "),n("ol",[n("li",[e._v("Agile software development. 2. Computer software—Reliability. I. Title.\nQA76.76.D47M3652 2008\n005.1—dc22 2008024750\nCopyright © 2009 Pearson Education, Inc.\nAll rights reserved. Printed in the United States of America. This publication is protected by copyright,\nand permission must be obtained from the publisher prior to any prohibited reproduction, storage in a\nretrieval system, or transmission in any form or by any means, electronic, mechanical, photocopying,\nrecording, or likewise. For information regarding permissions, write to:\nPearson Education, Inc\nRights and Contracts Department\n501 Boylston Street, Suite 900\nBoston, MA 02116\nFax: (617) 671-\nISBN-13: 978-0-13-235088-\nISBN-10: 0-13-235088-\nText printed in the United States on recycled paper at Courier in Stoughton, Massachusetts.\nFirst printing July, 2008")])]),e._v(" "),n("h4",{attrs:{id:"for-ann-marie-the-ever-enduring-love-of-my-life"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#for-ann-marie-the-ever-enduring-love-of-my-life"}},[e._v("#")]),e._v(" For Ann Marie: The ever enduring love of my life.")]),e._v(" "),n("h4",{attrs:{id:"this-page-intentionally-left-blank"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#this-page-intentionally-left-blank"}},[e._v("#")]),e._v(" This page intentionally left blank")]),e._v(" "),n("h2",{attrs:{id:"vii"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vii"}},[e._v("#")]),e._v(" vii")]),e._v(" "),n("h2",{attrs:{id:"contents"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#contents"}},[e._v("#")]),e._v(" Contents")]),e._v(" "),n("h3",{attrs:{id:"foreword-xix"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#foreword-xix"}},[e._v("#")]),e._v(" Foreword xix")]),e._v(" "),n("h3",{attrs:{id:"introduction-xxv"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#introduction-xxv"}},[e._v("#")]),e._v(" Introduction..xxv")]),e._v(" "),n("ul",[n("li",[e._v("Chapter 1: Clean Code  On the Cover... xxix\n"),n("ul",[n("li",[e._v("There Will Be Code ...")]),e._v(" "),n("li",[e._v("Bad Code")]),e._v(" "),n("li",[e._v("The Total Cost of Owning a Mess\n"),n("ul",[n("li",[e._v("The Grand Redesign in the Sky..")]),e._v(" "),n("li",[e._v("Attitude...")]),e._v(" "),n("li",[e._v("The Primal Conundrum ..")]),e._v(" "),n("li",[e._v("The Art of Clean Code?..")]),e._v(" "),n("li",[e._v("What Is Clean Code?..")])])]),e._v(" "),n("li",[e._v("Schools of Thought ..")]),e._v(" "),n("li",[e._v("We Are Authors")]),e._v(" "),n("li",[e._v("The Boy Scout Rule .")]),e._v(" "),n("li",[e._v("Prequel and Principles")]),e._v(" "),n("li",[e._v("Conclusion")]),e._v(" "),n("li",[e._v("Bibliography .")])])]),e._v(" "),n("li",[e._v("Chapter 2: Meaningful Names ...\n"),n("ul",[n("li",[e._v("Introduction .")]),e._v(" "),n("li",[e._v("Use Intention-Revealing Names .")]),e._v(" "),n("li",[e._v("Avoid Disinformation ..")]),e._v(" "),n("li",[e._v("Make Meaningful Distinctions ...")]),e._v(" "),n("li",[e._v("Use Pronounceable Names ..")]),e._v(" "),n("li",[e._v("Use Searchable Names")]),e._v(" "),n("li",[e._v("Avoid Encodings .. viii Contents\n"),n("ul",[n("li",[e._v("Hungarian Notation ..")]),e._v(" "),n("li",[e._v("Member Prefixes...")]),e._v(" "),n("li",[e._v("Interfaces and Implementations ...")])])]),e._v(" "),n("li",[e._v("Avoid Mental Mapping ...")]),e._v(" "),n("li",[e._v("Class Names .")]),e._v(" "),n("li",[e._v("Method Names .")]),e._v(" "),n("li",[e._v("Don’t Be Cute ..")]),e._v(" "),n("li",[e._v("Pick One Word per Concept ...")]),e._v(" "),n("li",[e._v("Don’t Pun .")]),e._v(" "),n("li",[e._v("Use Solution Domain Names ..")]),e._v(" "),n("li",[e._v("Use Problem Domain Names ..")]),e._v(" "),n("li",[e._v("Add Meaningful Context")]),e._v(" "),n("li",[e._v("Don’t Add Gratuitous Context ...")]),e._v(" "),n("li",[e._v("Final Words ..")])])]),e._v(" "),n("li",[e._v("Chapter 3: Functions .\n"),n("ul",[n("li",[e._v("Small!\n"),n("ul",[n("li",[e._v("Blocks and Indenting")])])]),e._v(" "),n("li",[e._v("Do One Thing ...\n"),n("ul",[n("li",[e._v("Sections within Functions")])])]),e._v(" "),n("li",[e._v("One Level of Abstraction per Function .\n"),n("ul",[n("li",[e._v("Reading Code from Top to Bottom: The Stepdown Rule ..")])])]),e._v(" "),n("li",[e._v("Switch Statements ...")]),e._v(" "),n("li",[e._v("Use Descriptive Names")]),e._v(" "),n("li",[e._v("Function Arguments\n"),n("ul",[n("li",[e._v("Common Monadic Forms.")]),e._v(" "),n("li",[e._v("Flag Arguments")]),e._v(" "),n("li",[e._v("Dyadic Functions..")]),e._v(" "),n("li",[e._v("Triads")]),e._v(" "),n("li",[e._v("Argument Objects.")]),e._v(" "),n("li",[e._v("Argument Lists .")]),e._v(" "),n("li",[e._v("Verbs and Keywords .")])])]),e._v(" "),n("li",[e._v("Have No Side Effects ...\n"),n("ul",[n("li",[e._v("Output Arguments")])])]),e._v(" "),n("li",[e._v("Command Query Separation .")]),e._v(" "),n("li",[e._v("Prefer Exceptions to Returning Error Codes ... Contents ix\n"),n("ul",[n("li",[e._v("Extract Try/Catch Blocks .")]),e._v(" "),n("li",[e._v("Error Handling Is One Thing")]),e._v(" "),n("li",[e._v("TheError.java Dependency Magnet .")])])]),e._v(" "),n("li",[e._v("Don’t Repeat Yourself .")]),e._v(" "),n("li",[e._v("Structured Programming ...")]),e._v(" "),n("li",[e._v("How Do You Write Functions Like This? ..")]),e._v(" "),n("li",[e._v("Conclusion")]),e._v(" "),n("li",[e._v("SetupTeardownIncluder .")]),e._v(" "),n("li",[e._v("Bibliography .")])])]),e._v(" "),n("li",[e._v("Chapter 4: Comments ...\n"),n("ul",[n("li",[e._v("Comments Do Not Make Up for Bad Code ...")]),e._v(" "),n("li",[e._v("Explain Yourself in Code")]),e._v(" "),n("li",[e._v("Good Comments ..\n"),n("ul",[n("li",[e._v("Legal Comments...")]),e._v(" "),n("li",[e._v("Informative Comments.")]),e._v(" "),n("li",[e._v("Explanation of Intent")]),e._v(" "),n("li",[e._v("Clarification ..")]),e._v(" "),n("li",[e._v("Warning of Consequences")]),e._v(" "),n("li",[e._v("TODO Comments.")]),e._v(" "),n("li",[e._v("Amplification")]),e._v(" "),n("li",[e._v("Javadocs in Public APIs")])])]),e._v(" "),n("li",[e._v("Bad Comments\n"),n("ul",[n("li",[e._v("Mumbling .")]),e._v(" "),n("li",[e._v("Redundant Comments ..")]),e._v(" "),n("li",[e._v("Misleading Comments..")]),e._v(" "),n("li",[e._v("Mandated Comments")]),e._v(" "),n("li",[e._v("Journal Comments")]),e._v(" "),n("li",[e._v("Noise Comments ..")]),e._v(" "),n("li",[e._v("Scary Noise ..")]),e._v(" "),n("li",[e._v("Function or a Variable... Don’t Use a Comment When You Can Use a")]),e._v(" "),n("li",[e._v("Position Markers...")]),e._v(" "),n("li",[e._v("Closing Brace Comments.")]),e._v(" "),n("li",[e._v("Attributions and Bylines...")]),e._v(" "),n("li",[e._v("Commented-Out Code.. x Contents")]),e._v(" "),n("li",[e._v("HTML Comments")]),e._v(" "),n("li",[e._v("Nonlocal Information ...")]),e._v(" "),n("li",[e._v("Too Much Information .")]),e._v(" "),n("li",[e._v("Inobvious Connection...")]),e._v(" "),n("li",[e._v("Function Headers..")]),e._v(" "),n("li",[e._v("Javadocs in Nonpublic Code")]),e._v(" "),n("li",[e._v("Example")])])]),e._v(" "),n("li",[e._v("Bibliography .")])])]),e._v(" "),n("li",[e._v("Chapter 5: Formatting ..\n"),n("ul",[n("li",[e._v("The Purpose of Formatting")]),e._v(" "),n("li",[e._v("Vertical Formatting .\n"),n("ul",[n("li",[e._v("The Newspaper Metaphor")]),e._v(" "),n("li",[e._v("Vertical Openness Between Concepts ..")]),e._v(" "),n("li",[e._v("Vertical Density")]),e._v(" "),n("li",[e._v("Vertical Distance ..")]),e._v(" "),n("li",[e._v("Vertical Ordering ..")])])]),e._v(" "),n("li",[e._v("Horizontal Formatting\n"),n("ul",[n("li",[e._v("Horizontal Openness and Density")]),e._v(" "),n("li",[e._v("Horizontal Alignment ...")]),e._v(" "),n("li",[e._v("Indentation")]),e._v(" "),n("li",[e._v("Dummy Scopes.")])])]),e._v(" "),n("li",[e._v("Team Rules ...")]),e._v(" "),n("li",[e._v("Uncle Bob’s Formatting Rules")])])]),e._v(" "),n("li",[e._v("Chapter 6: Objects and Data Structures\n"),n("ul",[n("li",[e._v("Data Abstraction ..")]),e._v(" "),n("li",[e._v("Data/Object Anti-Symmetry ..")]),e._v(" "),n("li",[e._v("The Law of Demeter\n"),n("ul",[n("li",[e._v("Train Wrecks")]),e._v(" "),n("li",[e._v("Hybrids .")]),e._v(" "),n("li",[e._v("Hiding Structure ...")])])]),e._v(" "),n("li",[e._v("Data Transfer Objects ...\n"),n("ul",[n("li",[e._v("Active Record .")])])]),e._v(" "),n("li",[e._v("Conclusion ..")]),e._v(" "),n("li",[e._v("Bibliography ...")])])]),e._v(" "),n("li",[e._v("Chapter 7: Error Handling ... Contents xi\n"),n("ul",[n("li",[e._v("Use Exceptions Rather Than Return Codes ...")]),e._v(" "),n("li",[e._v("Write Your Try-Catch-Finally Statement First ...")]),e._v(" "),n("li",[e._v("Use Unchecked Exceptions ...")]),e._v(" "),n("li",[e._v("Provide Context with Exceptions .")]),e._v(" "),n("li",[e._v("Define Exception Classes in Terms of a Caller’s Needs ..")]),e._v(" "),n("li",[e._v("Define the Normal Flow")]),e._v(" "),n("li",[e._v("Don’t Return Null ..")]),e._v(" "),n("li",[e._v("Don’t Pass Null ..")]),e._v(" "),n("li",[e._v("Conclusion ..")]),e._v(" "),n("li",[e._v("Bibliography ...")])])]),e._v(" "),n("li",[e._v("Chapter 8: Boundaries\n"),n("ul",[n("li",[e._v("Using Third-Party Code")]),e._v(" "),n("li",[e._v("Exploring and Learning Boundaries ...")]),e._v(" "),n("li",[e._v("Learning log4j .")]),e._v(" "),n("li",[e._v("Learning Tests Are Better Than Free ...")]),e._v(" "),n("li",[e._v("Using Code That Does Not Yet Exist")]),e._v(" "),n("li",[e._v("Clean Boundaries ..")]),e._v(" "),n("li",[e._v("Bibliography ...")])])]),e._v(" "),n("li",[e._v("Chapter 9: Unit Tests ...\n"),n("ul",[n("li",[e._v("The Three Laws of TDD ...")]),e._v(" "),n("li",[e._v("Keeping Tests Clean ..\n"),n("ul",[n("li",[e._v("Tests Enable the -ilities...")])])]),e._v(" "),n("li",[e._v("Clean Tests .\n"),n("ul",[n("li",[e._v("Domain-Specific Testing Language")]),e._v(" "),n("li",[e._v("A Dual Standard .")])])]),e._v(" "),n("li",[e._v("One Assert per Test ...\n"),n("ul",[n("li",[e._v("Single Concept per Test ..")])])]),e._v(" "),n("li",[e._v("F.I.R.S.T. .")]),e._v(" "),n("li",[e._v("Conclusion ..")]),e._v(" "),n("li",[e._v("Bibliography ...")])])]),e._v(" "),n("li",[e._v("Chapter 10: Classes ..\n"),n("ul",[n("li",[e._v("Class Organization\n"),n("ul",[n("li",[e._v("Encapsulation .")])])]),e._v(" "),n("li",[e._v("Classes Should Be Small! .. xii Contents\n"),n("ul",[n("li",[e._v("The Single Responsibility Principle ...")]),e._v(" "),n("li",[e._v("Cohesion.")]),e._v(" "),n("li",[e._v("Maintaining Cohesion Results in Many Small Classes..")])])]),e._v(" "),n("li",[e._v("Organizing for Change .\n"),n("ul",[n("li",[e._v("Isolating from Change")])])]),e._v(" "),n("li",[e._v("Bibliography ...")])])]),e._v(" "),n("li",[e._v("Chapter 11: Systems\n"),n("ul",[n("li",[e._v("How Would You Build a City? ..")]),e._v(" "),n("li",[e._v("Separate Constructing a System from Using It ..\n"),n("ul",[n("li",[e._v("Separation of Main .")]),e._v(" "),n("li",[e._v("Factories .")]),e._v(" "),n("li",[e._v("Dependency Injection.")])])]),e._v(" "),n("li",[e._v("Scaling Up ..\n"),n("ul",[n("li",[e._v("Cross-Cutting Concerns .")])])]),e._v(" "),n("li",[e._v("Java Proxies")]),e._v(" "),n("li",[e._v("Pure Java AOP Frameworks .")]),e._v(" "),n("li",[e._v("AspectJ Aspects .")]),e._v(" "),n("li",[e._v("Test Drive the System Architecture ..")]),e._v(" "),n("li",[e._v("Optimize Decision Making ...")]),e._v(" "),n("li",[e._v("Use Standards Wisely, When They Add Demonstrable Value .")]),e._v(" "),n("li",[e._v("Systems Need Domain-Specific Languages .")]),e._v(" "),n("li",[e._v("Conclusion ..")]),e._v(" "),n("li",[e._v("Bibliography ...")])])]),e._v(" "),n("li",[e._v("Chapter 12: Emergence ..\n"),n("ul",[n("li",[e._v("Getting Clean via Emergent Design")]),e._v(" "),n("li",[e._v("Simple Design Rule 1: Runs All the Tests")]),e._v(" "),n("li",[e._v("Simple Design Rules 2–4: Refactoring")]),e._v(" "),n("li",[e._v("No Duplication ...")]),e._v(" "),n("li",[e._v("Expressive ...")]),e._v(" "),n("li",[e._v("Minimal Classes and Methods .")]),e._v(" "),n("li",[e._v("Conclusion ..")]),e._v(" "),n("li",[e._v("Bibliography ...")])])]),e._v(" "),n("li",[e._v("Chapter 13: Concurrency ..\n"),n("ul",[n("li",[e._v("Why Concurrency? ...\n"),n("ul",[n("li",[e._v("Myths and Misconceptions.")])])]),e._v(" "),n("li",[e._v("Challenges .. Contents xiii")]),e._v(" "),n("li",[e._v("Concurrency Defense Principles ..\n"),n("ul",[n("li",[e._v("Single Responsibility Principle ..")]),e._v(" "),n("li",[e._v("Corollary: Limit the Scope of Data")]),e._v(" "),n("li",[e._v("Corollary: Use Copies of Data ...")]),e._v(" "),n("li",[e._v("Corollary: Threads Should Be as Independent as Possible")])])]),e._v(" "),n("li",[e._v("Know Your Library ...\n"),n("ul",[n("li",[e._v("Thread-Safe Collections .")])])]),e._v(" "),n("li",[e._v("Know Your Execution Models ..\n"),n("ul",[n("li",[e._v("Producer-Consumer")]),e._v(" "),n("li",[e._v("Readers-Writers..")]),e._v(" "),n("li",[e._v("Dining Philosophers ...")])])]),e._v(" "),n("li",[e._v("Beware Dependencies Between Synchronized Methods")]),e._v(" "),n("li",[e._v("Keep Synchronized Sections Small ..")]),e._v(" "),n("li",[e._v("Writing Correct Shut-Down Code Is Hard .")]),e._v(" "),n("li",[e._v("Testing Threaded Code .\n"),n("ul",[n("li",[e._v("Treat Spurious Failures as Candidate Threading Issues .")]),e._v(" "),n("li",[e._v("Get Your Nonthreaded Code Working First")]),e._v(" "),n("li",[e._v("Make Your Threaded Code Pluggable")]),e._v(" "),n("li",[e._v("Make Your Threaded Code Tunable")]),e._v(" "),n("li",[e._v("Run with More Threads Than Processors...")]),e._v(" "),n("li",[e._v("Run on Different Platforms")]),e._v(" "),n("li",[e._v("Instrument Your Code to Try and Force Failures")]),e._v(" "),n("li",[e._v("Hand-Coded ...")]),e._v(" "),n("li",[e._v("Automated ..")])])]),e._v(" "),n("li",[e._v("Conclusion ..")]),e._v(" "),n("li",[e._v("Bibliography ...")])])]),e._v(" "),n("li",[e._v("Chapter 14: Successive Refinement\n"),n("ul",[n("li",[e._v("Args Implementation\n"),n("ul",[n("li",[e._v("How Did I Do This? ...")])])]),e._v(" "),n("li",[e._v("Args: The Rough Draft .\n"),n("ul",[n("li",[e._v("So I Stopped ...")]),e._v(" "),n("li",[e._v("On Incrementalism .")])])]),e._v(" "),n("li",[e._v("String Arguments ..")]),e._v(" "),n("li",[e._v("Conclusion .")])])]),e._v(" "),n("li",[e._v("Chapter 15: JUnit Internals .. xiv Contents\n"),n("ul",[n("li",[e._v("The JUnit Framework ...")]),e._v(" "),n("li",[e._v("Conclusion ..")])])]),e._v(" "),n("li",[e._v("Chapter 16: Refactoring SerialDate .\n"),n("ul",[n("li",[e._v("First, Make It Work ...")]),e._v(" "),n("li",[e._v("Then Make It Right ...")]),e._v(" "),n("li",[e._v("Conclusion ..")]),e._v(" "),n("li",[e._v("Bibliography ...")])])]),e._v(" "),n("li",[e._v("Chapter 17: Smells and Heuristics .\n"),n("ul",[n("li",[e._v("Comments ..\n"),n("ul",[n("li",[e._v("C1: Inappropriate Information ...")]),e._v(" "),n("li",[e._v("C2: Obsolete Comment ...")]),e._v(" "),n("li",[e._v("C3: Redundant Comment ...")]),e._v(" "),n("li",[e._v("C4: Poorly Written Comment ..")]),e._v(" "),n("li",[e._v("C5: Commented-Out Code .")])])]),e._v(" "),n("li",[e._v("Environment ..\n"),n("ul",[n("li",[e._v("E1: Build Requires More Than One Step")]),e._v(" "),n("li",[e._v("E2: Tests Require More Than One Step ..")])])]),e._v(" "),n("li",[e._v("Functions\n"),n("ul",[n("li",[e._v("F1: Too Many Arguments")]),e._v(" "),n("li",[e._v("F2: Output Arguments")]),e._v(" "),n("li",[e._v("F3: Flag Arguments")]),e._v(" "),n("li",[e._v("F4: Dead Function .")])])]),e._v(" "),n("li",[e._v("General ...\n"),n("ul",[n("li",[e._v("G1: Multiple Languages in One Source File ..")]),e._v(" "),n("li",[e._v("G2: Obvious Behavior Is Unimplemented ..")]),e._v(" "),n("li",[e._v("G3: Incorrect Behavior at the Boundaries .")]),e._v(" "),n("li",[e._v("G4: Overridden Safeties .")]),e._v(" "),n("li",[e._v("G5: Duplication ..")]),e._v(" "),n("li",[e._v("G6: Code at Wrong Level of Abstraction")]),e._v(" "),n("li",[e._v("G7: Base Classes Depending on Their Derivatives ...")]),e._v(" "),n("li",[e._v("G8: Too Much Information .")]),e._v(" "),n("li",[e._v("G9: Dead Code ...")]),e._v(" "),n("li",[e._v("G10: Vertical Separation")]),e._v(" "),n("li",[e._v("G11: Inconsistency .")]),e._v(" "),n("li",[e._v("G12: Clutter")])])]),e._v(" "),n("li",[e._v("G13: Artificial Coupling . Contents xv")]),e._v(" "),n("li",[e._v("G14: Feature Envy ..")]),e._v(" "),n("li",[e._v("G15: Selector Arguments")]),e._v(" "),n("li",[e._v("G16: Obscured Intent .")]),e._v(" "),n("li",[e._v("G17: Misplaced Responsibility ...")]),e._v(" "),n("li",[e._v("G18: Inappropriate Static ...")]),e._v(" "),n("li",[e._v("G19: Use Explanatory Variables")]),e._v(" "),n("li",[e._v("G20: Function Names Should Say What They Do ..")]),e._v(" "),n("li",[e._v("G21: Understand the Algorithm .")]),e._v(" "),n("li",[e._v("G22: Make Logical Dependencies Physical ...")]),e._v(" "),n("li",[e._v("G23: Prefer Polymorphism to If/Else or Switch/Case")]),e._v(" "),n("li",[e._v("G24: Follow Standard Conventions")]),e._v(" "),n("li",[e._v("G25: Replace Magic Numbers with Named Constants ..")]),e._v(" "),n("li",[e._v("G26: Be Precise ..")]),e._v(" "),n("li",[e._v("G27: Structure over Convention .")]),e._v(" "),n("li",[e._v("G28: Encapsulate Conditionals .")]),e._v(" "),n("li",[e._v("G29: Avoid Negative Conditionals .")]),e._v(" "),n("li",[e._v("G30: Functions Should Do One Thing ...")]),e._v(" "),n("li",[e._v("G31: Hidden Temporal Couplings ..")]),e._v(" "),n("li",[e._v("G32: Don’t Be Arbitrary .")]),e._v(" "),n("li",[e._v("G33: Encapsulate Boundary Conditions")]),e._v(" "),n("li",[e._v("One Level of Abstraction  G34: Functions Should Descend Only")]),e._v(" "),n("li",[e._v("G35: Keep Configurable Data at High Levels")]),e._v(" "),n("li",[e._v("G36: Avoid Transitive Navigation ...")])])]),e._v(" "),n("li",[e._v("Java .\n"),n("ul",[n("li",[e._v("J1: Avoid Long Import Lists by Using Wildcards")]),e._v(" "),n("li",[e._v("J2: Don’t Inherit Constants")]),e._v(" "),n("li",[e._v("J3: Constants versus Enums ...")])])]),e._v(" "),n("li",[e._v("Names .\n"),n("ul",[n("li",[e._v("N1: Choose Descriptive Names ..")]),e._v(" "),n("li",[e._v("N2: Choose Names at the Appropriate Level of Abstraction ..")]),e._v(" "),n("li",[e._v("N3: Use Standard Nomenclature Where Possible ...")]),e._v(" "),n("li",[e._v("N4: Unambiguous Names ...")]),e._v(" "),n("li",[e._v("N5: Use Long Names for Long Scopes ...")]),e._v(" "),n("li",[e._v("N6: Avoid Encodings ..")]),e._v(" "),n("li",[e._v("N7: Names Should Describe Side-Effects. .")]),e._v(" "),n("li",[e._v("Tests  xvi Contents\n"),n("ul",[n("li",[e._v("T1: Insufficient Tests ...")]),e._v(" "),n("li",[e._v("T2: Use a Coverage Tool! ...")]),e._v(" "),n("li",[e._v("T3: Don’t Skip Trivial Tests")]),e._v(" "),n("li",[e._v("T4: An Ignored Test Is a Question about an Ambiguity ..")]),e._v(" "),n("li",[e._v("T5: Test Boundary Conditions")]),e._v(" "),n("li",[e._v("T6: Exhaustively Test Near Bugs")]),e._v(" "),n("li",[e._v("T7: Patterns of Failure Are Revealing")]),e._v(" "),n("li",[e._v("T8: Test Coverage Patterns Can Be Revealing ...")]),e._v(" "),n("li",[e._v("T9: Tests Should Be Fast .")])])]),e._v(" "),n("li",[e._v("Conclusion ..")]),e._v(" "),n("li",[e._v("Bibliography ...")])])]),e._v(" "),n("li",[e._v("Appendix A: Concurrency II .\n"),n("ul",[n("li",[e._v("Client/Server Example ..\n"),n("ul",[n("li",[e._v("The Server ..")]),e._v(" "),n("li",[e._v("Adding Threading...")]),e._v(" "),n("li",[e._v("Server Observations ...")]),e._v(" "),n("li",[e._v("Conclusion..")])])]),e._v(" "),n("li",[e._v("Possible Paths of Execution ..\n"),n("ul",[n("li",[e._v("Number of Paths .")]),e._v(" "),n("li",[e._v("Digging Deeper ..")]),e._v(" "),n("li",[e._v("Conclusion..")])])]),e._v(" "),n("li",[e._v("Knowing Your Library ..\n"),n("ul",[n("li",[e._v("Executor Framework ..")]),e._v(" "),n("li",[e._v("Nonblocking Solutions ...")]),e._v(" "),n("li",[e._v("Nonthread-Safe Classes..")])])]),e._v(" "),n("li",[e._v("Can Break Concurrent Code ... Dependencies Between Methods\n"),n("ul",[n("li",[e._v("Tolerate the Failure .")]),e._v(" "),n("li",[e._v("Client-Based Locking.")]),e._v(" "),n("li",[e._v("Server-Based Locking")])])]),e._v(" "),n("li",[e._v("Increasing Throughput .\n"),n("ul",[n("li",[e._v("Single-Thread Calculation of Throughput..")]),e._v(" "),n("li",[e._v("Multithread Calculation of Throughput..")])])]),e._v(" "),n("li",[e._v("Deadlock .\n"),n("ul",[n("li",[e._v("Mutual Exclusion ...")]),e._v(" "),n("li",[e._v("Lock & Wait ...")]),e._v(" "),n("li",[e._v("No Preemption Contents xvii")]),e._v(" "),n("li",[e._v("Circular Wait ..")]),e._v(" "),n("li",[e._v("Breaking Mutual Exclusion")]),e._v(" "),n("li",[e._v("Breaking Lock & Wait")]),e._v(" "),n("li",[e._v("Breaking Preemption..")]),e._v(" "),n("li",[e._v("Breaking Circular Wait...")])])]),e._v(" "),n("li",[e._v("Testing Multithreaded Code .")]),e._v(" "),n("li",[e._v("Tool Support for Testing Thread-Based Code")]),e._v(" "),n("li",[e._v("Conclusion ..")]),e._v(" "),n("li",[e._v("Tutorial: Full Code Examples ..\n"),n("ul",[n("li",[e._v("Client/Server Nonthreaded .")]),e._v(" "),n("li",[e._v("Client/Server Using Threads ..")])])])])]),e._v(" "),n("li",[e._v("Appendix B: org.jfree.date.SerialDate ..")]),e._v(" "),n("li",[e._v("Appendix C: Cross References of Heuristics ...")]),e._v(" "),n("li",[e._v("Epilogue")]),e._v(" "),n("li",[e._v("Index ..")])]),e._v(" "),n("h4",{attrs:{id:"this-page-intentionally-left-blank-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#this-page-intentionally-left-blank-2"}},[e._v("#")]),e._v(" This page intentionally left blank")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("xix\n")])])]),n("h2",{attrs:{id:"foreword"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#foreword"}},[e._v("#")]),e._v(" Foreword")]),e._v(" "),n("p",[e._v("One of our favorite candies here in Denmark is Ga-Jol, whose strong licorice vapors are a\nperfect complement to our damp and often chilly weather. Part of the charm of Ga-Jol to\nus Danes is the wise or witty sayings printed on the flap of every box top. I bought a two-\npack of the delicacy this morning and found that it bore this old Danish saw:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Ærlighed i små ting er ikke nogen lille ting.\n")])])]),n("p",[e._v("“Honesty in small things is not a small thing.” It was a good omen consistent with what I\nalready wanted to say here. Small things matter. This is a book about humble concerns\nwhose value is nonetheless far from small.")]),e._v(" "),n("p",[n("em",[e._v("God is in the details")]),e._v(" , said the architect Ludwig mies van der Rohe. This quote recalls\ncontemporary arguments about the role of architecture in software development, and par-\nticularly in the Agile world. Bob and I occasionally find ourselves passionately engaged in\nthis dialogue. And yes, mies van der Rohe was attentive to utility and to the timeless forms\nof building that underlie great architecture. On the other hand, he also personally selected\nevery doorknob for every house he designed. Why? Because small things matter.")]),e._v(" "),n("p",[e._v("In our ongoing “debate” on TDD, Bob and I have discovered that we agree that soft-\nware architecture has an important place in development, though we likely have different\nvisions of exactly what that means. Such quibbles are relatively unimportant, however,\nbecause we can accept for granted that responsible professionals give "),n("em",[e._v("some")]),e._v(" time to think-\ning and planning at the outset of a project. The late-1990s notions of design driven "),n("em",[e._v("only")]),e._v(" by\nthe tests and the code are long gone. Yet attentiveness to detail is an even more critical\nfoundation of professionalism than is any grand vision. First, it is through practice in the\nsmall that professionals gain proficiency and trust for practice in the large. Second, the\nsmallest bit of sloppy construction, of the door that does not close tightly or the slightly\ncrooked tile on the floor, or even the messy desk, completely dispels the charm of the\nlarger whole. That is what clean code is about.")]),e._v(" "),n("p",[e._v("Still, architecture is just one metaphor for software development, and in particular for\nthat part of software that delivers the initial "),n("em",[e._v("product")]),e._v(" in the same sense that an architect\ndelivers a pristine building. In these days of Scrum and Agile, the focus is on quickly\nbringing "),n("em",[e._v("product")]),e._v(" to market. We want the factory running at top speed to produce software.\nThese are human factories: thinking, feeling coders who are working from a product back-\nlog or user story to create "),n("em",[e._v("product")]),e._v(". The manufacturing metaphor looms ever strong in such\nthinking. The production aspects of Japanese auto manufacturing, of an assembly-line\nworld, inspire much of Scrum.")]),e._v(" "),n("p",[e._v("xx "),n("strong",[e._v("Foreword")])]),e._v(" "),n("p",[e._v("Yet even in the auto industry, the bulk of the work lies not in manufacturing but in\nmaintenance—or its avoidance. In software, 80% or more of what we do is quaintly called\n“maintenance”: the act of repair. Rather than embracing the typical Western focus on "),n("em",[e._v("pro-\nducing")]),e._v(" good software, we should be thinking more like home repairmen in the building\nindustry, or auto mechanics in the automotive field. What does Japanese management have\nto say about "),n("em",[e._v("that")]),e._v("?")]),e._v(" "),n("p",[e._v("In about 1951, a quality approach called Total Productive Maintenance (TPM) came\non the Japanese scene. Its focus is on maintenance rather than on production. One of the\nmajor pillars of TPM is the set of so-called 5S principles. 5S is a set of disciplines—and\nhere I use the term “discipline” instructively. These 5S principles are in fact at the founda-\ntions of Lean—another buzzword on the Western scene, and an increasingly prominent\nbuzzword in software circles. These principles are not an option. As Uncle Bob relates in\nhis front matter, good software practice requires such discipline: focus, presence of mind,\nand thinking. It is not always just about doing, about pushing the factory equipment to pro-\nduce at the optimal velocity. The 5S philosophy comprises these concepts:")]),e._v(" "),n("p",[n("strong",[e._v("-")]),e._v(" "),n("em",[e._v("Seiri")]),e._v(" , or organization (think “sort” in English). Knowing where things are—using\napproaches such as suitable naming—is crucial. You think naming identifiers isn’t\nimportant? Read on in the following chapters.\n"),n("strong",[e._v("-")]),e._v(" "),n("em",[e._v("Seiton")]),e._v(" , or tidiness (think “systematize” in English). There is an old American saying:\n"),n("em",[e._v("A place for everything, and everything in its place")]),e._v(". A piece of code should be where\nyou expect to find it—and, if not, you should re-factor to get it there.\n"),n("strong",[e._v("-")]),e._v(" "),n("em",[e._v("Seiso")]),e._v(" , or cleaning (think “shine” in English): Keep the workplace free of hanging\nwires, grease, scraps, and waste. What do the authors here say about littering your\ncode with comments and commented-out code lines that capture history or wishes for\nthe future? Get rid of them.\n"),n("strong",[e._v("-")]),e._v(" "),n("em",[e._v("Seiketsu")]),e._v(" , or standardization: The group agrees about how to keep the workplace clean.\nDo you think this book says anything about having a consistent coding style and set of\npractices within the group? Where do those standards come from? Read on.\n"),n("strong",[e._v("-")]),e._v(" "),n("em",[e._v("Shutsuke")]),e._v(" , or discipline ( "),n("em",[e._v("self")]),e._v(" -discipline). This means having the discipline to follow the\npractices and to frequently reflect on one’s work and be willing to change.\nIf you take up the challenge—yes, the challenge—of reading and applying this book,\nyou’ll come to understand and appreciate the last point. Here, we are finally driving to the\nroots of responsible professionalism in a profession that should be concerned with the life\ncycle of a product. As we maintain automobiles and other machines under TPM, break-\ndown maintenance—waiting for bugs to surface—is the exception. Instead, we go up a\nlevel: inspect the machines every day and fix wearing parts before they break, or do the\nequivalent of the proverbial 10,000-mile oil change to forestall wear and tear. In code,\nrefactor mercilessly. You can improve yet one level further, as the TPM movement inno-\nvated over 50 years ago: build machines that are more maintainable in the first place. Mak-\ning your code readable is as important as making it executable. The ultimate practice,\nintroduced in TPM circles around 1960, is to focus on introducing entire new machines or")]),e._v(" "),n("p",[n("strong",[e._v("Foreword")]),e._v(" xxi")]),e._v(" "),n("p",[e._v("replacing old ones. As Fred Brooks admonishes us, we should probably re-do major soft-\nware chunks from scratch every seven years or so to sweep away creeping cruft. Perhaps\nwe should update Brooks’ time constant to an order of weeks, days or hours instead of\nyears. That’s where detail lies.")]),e._v(" "),n("p",[e._v("There is great power in detail, yet there is something humble and profound about this\napproach to life, as we might stereotypically expect from any approach that claims Japa-\nnese roots. But this is not only an Eastern outlook on life; English and American folk wis-\ndom are full of such admonishments. The Seiton quote from above flowed from the pen of\nan Ohio minister who literally viewed neatness “as a remedy for every degree of evil.”\nHow about Seiso? "),n("em",[e._v("Cleanliness is next to godliness")]),e._v(". As beautiful as a house is, a messy\ndesk robs it of its splendor. How about Shutsuke in these small matters? "),n("em",[e._v("He who is faithful\nin little is faithful in much")]),e._v(". How about being eager to re-factor at the responsible time,\nstrengthening one’s position for subsequent “big” decisions, rather than putting it off? "),n("em",[e._v("A\nstitch in time saves nine")]),e._v(". "),n("em",[e._v("The early bird catches the worm. Don’t put off until tomorrow\nwhat you can do today.")]),e._v(" (Such was the original sense of the phrase “the last responsible\nmoment” in Lean until it fell into the hands of software consultants_._ ) How about calibrat-\ning the place of small, individual efforts in a grand whole? "),n("em",[e._v("Mighty oaks from little acorns\ngrow.")]),e._v(" Or how about integrating simple preventive work into everyday life? "),n("em",[e._v("An ounce of\nprevention is worth a pound of cure. An apple a day keeps the doctor away.")]),e._v(" Clean code\nhonors the deep roots of wisdom beneath our broader culture, or our culture as it once was,\nor should be, and "),n("em",[e._v("can")]),e._v(" be with attentiveness to detail.")]),e._v(" "),n("p",[e._v("Even in the grand architectural literature we find saws that hark back to these sup-\nposed details. Think of mies van der Rohe’s doorknobs. That’s "),n("em",[e._v("seiri")]),e._v(". That’s being attentive\nto every variable name. You should name a variable using the same care with which you\nname a first-born child.")]),e._v(" "),n("p",[e._v("As every homeowner knows, such care and ongoing refinement never come to an end.\nThe architect Christopher Alexander—father of patterns and pattern languages—views\nevery act of design itself as a small, local act of repair. And he views the craftsmanship of\nfine structure to be the sole purview of the architect; the larger forms can be left to patterns\nand their application by the inhabitants. Design is ever ongoing not only as we add a new\nroom to a house, but as we are attentive to repainting, replacing worn carpets, or upgrad-\ning the kitchen sink. Most arts echo analogous sentiments. In our search for others who\nascribe God’s home as being in the details, we find ourselves in the good company of the\n19th century French author Gustav Flaubert. The French poet Paul Valery advises us that a\npoem is never done and bears continual rework, and to stop working on it is abandonment.\nSuch preoccupation with detail is common to all endeavors of excellence. So maybe there\nis little new here, but in reading this book you will be challenged to take up good disci-\nplines that you long ago surrendered to apathy or a desire for spontaneity and just\n“responding to change.”")]),e._v(" "),n("p",[e._v("Unfortunately, we usually don’t view such concerns as key cornerstones of the art of\nprogramming. We abandon our code early, not because it is done, but because our value\nsystem focuses more on outward appearance than on the substance of what we deliver.")]),e._v(" "),n("p",[e._v("xxii "),n("strong",[e._v("Foreword")])]),e._v(" "),n("p",[e._v("This inattentiveness costs us in the end: "),n("em",[e._v("A bad penny always shows up")]),e._v(". Research, neither in\nindustry nor in academia, humbles itself to the lowly station of keeping code clean. Back\nin my days working in the Bell Labs Software Production Research organization ( "),n("em",[e._v("Produc-\ntion")]),e._v(" , indeed!) we had some back-of-the-envelope findings that suggested that consistent\nindentation style was one of the most statistically significant indicators of low bug density.\nWe want it to be that architecture or programming language or some other high notion\nshould be the cause of quality; as people whose supposed professionalism owes to the\nmastery of tools and lofty design methods, we feel insulted by the value that those factory-\nfloor machines, the coders, add through the simple consistent application of an indentation\nstyle. To quote my own book of 17 years ago, such style distinguishes excellence from\nmere competence. The Japanese worldview understands the crucial value of the everyday\nworker and, more so, of the systems of development that owe to the simple, everyday\nactions of those workers. Quality is the result of a million selfless acts of care—not just of\nany great method that descends from the heavens. That these acts are simple doesn’t mean\nthat they are simplistic, and it hardly means that they are easy. They are nonetheless the\nfabric of greatness and, more so, of beauty, in any human endeavor. To ignore them is not\nyet to be fully human.")]),e._v(" "),n("p",[e._v("Of course, I am still an advocate of thinking at broader scope, and particularly of the\nvalue of architectural approaches rooted in deep domain knowledge and software usability.\nThe book isn’t about that—or, at least, it isn’t obviously about that. This book has a subtler\nmessage whose profoundness should not be underappreciated. It fits with the current saw\nof the really code-based people like Peter Sommerlad, Kevlin Henney and Giovanni\nAsproni. “The code is the design” and “Simple code” are their mantras. While we must\ntake care to remember that the interface is the program, and that its structures have much\nto say about our program structure, it is crucial to continuously adopt the humble stance\nthat the design lives in the code. And while rework in the manufacturing metaphor leads to\ncost, rework in design leads to value. We should view our code as the beautiful articulation\nof noble efforts of design—design as a process, not a static endpoint. It’s in the code that\nthe architectural metrics of coupling and cohesion play out. If you listen to Larry Constan-\ntine describe coupling and cohesion, he speaks in terms of code—not lofty abstract con-\ncepts that one might find in UML. Richard Gabriel advises us in his essay, “Abstraction\nDescant” that abstraction is evil. Code is anti-evil, and clean code is perhaps divine.")]),e._v(" "),n("p",[e._v("Going back to my little box of Ga-Jol, I think it’s important to note that the Danish\nwisdom advises us not just to pay attention to small things, but also to be "),n("em",[e._v("honest")]),e._v(" in small\nthings. This means being honest to the code, honest to our colleagues about the state of our\ncode and, most of all, being honest with ourselves about our code. Did we Do our Best to\n“leave the campground cleaner than we found it”? Did we re-factor our code before check-\ning in? These are not peripheral concerns but concerns that lie squarely in the center of\nAgile values. It is a recommended practice in Scrum that re-factoring be part of the con-\ncept of “Done.” Neither architecture nor clean code insist on perfection, only on honesty\nand doing the best we can. "),n("em",[e._v("To err is human; to forgive, divine.")]),e._v(" In Scrum, we make every-\nthing visible. We air our dirty laundry. We are honest about the state of our code because")]),e._v(" "),n("p",[n("strong",[e._v("Foreword")]),e._v(" xxiii")]),e._v(" "),n("p",[e._v("code is never perfect. We become more fully human, more worthy of the divine, and closer\nto that greatness in the details.")]),e._v(" "),n("p",[e._v("In our profession, we desperately need all the help we can get. If a clean shop floor\nreduces accidents, and well-organized shop tools increase productivity, then I’m all for\nthem. As for this book, it is the best pragmatic application of Lean principles to software I\nhave ever seen in print. I expected no less from this practical little group of thinking indi-\nviduals that has been striving together for years not only to become better, but also to gift\ntheir knowledge to the industry in works such as you now find in your hands. It leaves the\nworld a little better than I found it before Uncle Bob sent me the manuscript.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Having completed this exercise in lofty insights, I am off to clean my desk.\n")])])]),n("p",[n("strong",[e._v("James O. Coplien")]),e._v("\nMørdrup, Denmark")]),e._v(" "),n("h4",{attrs:{id:"this-page-intentionally-left-blank-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#this-page-intentionally-left-blank-3"}},[e._v("#")]),e._v(" This page intentionally left blank")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("xxv\n")])])]),n("h2",{attrs:{id:"introduction"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[e._v("#")]),e._v(" Introduction")]),e._v(" "),n("p",[e._v("Which door represents your code? Which door represents your team or your company?\nWhy are we in that room? Is this just a normal code review or have we found a stream of\nhorrible problems shortly after going live? Are we debugging in a panic, poring over code\nthat we thought worked? Are customers leaving in droves and managers breathing down")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Reproduced with the kind permission of Thom Holwerda.\nhttp://www.osnews.com/story/19266/WTFs_m\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("(c) 2008 Focus Shift\n")])])]),n("p",[e._v("xxvi "),n("strong",[e._v("Introduction")])]),e._v(" "),n("p",[e._v("our necks? How can we make sure we wind up behind the "),n("em",[e._v("right")]),e._v(" door when the going gets\ntough? The answer is: "),n("em",[e._v("craftsmanship")]),e._v(".")]),e._v(" "),n("p",[e._v("There are two parts to learning craftsmanship: knowledge and work. You must gain\nthe knowledge of principles, patterns, practices, and heuristics that a craftsman knows, and\nyou must also grind that knowledge into your fingers, eyes, and gut by working hard and\npracticing.")]),e._v(" "),n("p",[e._v("I can teach you the physics of riding a bicycle. Indeed, the classical mathematics is\nrelatively straightforward. Gravity, friction, angular momentum, center of mass, and so\nforth, can be demonstrated with less than a page full of equations. Given those formulae I\ncould prove to you that bicycle riding is practical and give you all the knowledge you\nneeded to make it work. And you’d still fall down the first time you climbed on that bike.")]),e._v(" "),n("p",[e._v("Coding is no different. We could write down all the “feel good” principles of clean\ncode and then trust you to do the work (in other words, let you fall down when you get on\nthe bike), but then what kind of teachers would that make us, and what kind of student\nwould that make you?")]),e._v(" "),n("p",[e._v("No. That’s not the way this book is going to work.\nLearning to write clean code is "),n("em",[e._v("hard work")]),e._v(". It requires more than just the knowledge of\nprinciples and patterns. You must "),n("em",[e._v("sweat")]),e._v(" over it. You must practice it yourself, and watch\nyourself fail. You must watch others practice it and fail. You must see them stumble and\nretrace their steps. You must see them agonize over decisions and see the price they pay for\nmaking those decisions the wrong way.")]),e._v(" "),n("p",[e._v("Be prepared to work hard while reading this book. This is not a “feel good” book that\nyou can read on an airplane and finish before you land. This book will make you work, "),n("em",[e._v("and\nwork hard")]),e._v(". What kind of work will you be doing? You’ll be reading code—lots of code.\nAnd you will be challenged to think about what’s right about that code and what’s wrong\nwith it. You’ll be asked to follow along as we take modules apart and put them back\ntogether again. This will take time and effort; but we think it will be worth it.")]),e._v(" "),n("p",[e._v("We have divided this book into three parts. The first several chapters describe the prin-\nciples, patterns, and practices of writing clean code. There is quite a bit of code in these\nchapters, and they will be challenging to read. They’ll prepare you for the second section\nto come. If you put the book down after reading the first section, good luck to you!")]),e._v(" "),n("p",[e._v("The second part of the book is the harder work. It consists of several case studies of\never-increasing complexity. Each case study is an exercise in cleaning up some code—of\ntransforming code that has some problems into code that has fewer problems. The detail in\nthis section is "),n("em",[e._v("intense")]),e._v(". You will have to flip back and forth between the narrative and the\ncode listings. You will have to analyze and understand the code we are working with and\nwalk through our reasoning for making each change we make. Set aside some time\nbecause "),n("em",[e._v("this should take you days")]),e._v(".")]),e._v(" "),n("p",[e._v("The third part of this book is the payoff. It is a single chapter containing a list of heu-\nristics and smells gathered while creating the case studies. As we walked through and\ncleaned up the code in the case studies, we documented every reason for our actions as a")]),e._v(" "),n("p",[n("strong",[e._v("Introduction")]),e._v(" xxvii")]),e._v(" "),n("p",[e._v("heuristic or smell. We tried to understand our own reactions to the code we were reading\nand changing, and worked hard to capture why we felt what we felt and did what we did.\nThe result is a knowledge base that desribes the way we think when we write, read, and\nclean code.")]),e._v(" "),n("p",[e._v("This knowledge base is of limited value if you don’t do the work of carefully reading\nthrough the case studies in the second part of this book. In those case studies we have care-\nfully annotated each change we made with forward references to the heuristics. These for-\nward references appear in square brackets like this: [H22]. This lets you see the "),n("em",[e._v("context")]),e._v(" in\nwhich those heuristics were applied and written! It is not the heuristics themselves that are\nso valuable, it is the "),n("em",[e._v("relationship between those heuristics and the discrete decisions we\nmade while cleaning up the code in the case studies")]),e._v(".")]),e._v(" "),n("p",[e._v("To further help you with those relationships, we have placed a cross-referenceat the end\nof the book that shows the page number for every forward reference. You can use it to look\nup each place where a certain heuristic was applied.")]),e._v(" "),n("p",[e._v("If you read the first and third sections and skip over the case studies, then you will\nhave read yet another “feel good” book about writing good software. But if you take the\ntime to work through the case studies, following every tiny step, every minute decision—if\nyou put yourself in our place, and force yourself to think along the same paths that we\nthought, then you will gain a much richer understanding of those principles, patterns, prac-\ntices, and heuristics. They won’t be “feel good” knowledge any more. They’ll have been\nground into your gut, fingers, and heart. They’ll have become part of you in the same way\nthat a bicycle becomes an extension of your will when you have mastered how to ride it.")]),e._v(" "),n("h3",{attrs:{id:"acknowledgments"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#acknowledgments"}},[e._v("#")]),e._v(" Acknowledgments")]),e._v(" "),n("h4",{attrs:{id:"artwork"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#artwork"}},[e._v("#")]),e._v(" Artwork")]),e._v(" "),n("p",[e._v("Thank you to my two artists, Jeniffer Kohnke and Angela Brooks. Jennifer is responsible\nfor the stunning and creative pictures at the start of each chapter and also for the portraits\nof Kent Beck, Ward Cunningham, Bjarne Stroustrup, Ron Jeffries, Grady Booch, Dave\nThomas, Michael Feathers, and myself.")]),e._v(" "),n("p",[e._v("Angela is responsible for the clever pictures that adorn the innards of each chapter.\nShe has done quite a few pictures for me over the years, including many of the inside pic-\ntures in "),n("em",[e._v("Agile Software Develpment: Principles, Patterns, and Practices")]),e._v(". She is also my\nfirstborn in whom I am well pleased.")])])}),[],!1,null,null,null);t.default=o.exports}}]);