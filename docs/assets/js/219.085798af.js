(window.webpackJsonp=window.webpackJsonp||[]).push([[219],{779:function(e,t,a){"use strict";a.r(t);var s=a(7),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"c-h-a-p-t-e-r-s-e-v-e-n"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-h-a-p-t-e-r-s-e-v-e-n"}},[e._v("#")]),e._v(" C H A P T E R S E V E N")]),e._v(" "),a("p",[a("strong",[e._v("Making Control Flow Easy to Read")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("69\n")])])]),a("p",[e._v("If code had no conditionals, loops, or any other "),a("em",[e._v("control flow")]),e._v(" statements, it would be very easy")]),e._v(" "),a("p",[e._v("to read. These jumps and branches are the hard stuff, where code can get confusing quickly.")]),e._v(" "),a("p",[e._v("This chapter is about making the control flow in your code easy to read.")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("K E Y I D E A")]),e._v(" "),a("p",[e._v("Make all your conditionals, loops, and other changes to control flow as “natural”\nas possible—written in a way that doesn’t make the reader stop and reread your\ncode.")])]),e._v(" "),a("h3",{attrs:{id:"the-order-of-arguments-in-conditionals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-order-of-arguments-in-conditionals"}},[e._v("#")]),e._v(" The Order of Arguments in Conditionals")]),e._v(" "),a("p",[e._v("Which of these two pieces of code is more readable:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (length >= 10)\n")])])]),a("p",[e._v("or")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (10 <= length)\n")])])]),a("p",[e._v("To most programmers, the first is much more readable. But what about the next two:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("while (bytes_received < bytes_expected)\n")])])]),a("p",[e._v("or")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("while (bytes_expected > bytes_received)\n")])])]),a("p",[e._v("Again, the first version is more readable. But why? What’s the general rule? How do you decide")]),e._v(" "),a("p",[e._v("whether it’s better to write a < b or b > a?")]),e._v(" "),a("p",[e._v("Here’s a guideline we’ve found useful:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Left-hand side Right-hand side\nThe expression “being interrogated,” whose value is more in\nflux.\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("The expression being compared against, whose value is\nmore constant.\n")])])]),a("p",[e._v("This guideline matches English usage—it’s pretty natural to say, “if you make at least")]),e._v(" "),a("p",[e._v("$100K/year” or “if you are at least 18 years old.” It’s unnatural to say, “if 18 years is less than")]),e._v(" "),a("p",[e._v("or equal to your age.”")]),e._v(" "),a("p",[e._v("This explains why while (bytes_received < bytes_expected) is more readable. bytes_received is")]),e._v(" "),a("p",[e._v("the value that we’re checking up on, and it’s increasing as the loop executes. bytes_expected is")]),e._v(" "),a("p",[e._v("the more “stable” value being compared against.")]),e._v(" "),a("p",[a("strong",[e._v("70")]),e._v(" CHAPTER SEVEN")]),e._v(" "),a("p",[e._v("“YODA NOTATION”: STILL USEFUL?")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("In some languages (including C and C++, but not Java), it’s legal to put an assignment inside an if\ncondition:\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (obj = NULL) ...\n")])])]),a("p",[e._v("Most likely this is a bug, and the programmer actually meant:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (obj == NULL) ...\n")])])]),a("p",[e._v("To prevent bugs like this, many programmers "),a("strong",[e._v("switch the order of arguments")]),e._v(" :")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (NULL == obj) ...\n")])])]),a("p",[e._v("This way, if == is accidentally written as =, the expression if (NULL = obj) won’t even compile.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Unfortunately, switching the order makes the code a bit unnatural to read. (As Yoda would say, “Not\nif anything to say about it I have.”) Thankfully, modern compilers warn against code like if (obj =\nNULL), so “Yoda Notation” is becoming a thing of the past.\n")])])]),a("h3",{attrs:{id:"the-order-of-if-else-blocks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-order-of-if-else-blocks"}},[e._v("#")]),e._v(" The Order of if/else Blocks")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("MAKING CONTROL FLOW EASY TO READ 71\n")])])]),a("p",[e._v("When writing an if/else statement, you usually have the freedom to swap the order of the")]),e._v(" "),a("p",[e._v("blocks. For instance, you can either write it like:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (a == b) {\n// Case One ...\n} else {\n// Case Two ...\n}\n")])])]),a("p",[e._v("or as:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if ( a != b ) {\n// Case Two ...\n} else {\n// Case One ...\n}\n")])])]),a("p",[e._v("You may not have given much thought about this before, but in some cases there are good")]),e._v(" "),a("p",[e._v("reasons to prefer one order over the other:")]),e._v(" "),a("ul",[a("li",[e._v("Prefer dealing with the "),a("em",[e._v("positive")]),e._v(" case first instead of the negative—e.g., if (debug) instead\nof if (!debug).")]),e._v(" "),a("li",[e._v("Prefer dealing with the "),a("em",[e._v("simpler")]),e._v(" case first to get it out of the way. This approach might also\nallow both the if and the else to be visible on the screen at the same time, which is nice.")]),e._v(" "),a("li",[e._v("Prefer dealing with the more "),a("em",[e._v("interesting")]),e._v(" or conspicuous case first.")])]),e._v(" "),a("p",[e._v("Sometimes these preferences conflict, and you have to make a judgment call. But in many")]),e._v(" "),a("p",[e._v("cases, there is a clear winner.")]),e._v(" "),a("p",[e._v("For example, suppose you have a web server that’s building a response based on whether the")]),e._v(" "),a("p",[e._v("URL contains the query parameter expand_all:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('if (!url.HasQueryParameter("expand_all")) {\nresponse.Render(items);\n...\n} else {\nfor (int i = 0; i < items.size(); i++) {\nitems[i].Expand();\n}\n...\n}\n')])])]),a("p",[e._v("When the reader glances at the first line, her brain immediately thinks about the expand_all")]),e._v(" "),a("p",[e._v("case. It’s like when someone says, “Don’t think of a pink elephant.” You can’t help but think")]),e._v(" "),a("p",[e._v("about it—the “don’t” is drowned out by the more unusual “pink elephant.”")]),e._v(" "),a("p",[e._v("Here, expand_all is our pink elephant. Because it’s the more interesting case (and it’s the")]),e._v(" "),a("p",[e._v("positive case, too), let’s deal with it first:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('if (url.HasQueryParameter("expand_all")) {\nfor (int i = 0; i < items.size(); i++) {\nitems[i].Expand();\n}\n')])])]),a("p",[a("strong",[e._v("72")]),e._v(" CHAPTER SEVEN")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("} else {\nresponse.Render(items);\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("}\n")])])]),a("p",[e._v("On the other hand, here’s a situation where the negative case "),a("em",[e._v("is")]),e._v(" the simpler and more")]),e._v(" "),a("p",[e._v("interesting/dangerous one, so we deal with it first:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if not file:\n# Log the error ...\nelse:\n# ...\n")])])]),a("p",[e._v("Again, depending on the details, this may be a judgment call.")]),e._v(" "),a("p",[e._v("To summarize, our advice is simply to pay attention to these factors and watch out for cases")]),e._v(" "),a("p",[e._v("where your if/else is in an awkward order.")]),e._v(" "),a("h3",{attrs:{id:"the-conditional-expression-a-k-a-ternary-operator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-conditional-expression-a-k-a-ternary-operator"}},[e._v("#")]),e._v(" The ?: Conditional Expression (a.k.a. “Ternary Operator”)")]),e._v(" "),a("p",[e._v("In C-like languages, you can write a conditional expression as cond? a : b, which is essentially")]),e._v(" "),a("p",[e._v("a compact way to write if (cond) { a } else { b }.")]),e._v(" "),a("p",[e._v("Its effect on readability is controversial. Proponents think it’s a nice way to write something in")]),e._v(" "),a("p",[e._v("one line that would otherwise require multiple lines. Opponents argue that it can be confusing")]),e._v(" "),a("p",[e._v("to read and difficult to step through in a debugger.")]),e._v(" "),a("p",[e._v("Here’s a case where the ternary operator is readable and compact:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('time_str += (hour >= 12)? "pm" : "am";\n')])])]),a("p",[e._v("Avoiding the ternary operator, you might write:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('if (hour >= 12) {\ntime_str += "pm";\n} else {\ntime_str += "am";\n}\n')])])]),a("p",[e._v("which is a bit drawn out and redundant. In this case, a conditional expression seems reasonable.")]),e._v(" "),a("p",[e._v("However, these expressions can quickly become difficult to read:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("return exponent >= 0? mantissa * (1 << exponent) : mantissa / (1 << -exponent);\n")])])]),a("p",[e._v("Here, the ternary operator is no longer just choosing between two simple values. The")]),e._v(" "),a("p",[e._v("motivation for writing code like this is usually to “squeeze everything on one line.”")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("K E Y I D E A")]),e._v(" "),a("p",[e._v("Instead of minimizing the number of lines, a better metric is to minimize the time\nneeded for someone to understand it.")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("MAKING CONTROL FLOW EASY TO READ 73\n")])])]),a("p",[e._v("Spelling out the logic with an if/else statement makes the code more natural:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (exponent >= 0) {\nreturn mantissa * (1 << exponent);\n} else {\nreturn mantissa / (1 << -exponent);\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("A D VI C E\nBy default, use an if/else. The ternary ?: should be used only for the simplest cases.\n")])])]),a("h3",{attrs:{id:"avoid-do-while-loops"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#avoid-do-while-loops"}},[e._v("#")]),e._v(" Avoid do/while Loops")]),e._v(" "),a("p",[e._v("Many respected programming languages, as well as Perl, have a do { expression } while")]),e._v(" "),a("p",[e._v("(condition) loop. The expression is executed at least once. Here’s an example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Search through the list, starting at 'node', for the given 'name'.\n// Don't consider more than 'max_length' nodes.\npublic boolean ListHasNode(Node node, String name, int max_length) {\ndo {\nif (node.name().equals(name))\nreturn true;\nnode = node.next();\n} while (node != null && --max_length > 0);\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("return false;\n}\n")])])]),a("p",[a("strong",[e._v("74")]),e._v(" CHAPTER SEVEN")]),e._v(" "),a("p",[e._v("What’s weird about a do/while loop is that a block of code may or may not be reexecuted based")]),e._v(" "),a("p",[e._v("on a condition "),a("em",[e._v("underneath")]),e._v(" it. Typically, logical conditions are "),a("em",[e._v("above")]),e._v(" the code they guard—this")]),e._v(" "),a("p",[e._v("is the way it works with if, while, and for statements. Because you typically read code from")]),e._v(" "),a("p",[e._v("top to bottom, this makes do/while a bit unnatural. Many readers end up reading the code twice.")]),e._v(" "),a("p",[e._v("while loops are easier to read because you know the condition for all iterations before you read")]),e._v(" "),a("p",[e._v("the block of code inside. But it would be silly to duplicate code just to remove a do/while:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Imitating a do/while — DON'T DO THIS!\nbody\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("while ( condition ) {\nbody (again)\n}\n")])])]),a("p",[e._v("Fortunately, we’ve found that in practice most do/while loops could have been written as")]),e._v(" "),a("p",[e._v("while loops to begin with:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public boolean ListHasNode(Node node, String name, int max_length) {\nwhile (node != null && max_length-- > 0) {\nif (node.name().equals(name)) return true;\nnode = node.next();\n}\nreturn false;\n}\n")])])]),a("p",[e._v("This version also has the benefit that it still works if max_length is 0 or if node is null.")]),e._v(" "),a("p",[e._v("Another reason to avoid do/while is that the continue statement can be confusing inside it. For")]),e._v(" "),a("p",[e._v("instance, what does this code do?")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("do {\ncontinue;\n} while (false);\n")])])]),a("p",[e._v("Does it loop forever or just once? Most programmers have to stop and think about it. (It should")]),e._v(" "),a("p",[e._v("loop just once.)")]),e._v(" "),a("p",[e._v("Overall, Bjarne Stroustrup, the creator of C++, says it best (in "),a("em",[e._v("The C++ Programming Language")]),e._v(" ):")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("In my experience, the do-statement is a source of errors and confusion. ... I prefer the condition\n“up front where I can see it.” Consequently, I tend to avoid do-statements.\n")])])]),a("h3",{attrs:{id:"returning-early-from-a-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#returning-early-from-a-function"}},[e._v("#")]),e._v(" Returning Early from a Function")]),e._v(" "),a("p",[e._v("Some coders believe that functions should never have multiple return statements. This is")]),e._v(" "),a("p",[e._v("nonsense. Returning early from a function is perfectly fine—and often desirable. For example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('public boolean Contains(String str, String substr) {\nif (str == null || substr == null) return false;\nif (substr.equals("")) return true;\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("MAKING CONTROL FLOW EASY TO READ 75\n")])])]),a("h4",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")]),e._v(" }")]),e._v(" "),a("p",[e._v("Implementing this function without these “guard clauses” would be very unnatural.")]),e._v(" "),a("p",[e._v("One of the motivations for wanting a single exit point is so that all the cleanup code at the")]),e._v(" "),a("p",[e._v("bottom of the function is guaranteed to be called. But modern languages offer more")]),e._v(" "),a("p",[e._v("sophisticated ways to achieve this guarantee:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Language Structured idiom for cleanup code\nC++ destructors\nJava, Python try finally\nPython with\nC# using\n")])])]),a("p",[e._v("In pure C, there is no mechanism to trigger specific code when a function exits. So if there’s a")]),e._v(" "),a("p",[e._v("large function with a lot of cleanup code, returning early may be difficult to do correctly. In")]),e._v(" "),a("p",[e._v("this case, other options include refactoring the function or even judicious use of goto cleanup;.")]),e._v(" "),a("h3",{attrs:{id:"the-infamous-goto"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-infamous-goto"}},[e._v("#")]),e._v(" The Infamous goto")]),e._v(" "),a("p",[e._v("In languages other than C, there is little need for goto because there are so many better ways")]),e._v(" "),a("p",[e._v("to get the job done. gotos are also notorious for getting out of hand quickly and making code")]),e._v(" "),a("p",[e._v("difficult to follow.")]),e._v(" "),a("p",[e._v("But you can still see goto used in various C projects—most notably the Linux kernel. Before")]),e._v(" "),a("p",[e._v("you dismiss all use of goto as blasphemy, it’s useful to dissect why some uses of goto are better")]),e._v(" "),a("p",[e._v("than others.")]),e._v(" "),a("p",[e._v("The simplest, most innocent use of goto is with a single exit at the bottom of a function:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (p == NULL) goto exit ;\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("...\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("exit :\nfclose(file1);\nfclose(file2);\n...\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("return;\n")])])]),a("p",[e._v("If this were the only form of goto allowed, goto wouldn’t be much of a problem.")]),e._v(" "),a("p",[e._v("The problems can come when there are "),a("em",[e._v("multiple")]),e._v(" goto targets, especially when their paths cross.")]),e._v(" "),a("p",[e._v("In particular, gotos that go "),a("em",[e._v("upward")]),e._v(" can make for real spaghetti code, and they can surely be")]),e._v(" "),a("p",[e._v("replaced with structured loops. Most of the time, goto should be avoided.")]),e._v(" "),a("p",[a("strong",[e._v("76")]),e._v(" CHAPTER SEVEN")]),e._v(" "),a("h3",{attrs:{id:"minimize-nesting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#minimize-nesting"}},[e._v("#")]),e._v(" Minimize Nesting")]),e._v(" "),a("p",[e._v("Deeply nested code is hard to understand. Each level of nesting pushes an extra condition onto")]),e._v(" "),a("p",[e._v("the reader’s “mental stack.” When the reader sees a closing brace (}) it can be hard to “pop”")]),e._v(" "),a("p",[e._v("the stack and remember what condition is underneath.")]),e._v(" "),a("p",[e._v("Here is a relatively simple example of this—see if you notice yourself looking back up to double-")]),e._v(" "),a("p",[e._v("check which block conditions you’re in:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('if (user_result == SUCCESS) {\nif (permission_result != SUCCESS) {\nreply.WriteErrors("error reading permissions");\nreply.Done();\nreturn;\n}\nreply.WriteErrors("");\n} else {\nreply.WriteErrors(user_result);\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("}\nreply.Done();\n")])])]),a("p",[e._v("When you see that first closing brace, you have to think to yourself, "),a("em",[e._v("Oh,")]),e._v(" permission_result !=")]),e._v(" "),a("p",[e._v("SUCCESS "),a("em",[e._v("has just ended, so now")]),e._v(" permission_result == SUCCESS "),a("em",[e._v(", and this is still inside the block where")])]),e._v(" "),a("p",[e._v("user_result == SUCCESS_._")]),e._v(" "),a("p",[e._v("Overall, you have to keep the values of user_result and permission_result in your head at all")]),e._v(" "),a("p",[e._v("times. And as each if { } block closes, you have to toggle the corresponding value in your mind.")]),e._v(" "),a("p",[e._v("This particular code is even worse because it keeps alternating between the SUCCESS and non-")]),e._v(" "),a("p",[e._v("SUCCESS situations.")]),e._v(" "),a("p",[a("strong",[e._v("How Nesting Accumulates")])]),e._v(" "),a("p",[e._v("Before we try to fix the previous example code, let’s talk about how it ended up the way it did.")]),e._v(" "),a("p",[e._v("Originally, the code was simple:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('if (user_result == SUCCESS) {\nreply.WriteErrors("");\n} else {\nreply.WriteErrors(user_result);\n}\nreply.Done();\n')])])]),a("p",[e._v("This code is perfectly understandable—it figures out what error string to write, and then it’s")]),e._v(" "),a("p",[e._v("done with the reply.")]),e._v(" "),a("p",[e._v("But then the programmer added a second operation:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('if (user_result == SUCCESS) {\nif (permission_result != SUCCESS) {\nreply.WriteErrors("error reading permissions");\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("MAKING CONTROL FLOW EASY TO READ 77\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('reply.Done();\nreturn;\n}\nreply.WriteErrors("");\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("...\n")])])]),a("p",[e._v("This change makes sense—the programmer had a new chunk of code to insert, and she found")]),e._v(" "),a("p",[e._v("the easiest place to insert it. This new code was fresh and mentally “bolded” in her mind. And")]),e._v(" "),a("p",[e._v("the “diff” of this change is very clean—it looks like a simple change.")]),e._v(" "),a("p",[e._v("But when someone else comes across the code later, all that context is gone. This is the way it")]),e._v(" "),a("p",[e._v("was for you when you first read the code at the beginning of this section—you had to take it")]),e._v(" "),a("p",[e._v("in all at once.")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("K E Y I D E A")]),e._v(" "),a("p",[e._v("Look at your code from a fresh perspective when you’re making changes. Step back\nand look at it as a whole.")])]),e._v(" "),a("p",[a("strong",[e._v("Removing Nesting by Returning Early")])]),e._v(" "),a("p",[e._v("Okay, so let’s improve the code. Nesting like this can be removed by handling the “failure cases”")]),e._v(" "),a("p",[e._v("as soon as possible and returning early from the function:")]),e._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("user_result "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!=")]),e._v(" SUCCESS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    reply"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("WriteErrors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("user_result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    reply"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("Done")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("permission_result "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!=")]),e._v(" SUCCESS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    reply"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("WriteErrors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("permission_result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    reply"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("Done")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[e._v("reply"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("WriteErrors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\nreply"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("Done")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),a("p",[e._v("This code only has one level of nesting, instead of two. But more importantly, the reader never")]),e._v(" "),a("p",[e._v("has to “pop” anything from his mental stack—every if block ends in a return.")]),e._v(" "),a("p",[a("strong",[e._v("Removing Nesting Inside Loops")])]),e._v(" "),a("p",[e._v("The technique of returning early isn’t always applicable. For example, here’s a case of code")]),e._v(" "),a("p",[e._v("nested in a loop:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("for (int i = 0; i < results.size(); i++) {\nif (results[i] != NULL) {\nnon_null_count++;\n")])])]),a("p",[a("strong",[e._v("78")]),e._v(" CHAPTER SEVEN")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('if (results[i]->name != "") {\ncout << "Considering candidate..." << endl;\n')])])]),a("h4",{attrs:{id:"-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[e._v("#")]),e._v(" }")]),e._v(" "),a("h4",{attrs:{id:"-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#-3"}},[e._v("#")]),e._v(" }")]),e._v(" "),a("h4",{attrs:{id:"-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#-4"}},[e._v("#")]),e._v(" }")]),e._v(" "),a("p",[e._v("Inside a loop, the analogous technique to returning early is to continue:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("for (int i = 0; i < results.size(); i++) {\nif (results[i] == NULL) continue ;\nnon_null_count++;\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('if (results[i]->name == "") continue ;\ncout << "Considering candidate..." << endl;\n')])])]),a("h4",{attrs:{id:"-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#-5"}},[e._v("#")]),e._v(" }")]),e._v(" "),a("p",[e._v("In the same way that an if (...) return; acts as a guard clause for a function, these if (...)")]),e._v(" "),a("p",[e._v("continue; statements act as guard clauses for the loop.")]),e._v(" "),a("p",[e._v("In general, the continue statement can be confusing, because it bounces the reader around, like")]),e._v(" "),a("p",[e._v("a goto inside the loop. But in this case, each iteration of the loop is independent (the loop is a")]),e._v(" "),a("p",[e._v("“for each”), so the reader can easily see that continue just means “skip over this item.”")]),e._v(" "),a("h3",{attrs:{id:"can-you-follow-the-flow-of-execution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#can-you-follow-the-flow-of-execution"}},[e._v("#")]),e._v(" Can You Follow the Flow of Execution?")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("MAKING CONTROL FLOW EASY TO READ 79\n")])])]),a("p",[e._v("This chapter has been about low-level control flow: how to make loops, conditionals, and other")]),e._v(" "),a("p",[e._v("jumps easy to read. But you should also think about the “flow” of your program at a high level.")]),e._v(" "),a("p",[e._v("Ideally, it would be easy to follow the entire execution path of your program—you’d start at")]),e._v(" "),a("p",[e._v("main() and mentally step through the code, as one function calls another, until the program")]),e._v(" "),a("p",[e._v("exits.")]),e._v(" "),a("p",[e._v("In practice, however, programming languages and libraries have constructs that let code")]),e._v(" "),a("p",[e._v("execute “behind the scenes” or make it difficult to follow. Here are some examples:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Programming construct How high-level program flow gets obscured\nthreading It’s unclear what code is executed when.\nsignal/interrupt handlers Certain code might be executed at any time.\nexceptions Execution can bubble up through multiple function calls.\nfunction pointers & anonymous functions It’s hard to know exactly what code is going to run because that isn’t known\nat compile time.\nvirtual methods object.virtualMethod() might invoke code of an unknown subclass.\n")])])]),a("p",[e._v("Some of these constructs are very useful, and they can even make your code more readable")]),e._v(" "),a("p",[e._v("and less redundant. But as programmers, sometimes we get carried away and use them")]),e._v(" "),a("p",[e._v("excessively without realizing how difficult it will be for readers to understand the code later.")]),e._v(" "),a("p",[e._v("Also, these constructs make bugs much harder to track down.")]),e._v(" "),a("p",[e._v("The key is to not let too large a percentage of your code use these constructs. If you abuse these")]),e._v(" "),a("p",[e._v("features, it can make tracing through your code like a game of Three-Card Monte (as in the")]),e._v(" "),a("p",[e._v("cartoon).")]),e._v(" "),a("h3",{attrs:{id:"summary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#summary"}},[e._v("#")]),e._v(" Summary")]),e._v(" "),a("p",[e._v("There are a number of things you can do to make your code’s control flow easier to read.")]),e._v(" "),a("p",[e._v("When writing a comparison (while (bytes_expected > bytes_received)), it’s better to put the")]),e._v(" "),a("p",[e._v("changing value on the left and the more stable value on the right (while (bytes_received <")]),e._v(" "),a("p",[e._v("bytes_expected)).")]),e._v(" "),a("p",[e._v("You can also reorder the blocks of an if/else statement. Generally, try to handle the positive/")]),e._v(" "),a("p",[e._v("easier/interesting case first. Sometimes these criteria conflict, but when they don’t, it’s a good")]),e._v(" "),a("p",[e._v("rule of thumb to follow.")]),e._v(" "),a("p",[e._v("Certain programming constructs, like the ternary operator (: ?), the do/while loop, and goto")]),e._v(" "),a("p",[e._v("often result in unreadable code. It’s usually best not to use them, as clearer alternatives almost")]),e._v(" "),a("p",[e._v("always exist.")]),e._v(" "),a("p",[a("strong",[e._v("80")]),e._v(" CHAPTER SEVEN")]),e._v(" "),a("p",[e._v("Nested code blocks require more concentration to follow along. Each new nesting requires")]),e._v(" "),a("p",[e._v("more context to be “pushed onto the stack” of the reader. Instead, opt for more “linear” code")]),e._v(" "),a("p",[e._v("to avoid deep nesting.")]),e._v(" "),a("p",[e._v("Returning early can remove nesting and clean up code in general. “Guard statements”")]),e._v(" "),a("p",[e._v("(handling simple cases at the top of the function) are especially useful.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("MAKING CONTROL FLOW EASY TO READ 81\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);