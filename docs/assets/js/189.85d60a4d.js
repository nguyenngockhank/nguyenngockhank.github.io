(window.webpackJsonp=window.webpackJsonp||[]).push([[189],{1302:function(e,t,a){"use strict";a.r(t);var r=a(7),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"cqrs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cqrs"}},[e._v("#")]),e._v(" CQRS")]),e._v(" "),a("p",[e._v("CQRS stands for Command Query Responsibility Segregation. It's an architectural pattern that separates the read and write operations for a data store.")]),e._v(" "),a("h2",{attrs:{id:"how-it-works"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-it-works"}},[e._v("#")]),e._v(" How it works:")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("Commands")]),e._v(": These are instructions to modify the system's state. They are typically asynchronous and idempotent.")]),e._v(" "),a("li",[a("strong",[e._v("Queries")]),e._v(": These are used to retrieve information from the system without modifying its state. They are typically read-only operations.")])]),e._v(" "),a("h3",{attrs:{id:"benefits-of-cqrs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#benefits-of-cqrs"}},[e._v("#")]),e._v(" Benefits of CQRS:")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("Improved performance")]),e._v(": By separating read and write operations, you can optimize each independently.")]),e._v(" "),a("li",[a("strong",[e._v("Increased scalability")]),e._v(": You can scale read and write components differently based on their load.")]),e._v(" "),a("li",[a("strong",[e._v("Enhanced security")]),e._v(": Isolating write operations can help protect sensitive data.")]),e._v(" "),a("li",[a("strong",[e._v("Better testability")]),e._v(": Separating concerns makes unit testing easier.")])]),e._v(" "),a("h3",{attrs:{id:"example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[e._v("#")]),e._v(" Example")]),e._v(" "),a("p",[a("strong",[e._v("Monolith System with multi storage")])]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("Write model")]),e._v(": A transactional database (e.g., SQL Server) for handling commands like placing orders, updating product inventory.")]),e._v(" "),a("li",[a("strong",[e._v("Read model")]),e._v(": A read-optimized database (e.g., NoSQL like MongoDB) for handling queries like product catalog, order history.")])]),e._v(" "),a("p",[a("strong",[e._v("Microservices System")]),e._v("\nCQRS is a natural fit for microservices architectures. It aligns perfectly with the principles of independent services, each responsible for a specific domain.")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("Write model")]),e._v(":\n"),a("ul",[a("li",[e._v("Order Service: Handles placing orders, canceling orders, updating order status.")]),e._v(" "),a("li",[e._v("Inventory Service: Handles updating product inventory levels.")])])]),e._v(" "),a("li",[a("strong",[e._v("Read model")]),e._v(":\n"),a("ul",[a("li",[e._v("Customer Service: Uses events from Order and Inventory services to update its read model.")])])])]),e._v(" "),a("h2",{attrs:{id:"architecture"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#architecture"}},[e._v("#")]),e._v(" Architecture")]),e._v(" "),a("h3",{attrs:{id:"with-event-sourcing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#with-event-sourcing"}},[e._v("#")]),e._v(" With event sourcing")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://i.pinimg.com/originals/13/41/f6/1341f69dcdcb1434395689f060c1e183.webp",alt:"Event sourcing & CQRS"}})]),e._v(" "),a("h3",{attrs:{id:"on-aws"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#on-aws"}},[e._v("#")]),e._v(" On aws")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://i.pinimg.com/originals/ac/00/16/ac0016768c2ca1c7d55ded1b764eaf21.png",alt:"CQRS on aws"}})]),e._v(" "),a("h2",{attrs:{id:"logical"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#logical"}},[e._v("#")]),e._v(" Logical")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://i.pinimg.com/originals/b5/1b/df/b51bdfe32e85f7c9793f57b54ebfa549.png",alt:"logical cqrs"}})])])}),[],!1,null,null,null);t.default=s.exports}}]);