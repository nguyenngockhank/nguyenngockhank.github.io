(window.webpackJsonp=window.webpackJsonp||[]).push([[312],{950:function(e,t,n){"use strict";n.r(t);var a=n(7),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_13-concurrency"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-concurrency"}},[e._v("#")]),e._v(" 13. Concurrency")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("by Brett L. Schuchert\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("“Objects are abstractions of processing. Threads are abstractions of schedule.”\n—James O. Coplien^1\n")])])]),n("ol",[n("li",[e._v("Private correspondence.")])]),e._v(" "),n("p",[e._v("178 "),n("strong",[e._v("Chapter 13: Concurrency")])]),e._v(" "),n("p",[e._v("Writing clean concurrent programs is hard—very hard. It is much easier to write code that\nexecutes in a single thread. It is also easy to write multithreaded code that looks fine on the\nsurface but is broken at a deeper level. Such code works fine until the system is placed\nunder stress.")]),e._v(" "),n("p",[e._v("In this chapter we discuss the need for concurrent programming, and the difficulties\nit presents. We then present several recommendations for dealing with those difficulties,\nand writing clean concurrent code. Finally, we conclude with issues related to testing\nconcurrent code.")]),e._v(" "),n("p",[e._v("Clean Concurrency is a complex topic, worthy of a book by itself. Our strategy in "),n("em",[e._v("this")]),e._v("\nbook is to present an overview here and provide a more detailed tutorial in “Concurrency II”\non page 317. If you are just curious about concurrency, then this chapter will suffice for you\nnow. If you have a need to understand concurrency at a deeper level, then you should read\nthrough the tutorial as well.")]),e._v(" "),n("h2",{attrs:{id:"why-concurrency"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#why-concurrency"}},[e._v("#")]),e._v(" Why Concurrency?")]),e._v(" "),n("p",[e._v("Concurrency is a decoupling strategy. It helps us decouple "),n("em",[e._v("what")]),e._v(" gets done from "),n("em",[e._v("when")]),e._v(" it\ngets done. In single-threaded applications "),n("em",[e._v("what")]),e._v(" and "),n("em",[e._v("when")]),e._v(" are so strongly coupled that the\nstate of the entire application can often be determined by looking at the stack backtrace. A\nprogrammer who debugs such a system can set a breakpoint, or a sequence of breakpoints,\nand "),n("em",[e._v("know")]),e._v(" the state of the system by which breakpoints are hit.")]),e._v(" "),n("p",[e._v("Decoupling "),n("em",[e._v("what")]),e._v(" from "),n("em",[e._v("when")]),e._v(" can dramatically improve both the throughput and struc-\ntures of an application. From a structural point of view the application looks like many lit-\ntle collaborating computers rather than one big main loop. This can make the system easier\nto understand and offers some powerful ways to separate concerns.")]),e._v(" "),n("p",[e._v("Consider, for example, the standard “Servlet” model of Web applications. These sys-\ntems run under the umbrella of a Web or EJB container that "),n("em",[e._v("partially")]),e._v(" manages concur-\nrency for you. The servlets are executed asynchronously whenever Web requests come in.\nThe servlet programmer does not have to manage all the incoming requests. "),n("em",[e._v("In principle,")]),e._v("\neach servlet execution lives in its own little world and is decoupled from all the other serv-\nlet executions.")]),e._v(" "),n("p",[e._v("Of course if it were that easy, this chapter wouldn’t be necessary. In fact, the decou-\npling provided by Web containers is far less than perfect. Servlet programmers have to be\nvery aware, and very careful, to make sure their concurrent programs are correct. Still, the\nstructural benefits of the servlet model are significant.")]),e._v(" "),n("p",[e._v("But structure is not the only motive for adopting concurrency. Some systems have\nresponse time and throughput constraints that require hand-coded concurrent solutions.\nFor example, consider a single-threaded information aggregator that acquires information\nfrom many different Web sites and merges that information into a daily summary. Because")]),e._v(" "),n("p",[n("strong",[e._v("Why Concurrency?")]),e._v(" 179")]),e._v(" "),n("p",[e._v("this system is single threaded, it hits each Web site in turn, always finishing one before\nstarting the next. The daily run needs to execute in less than 24 hours. However, as more\nand more Web sites are added, the time grows until it takes more than 24 hours to gather\nall the data. The single-thread involves a lot of waiting at Web sockets for I/O to complete.\nWe could improve the performance by using a multithreaded algorithm that hits more than\none Web site at a time.")]),e._v(" "),n("p",[e._v("Or consider a system that handles one user at a time and requires only one second\nof time per user. This system is fairly responsive for a few users, but as the number of\nusers increases, the system’s response time increases. No user wants to get in line\nbehind 150 others! We could improve the response time of this system by handling\nmany users concurrently.")]),e._v(" "),n("p",[e._v("Or consider a system that interprets large data sets but can only give a complete solu-\ntion after processing all of them. Perhaps each data set could be processed on a different\ncomputer, so that many data sets are being processed in parallel.")]),e._v(" "),n("h3",{attrs:{id:"myths-and-misconceptions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#myths-and-misconceptions"}},[e._v("#")]),e._v(" Myths and Misconceptions.")]),e._v(" "),n("p",[e._v("And so there are compelling reasons to adopt concurrency. However, as we said before,\nconcurrency is "),n("em",[e._v("hard")]),e._v(". If you aren’t very careful, you can create some very nasty situations.\nConsider these common myths and misconceptions:")]),e._v(" "),n("ul",[n("li",[n("em",[e._v("Concurrency always improves performance.")]),e._v("\nConcurrency can "),n("em",[e._v("sometimes")]),e._v(" improve performance, but only when there is a lot of wait\ntime that can be shared between multiple threads or multiple processors. Neither situ-\nation is trivial.")]),e._v(" "),n("li",[n("em",[e._v("Design does not change when writing concurrent programs.")]),e._v("\nIn fact, the design of a concurrent algorithm can be remarkably different from the\ndesign of a single-threaded system. The decoupling of "),n("em",[e._v("what")]),e._v(" from "),n("em",[e._v("when")]),e._v(" usually has a\nhuge effect on the structure of the system.")]),e._v(" "),n("li",[n("em",[e._v("Understanding concurrency issues is not important when working with a container")]),e._v(" "),n("em",[e._v("such as a Web or EJB container.")]),e._v("\nIn fact, you’d better know just what your container is doing and how to guard against\nthe issues of concurrent update and deadlock described later in this chapter.")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Here are a few more balanced sound bites regarding writing concurrent software:\n")])])]),n("ul",[n("li",[n("em",[e._v("Concurrency incurs some overhead,")]),e._v(" both in performance as well as writing additional\ncode.")]),e._v(" "),n("li",[n("em",[e._v("Correct concurrency is complex,")]),e._v(" even for simple problems.")])]),e._v(" "),n("p",[e._v("180 "),n("strong",[e._v("Chapter 13: Concurrency")])]),e._v(" "),n("ul",[n("li",[n("em",[e._v("Concurrency bugs aren’t usually repeatable,")]),e._v(" so they are often ignored as one-offs^2\ninstead of the true defects they are.")]),e._v(" "),n("li",[n("em",[e._v("Concurrency often requires a fundamental change in design strategy")]),e._v(".")])]),e._v(" "),n("h2",{attrs:{id:"challenges"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#challenges"}},[e._v("#")]),e._v(" Challenges")]),e._v(" "),n("p",[e._v("What makes concurrent programming so difficult? Consider the following trivial class:")]),e._v(" "),n("p",[e._v("public class X {\nprivate int lastIdUsed;\npublic int getNextId() {\nreturn ++lastIdUsed;\n}\n}\nLet’s say we create an instance of X, set the lastIdUsedfield to 42, and then share the\ninstance between two threads. Now suppose that both of those threads call the method\ngetNextId(); there are three possible outcomes:")]),e._v(" "),n("ul",[n("li",[e._v("Thread one gets the value 43, thread two gets the value 44, lastIdUsed is 44.")]),e._v(" "),n("li",[e._v("Thread one gets the value 44, thread two gets the value 43, lastIdUsed is 44.")]),e._v(" "),n("li",[e._v("Thread one gets the value 43, thread two gets the value 43, lastIdUsed is 43.")])]),e._v(" "),n("p",[e._v("The surprising third result^3 occurs when the two threads step on each other. This hap-\npens because there are many possible paths that the two threads can take through that one\nline of Java code, and some of those paths generate incorrect results. How many different\npaths are there? To really answer that question, we need to understand what the Just-In-\nTime Compiler does with the generated byte-code, and understand what the Java memory\nmodel considers to be atomic.")]),e._v(" "),n("p",[e._v("A quick answer, working with just the generated byte-code, is that there are 12,870\ndifferent possible execution paths^4 for those two threads executing within the getNextId\nmethod. If the type of lastIdUsedis changed from inttolong, the number of possible\npaths increases to 2,704,156. Of course most of those paths generate valid results. The\nproblem is that "),n("em",[e._v("some of them don’t")]),e._v(".")]),e._v(" "),n("h2",{attrs:{id:"concurrency-defense-principles"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#concurrency-defense-principles"}},[e._v("#")]),e._v(" Concurrency Defense Principles ..")]),e._v(" "),n("p",[e._v("What follows is a series of principles and techniques for defending your systems from the\nproblems of concurrent code.")]),e._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[e._v("Cosmic-rays, glitches, and so on.")]),e._v(" "),n("li",[e._v("See “Digging Deeper” on page 323.")]),e._v(" "),n("li",[e._v("See “Possible Paths of Execution” on page 321.")])]),e._v(" "),n("p",[n("strong",[e._v("Concurrency Defense Principles")]),e._v(" 181")]),e._v(" "),n("h3",{attrs:{id:"single-responsibility-principle"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#single-responsibility-principle"}},[e._v("#")]),e._v(" Single Responsibility Principle ..")]),e._v(" "),n("p",[e._v("The SRP^5 states that a given method/class/component should have a single reason to\nchange. Concurrency design is complex enough to be a reason to change in it’s own right\nand therefore deserves to be separated from the rest of the code. Unfortunately, it is all too\ncommon for concurrency implementation details to be embedded directly into other pro-\nduction code. Here are a few things to consider:")]),e._v(" "),n("ul",[n("li",[n("em",[e._v("Concurrency-related code has its own life cycle of development,")]),e._v(" change, and tuning.")]),e._v(" "),n("li",[n("em",[e._v("Concurrency-related code has its own challenges,")]),e._v(" which are different from and often\nmore difficult than nonconcurrency-related code.")]),e._v(" "),n("li",[e._v("The number of ways in which miswritten concurrency-based code can fail makes it\nchallenging enough without the added burden of surrounding application code.")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Recommendation : Keep your concurrency-related code separate from other code.^6\n")])])]),n("h3",{attrs:{id:"corollary-limit-the-scope-of-data"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#corollary-limit-the-scope-of-data"}},[e._v("#")]),e._v(" Corollary: Limit the Scope of Data")]),e._v(" "),n("p",[e._v("As we saw, two threads modifying the same field of a shared object can interfere with each\nother, causing unexpected behavior. One solution is to use the synchronizedkeyword to\nprotect a "),n("em",[e._v("critical section")]),e._v(" in the code that uses the shared object. It is important to restrict\nthe number of such critical sections. The more places shared data can get updated, the\nmore likely:")]),e._v(" "),n("ul",[n("li",[e._v("You will forget to protect one or more of those places—effectively breaking all code\nthat modifies that shared data.")]),e._v(" "),n("li",[e._v("There will be duplication of effort required to make sure everything is effectively\nguarded (violation of DRY^7 ).")]),e._v(" "),n("li",[e._v("It will be difficult to determine the source of failures, which are already hard enough\nto find.")])]),e._v(" "),n("p",[n("strong",[e._v("Recommendation")]),e._v(" : "),n("em",[e._v("Take data encapsulation to heart; severely limit the access of any\ndata that may be shared.")])]),e._v(" "),n("h3",{attrs:{id:"corollary-use-copies-of-data"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#corollary-use-copies-of-data"}},[e._v("#")]),e._v(" Corollary: Use Copies of Data ...")]),e._v(" "),n("p",[e._v("A good way to avoid shared data is to avoid sharing the data in the first place. In some sit-\nuations it is possible to copy objects and treat them as read-only. In other cases it might be\npossible to copy objects, collect results from multiple threads in these copies and then\nmerge the results in a single thread.")]),e._v(" "),n("ol",{attrs:{start:"5"}},[n("li",[e._v("[PPP]")]),e._v(" "),n("li",[e._v("See “Client/Server Example” on page 317.")]),e._v(" "),n("li",[e._v("[PRAG].")])]),e._v(" "),n("p",[e._v("182 "),n("strong",[e._v("Chapter 13: Concurrency")])]),e._v(" "),n("p",[e._v("If there is an easy way to avoid sharing objects, the resulting code will be far less likely\nto cause problems. You might be concerned about the cost of all the extra object creation. It is\nworth experimenting to find out if this is in fact a problem. However, if using copies of\nobjects allows the code to avoid synchronizing, the savings in avoiding the intrinsic lock will\nlikely make up for the additional creation and garbage collection overhead.")]),e._v(" "),n("h3",{attrs:{id:"corollary-threads-should-be-as-independent-as-possible"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#corollary-threads-should-be-as-independent-as-possible"}},[e._v("#")]),e._v(" Corollary: Threads Should Be as Independent as Possible")]),e._v(" "),n("p",[e._v("Consider writing your threaded code such that each thread exists in its own world, sharing\nno data with any other thread. Each thread processes one client request, with all of its\nrequired data coming from an unshared source and stored as local variables. This makes\neach of those threads behave as if it were the only thread in the world and there were no\nsynchronization requirements.")]),e._v(" "),n("p",[e._v("For example, classes that subclass from HttpServletreceive all of their information\nas parameters passed in to the doGetanddoPostmethods. This makes each Servletact\nas if it has its own machine. So long as the code in the Servletuses only local variables,\nthere is no chance that the Servletwill cause synchronization problems. Of course,\nmost applications using Servletseventually run into shared resources such as database\nconnections.")]),e._v(" "),n("p",[n("strong",[e._v("Recommendation")]),e._v(" : "),n("em",[e._v("Attempt to partition data into independent subsets than can be\noperated on by independent threads, possibly in different processors.")])]),e._v(" "),n("h2",{attrs:{id:"know-your-library"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#know-your-library"}},[e._v("#")]),e._v(" Know Your Library ...")]),e._v(" "),n("p",[e._v("Java 5 offers many improvements for concurrent development over previous versions. There\nare several things to consider when writing threaded code in Java 5:")]),e._v(" "),n("ul",[n("li",[e._v("Use the provided thread-safe collections.")]),e._v(" "),n("li",[e._v("Use the executor framework for executing unrelated tasks.")]),e._v(" "),n("li",[e._v("Use nonblocking solutions when possible.")]),e._v(" "),n("li",[e._v("Several library classes are not thread safe.")])]),e._v(" "),n("h3",{attrs:{id:"thread-safe-collections"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#thread-safe-collections"}},[e._v("#")]),e._v(" Thread-Safe Collections .")]),e._v(" "),n("p",[e._v("When Java was young, Doug Lea wrote the seminal book^8 "),n("em",[e._v("Concurrent Programming in\nJava")]),e._v(". Along with the book he developed several thread-safe collections, which later\nbecame part of the JDK in the java.util.concurrentpackage. The collections in that pack-\nage are safe for multithreaded situations and they perform well. In fact, the")]),e._v(" "),n("ol",{attrs:{start:"8"}},[n("li",[e._v("[Lea99].")])]),e._v(" "),n("p",[n("strong",[e._v("Know Your Execution Models")]),e._v(" 183")]),e._v(" "),n("p",[e._v("ConcurrentHashMapimplementation performs better than HashMapin nearly all situations. It\nalso allows for simultaneous concurrent reads and writes, and it has methods supporting\ncommon composite operations that are otherwise not thread safe. If Java 5 is the deploy-\nment environment, start with ConcurrentHashMap.")]),e._v(" "),n("p",[e._v("There are several other kinds of classes added to support advanced concurrency\ndesign. Here are a few examples:")]),e._v(" "),n("p",[n("strong",[e._v("Recommendation")]),e._v(" : "),n("em",[e._v("Review the classes available to you. In the case of Java, become\nfamiliar with java.util.concurrent, java.util.concurrent.atomic, java.util.concurrent.locks.")])]),e._v(" "),n("h2",{attrs:{id:"know-your-execution-models"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#know-your-execution-models"}},[e._v("#")]),e._v(" Know Your Execution Models ..")]),e._v(" "),n("p",[e._v("There are several different ways to partition behavior in a concurrent application. To dis-\ncuss them we need to understand some basic definitions.")]),e._v(" "),n("p",[e._v("Given these definitions, we can now discuss the various execution models used in\nconcurrent programming.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("ReentrantLock A lock that can be acquired in one method and released in another.\nSemaphore An implementation of the classic semaphore, a lock with a count.\nCountDownLatch A lock that waits for a number of events before releasing all\nthreads waiting on it. This allows all threads to have a fair chance\nof starting at about the same time.\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Bound Resources Resources of a fixed size or number used in a concurrent environ-\nment. Examples include database connections and fixed-size read/\nwrite buffers.\nMutual Exclusion Only one thread can access shared data or a shared resource at a\ntime.\nStarvation One thread or a group of threads is prohibited from proceeding\nfor an excessively long time or forever. For example, always let-\nting fast-running threads through first could starve out longer run-\nning threads if there is no end to the fast-running threads.\nDeadlock Two or more threads waiting for each other to finish. Each thread\nhas a resource that the other thread requires and neither can finish\nuntil it gets the other resource.\nLivelock Threads in lockstep, each trying to do work but finding another\n“in the way.” Due to resonance, threads continue trying to\nmake progress but are unable to for an excessively long time—\nor forever.\n")])])]),n("p",[e._v("184 "),n("strong",[e._v("Chapter 13: Concurrency")])]),e._v(" "),n("h3",{attrs:{id:"producer-consumer-9"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#producer-consumer-9"}},[e._v("#")]),e._v(" Producer-Consumer^9")]),e._v(" "),n("p",[e._v("One or more producer threads create some work and place it in a buffer or queue. One or\nmore consumer threads acquire that work from the queue and complete it. The queue\nbetween the producers and consumers is a "),n("em",[e._v("bound resource")]),e._v(". This means producers must\nwait for free space in the queue before writing and consumers must wait until there is\nsomething in the queue to consume. Coordination between the producers and consumers\nvia the queue involves producers and consumers signaling each other. The producers write\nto the queue and signal that the queue is no longer empty. Consumers read from the queue\nand signal that the queue is no longer full. Both potentially wait to be notified when they\ncan continue.")]),e._v(" "),n("h3",{attrs:{id:"readers-writers-10"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#readers-writers-10"}},[e._v("#")]),e._v(" Readers-Writers^10")]),e._v(" "),n("p",[e._v("When you have a shared resource that primarily serves as a source of information for read-\ners, but which is occasionally updated by writers, throughput is an issue. Emphasizing\nthroughput can cause starvation and the accumulation of stale information. Allowing\nupdates can impact throughput. Coordinating readers so they do not read something a\nwriter is updating and vice versa is a tough balancing act. Writers tend to block many read-\ners for a long period of time, thus causing throughput issues.")]),e._v(" "),n("p",[e._v("The challenge is to balance the needs of both readers and writers to satisfy correct\noperation, provide reasonable throughput and avoiding starvation. A simple strategy\nmakes writers wait until there are no readers before allowing the writer to perform an\nupdate. If there are continuous readers, however, the writers will be starved. On the other\nhand, if there are frequent writers and they are given priority, throughput will suffer. Find-\ning that balance and avoiding concurrent update issues is what the problem addresses.")]),e._v(" "),n("h3",{attrs:{id:"dining-philosophers-11"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dining-philosophers-11"}},[e._v("#")]),e._v(" Dining Philosophers^11")]),e._v(" "),n("p",[e._v("Imagine a number of philosophers sitting around a circular table. A fork is placed to the\nleft of each philosopher. There is a big bowl of spaghetti in the center of the table. The\nphilosophers spend their time thinking unless they get hungry. Once hungry, they pick\nup the forks on either side of them and eat. A philosopher cannot eat unless he is holding\ntwo forks. If the philosopher to his right or left is already using one of the forks he\nneeds, he must wait until that philosopher finishes eating and puts the forks back down.\nOnce a philosopher eats, he puts both his forks back down on the table and waits until he\nis hungry again.")]),e._v(" "),n("p",[e._v("Replace philosophers with threads and forks with resources and this problem is simi-\nlar to many enterprise applications in which processes compete for resources. Unless care-\nfully designed, systems that compete in this way can experience deadlock, livelock,\nthroughput, and efficiency degradation.")]),e._v(" "),n("ol",{attrs:{start:"9"}},[n("li",[n("a",{attrs:{href:"http://en.wikipedia.org/wiki/Producer-consumer",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://en.wikipedia.org/wiki/Producer-consumer"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"http://en.wikipedia.org/wiki/Readers-writers_problem",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://en.wikipedia.org/wiki/Readers-writers_problem"),n("OutboundLink")],1)]),e._v(" "),n("li",[n("a",{attrs:{href:"http://en.wikipedia.org/wiki/Dining_philosophers_problem",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://en.wikipedia.org/wiki/Dining_philosophers_problem"),n("OutboundLink")],1)])]),e._v(" "),n("p",[n("strong",[e._v("Keep Synchronized Sections Small")]),e._v(" 185")]),e._v(" "),n("p",[e._v("Most concurrent problems you will likely encounter will be some variation of these\nthree problems. Study these algorithms and write solutions using them on your own so\nthat when you come across concurrent problems, you’ll be more prepared to solve the\nproblem.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Recommendation : Learn these basic algorithms and understand their solutions.\n")])])]),n("h2",{attrs:{id:"beware-dependencies-between-synchronized-methods"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#beware-dependencies-between-synchronized-methods"}},[e._v("#")]),e._v(" Beware Dependencies Between Synchronized Methods")]),e._v(" "),n("p",[e._v("Dependencies between synchronized methods cause subtle bugs in concurrent code. The\nJava language has the notion of synchronized, which protects an individual method. How-\never, if there is more than one synchronized method on the same shared class, then your\nsystem may be written incorrectly.^12")]),e._v(" "),n("p",[n("strong",[e._v("Recommendation")]),e._v(" : "),n("em",[e._v("Avoid using more than one method on a shared object.")]),e._v("\nThere will be times when you must use more than one method on a shared object.\nWhen this is the case, there are three ways to make the code correct:")]),e._v(" "),n("ul",[n("li",[n("strong",[e._v("Client-Based Locking")]),e._v(" —Have the client lock the server before calling the first\nmethod and make sure the lock’s extent includes code calling the last method.")]),e._v(" "),n("li",[n("strong",[e._v("Server-Based Locking")]),e._v(" —Within the server create a method that locks the server, calls\nall the methods, and then unlocks. Have the client call the new method.")]),e._v(" "),n("li",[n("strong",[e._v("Adapted Server")]),e._v(" —create an intermediary that performs the locking. This is an exam-\nple of server-based locking, where the original server cannot be changed.")])]),e._v(" "),n("h2",{attrs:{id:"keep-synchronized-sections-small"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#keep-synchronized-sections-small"}},[e._v("#")]),e._v(" Keep Synchronized Sections Small ..")]),e._v(" "),n("p",[e._v("Thesynchronizedkeyword introduces a lock. All sections of code guarded by the\nsame lock are guaranteed to have only one thread executing through them at any given\ntime. Locks are expensive because they create delays and add overhead. So we don’t\nwant to litter our code with synchronizedstatements. On the other hand, critical sec-\ntions^13 must be guarded. So we want to design our code with as few critical sections as\npossible.")]),e._v(" "),n("p",[e._v("Some naive programmers try to achieve this by making their critical sections very\nlarge. However, extending synchronization beyond the minimal critical section increases\ncontention and degrades performance.^14")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Recommendation : Keep your synchronized sections as small as possible.\n")])])]),n("ol",{attrs:{start:"12"}},[n("li",[e._v("See “Dependencies Between Methods Can Break Concurrent Code” on page 329.")]),e._v(" "),n("li",[e._v("A critical section is any section of code that must be protected from simultaneous use for the program to be correct.")]),e._v(" "),n("li",[e._v("See “Increasing Throughput” on page 333.")])]),e._v(" "),n("p",[e._v("186 "),n("strong",[e._v("Chapter 13: Concurrency")])]),e._v(" "),n("h2",{attrs:{id:"writing-correct-shut-down-code-is-hard"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#writing-correct-shut-down-code-is-hard"}},[e._v("#")]),e._v(" Writing Correct Shut-Down Code Is Hard .")]),e._v(" "),n("p",[e._v("Writing a system that is meant to stay live and run forever is different from writing some-\nthing that works for awhile and then shuts down gracefully.")]),e._v(" "),n("p",[e._v("Graceful shutdown can be hard to get correct. Common problems involve deadlock,^15\nwith threads waiting for a signal to continue that never comes.")]),e._v(" "),n("p",[e._v("For example, imagine a system with a parent thread that spawns several child threads\nand then waits for them all to finish before it releases its resources and shuts down. What if\none of the spawned threads is deadlocked? The parent will wait forever, and the system\nwill never shut down.")]),e._v(" "),n("p",[e._v("Or consider a similar system that has been "),n("em",[e._v("instructed")]),e._v(" to shut down. The parent tells all\nthe spawned children to abandon their tasks and finish. But what if two of the children\nwere operating as a producer/consumer pair. Suppose the producer receives the signal\nfrom the parent and quickly shuts down. The consumer might have been expecting a mes-\nsage from the producer and be blocked in a state where it cannot receive the shutdown sig-\nnal. It could get stuck waiting for the producer and never finish, preventing the parent from\nfinishing as well.")]),e._v(" "),n("p",[e._v("Situations like this are not at all uncommon. So if you must write concurrent code that\ninvolves shutting down gracefully, expect to spend much of your time getting the shut-\ndown to happen correctly.")]),e._v(" "),n("p",[n("strong",[e._v("Recommendation")]),e._v(" : "),n("em",[e._v("Think about shut-down early and get it working early. It’s going to\ntake longer than you expect. Review existing algorithms because this is probably harder\nthan you think.")])]),e._v(" "),n("h2",{attrs:{id:"testing-threaded-code"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#testing-threaded-code"}},[e._v("#")]),e._v(" Testing Threaded Code .")]),e._v(" "),n("p",[e._v("Proving that code is correct is impractical. Testing does not guarantee correctness. How-\never, good testing can minimize risk. This is all true in a single-threaded solution. As soon\nas there are two or more threads using the same code and working with shared data, things\nget substantially more complex.")]),e._v(" "),n("p",[n("strong",[e._v("Recommendation")]),e._v(" : "),n("em",[e._v("Write tests that have the potential to expose problems and then\nrun them frequently, with different programatic configurations and system configurations\nand load. If tests ever fail, track down the failure. Don’t ignore a failure just because the\ntests pass on a subsequent run.")])]),e._v(" "),n("p",[e._v("That is a whole lot to take into consideration. Here are a few more fine-grained\nrecommendations:")]),e._v(" "),n("ul",[n("li",[e._v("Treat spurious failures as candidate threading issues.")]),e._v(" "),n("li",[e._v("Get your nonthreaded code working first.")])]),e._v(" "),n("ol",{attrs:{start:"15"}},[n("li",[e._v("See “Deadlock” on page 335.")])]),e._v(" "),n("p",[n("strong",[e._v("Testing Threaded Code")]),e._v(" 187")]),e._v(" "),n("ul",[n("li",[e._v("Make your threaded code pluggable.")]),e._v(" "),n("li",[e._v("Make your threaded code tunable.")]),e._v(" "),n("li",[e._v("Run with more threads than processors.")]),e._v(" "),n("li",[e._v("Run on different platforms.")]),e._v(" "),n("li",[e._v("Instrument your code to try and force failures.")])]),e._v(" "),n("h3",{attrs:{id:"treat-spurious-failures-as-candidate-threading-issues"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#treat-spurious-failures-as-candidate-threading-issues"}},[e._v("#")]),e._v(" Treat Spurious Failures as Candidate Threading Issues .")]),e._v(" "),n("p",[e._v("Threaded code causes things to fail that “simply cannot fail.” Most developers do not have\nan intuitive feel for how threading interacts with other code (authors included). Bugs in\nthreaded code might exhibit their symptoms once in a thousand, or a million, executions.\nAttempts to repeat the systems can be frustratingly. This often leads developers to write off\nthe failure as a cosmic ray, a hardware glitch, or some other kind of “one-off.” It is best to\nassume that one-offs do not exist. The longer these “one-offs” are ignored, the more code\nis built on top of a potentially faulty approach.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Recommendation : Do not ignore system failures as one-offs.\n")])])]),n("h3",{attrs:{id:"get-your-nonthreaded-code-working-first"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#get-your-nonthreaded-code-working-first"}},[e._v("#")]),e._v(" Get Your Nonthreaded Code Working First")]),e._v(" "),n("p",[e._v("This may seem obvious, but it doesn’t hurt to reinforce it. Make sure code works outside\nof its use in threads. Generally, this means creating POJOs that are called by your threads.\nThe POJOs are not thread aware, and can therefore be tested outside of the threaded envi-\nronment. The more of your system you can place in such POJOs, the better.")]),e._v(" "),n("p",[n("strong",[e._v("Recommendation")]),e._v(" : "),n("em",[e._v("Do not try to chase down nonthreading bugs and threading bugs\nat the same time. Make sure your code works outside of threads")]),e._v(".")]),e._v(" "),n("h3",{attrs:{id:"make-your-threaded-code-pluggable"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#make-your-threaded-code-pluggable"}},[e._v("#")]),e._v(" Make Your Threaded Code Pluggable")]),e._v(" "),n("p",[e._v("Write the concurrency-supporting code such that it can be run in several configurations:")]),e._v(" "),n("ul",[n("li",[e._v("One thread, several threads, varied as it executes")]),e._v(" "),n("li",[e._v("Threaded code interacts with something that can be both real or a test double.")]),e._v(" "),n("li",[e._v("Execute with test doubles that run quickly, slowly, variable.")]),e._v(" "),n("li",[e._v("Configure tests so they can run for a number of iterations.")])]),e._v(" "),n("p",[n("strong",[e._v("Recommendation")]),e._v(" : "),n("em",[e._v("Make your thread-based code especially pluggable so that you\ncan run it in various configurations.")])]),e._v(" "),n("h3",{attrs:{id:"make-your-threaded-code-tunable"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#make-your-threaded-code-tunable"}},[e._v("#")]),e._v(" Make Your Threaded Code Tunable")]),e._v(" "),n("p",[e._v("Getting the right balance of threads typically requires trial an error. Early on, find ways to\ntime the performance of your system under different configurations. Allow the number of")]),e._v(" "),n("p",[e._v("188 "),n("strong",[e._v("Chapter 13: Concurrency")])]),e._v(" "),n("p",[e._v("threads to be easily tuned. Consider allowing it to change while the system is running.\nConsider allowing self-tuning based on throughput and system utilization.")]),e._v(" "),n("h3",{attrs:{id:"run-with-more-threads-than-processors"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#run-with-more-threads-than-processors"}},[e._v("#")]),e._v(" Run with More Threads Than Processors...")]),e._v(" "),n("p",[e._v("Things happen when the system switches between tasks. To encourage task swapping, run\nwith more threads than processors or cores. The more frequently your tasks swap, the more\nlikely you’ll encounter code that is missing a critical section or causes deadlock.")]),e._v(" "),n("h3",{attrs:{id:"run-on-different-platforms"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#run-on-different-platforms"}},[e._v("#")]),e._v(" Run on Different Platforms")]),e._v(" "),n("p",[e._v("In the middle of 2007 we developed a course on concurrent programming. The course\ndevelopment ensued primarily under OS X. The class was presented using Windows XP\nrunning under a VM. Tests written to demonstrate failure conditions did not fail as fre-\nquently in an XP environment as they did running on OS X.")]),e._v(" "),n("p",[e._v("In all cases the code under test was known to be incorrect. This just reinforced the fact\nthat different operating systems have different threading policies, each of which impacts\nthe code’s execution. Multithreaded code behaves differently in different environments.^16\nYou should run your tests in every potential deployment environment.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Recommendation : Run your threaded code on all target platforms early and often.\n")])])]),n("h3",{attrs:{id:"instrument-your-code-to-try-and-force-failures"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#instrument-your-code-to-try-and-force-failures"}},[e._v("#")]),e._v(" Instrument Your Code to Try and Force Failures")]),e._v(" "),n("p",[e._v("It is normal for flaws in concurrent code to hide. Simple tests often don’t expose them.\nIndeed, they often hide during normal processing. They might show up once every few\nhours, or days, or weeks!")]),e._v(" "),n("p",[e._v("The reason that threading bugs can be infrequent, sporadic, and hard to repeat, is that\nonly a very few pathways out of the many thousands of possible pathways through a vul-\nnerable section actually fail. So the probability that a failing pathway is taken can be star-\ntlingly low. This makes detection and debugging very difficult.")]),e._v(" "),n("p",[e._v("How might you increase your chances of catching such rare occurrences? You can\ninstrument your code and force it to run in different orderings by adding calls to methods\nlike Object.wait(),Object.sleep(),Object.yield() and Object.priority().")]),e._v(" "),n("p",[e._v("Each of these methods can affect the order of execution, thereby increasing the odds\nof detecting a flaw. It’s better when broken code fails as early and as often as possible.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("There are two options for code instrumentation:\n")])])]),n("ul",[n("li",[e._v("Hand-coded")]),e._v(" "),n("li",[e._v("Automated")])]),e._v(" "),n("ol",{attrs:{start:"16"}},[n("li",[e._v("Did you know that the threading model in Java does not guarantee preemptive threading? Modern OS’s support preemptive\nthreading, so you get that “for free.” Even so, it not guaranteed by the JVM.")])]),e._v(" "),n("p",[n("strong",[e._v("Testing Threaded Code")]),e._v(" 189")]),e._v(" "),n("h3",{attrs:{id:"hand-coded"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hand-coded"}},[e._v("#")]),e._v(" Hand-Coded ...")]),e._v(" "),n("p",[e._v("You can insert calls to wait(),sleep(),yield(), and priority()in your code by hand. It\nmight be just the thing to do when you’re testing a particularly thorny piece of code.")]),e._v(" "),n("p",[e._v("Here is an example of doing just that:\npublic synchronized String nextUrlOrNull() {\nif(hasNext()) {\nString url = urlGenerator.next();\nThread.yield(); // inserted for testing.\nupdateHasNext();\nreturn url;\n}\nreturn null;\n}\nThe inserted call to yield()will change the execution pathways taken by the code and\npossibly cause the code to fail where it did not fail before. If the code does break, it was\nnot because you added a call to yield().^17 Rather, your code was broken and this simply\nmade the failure evident.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("There are many problems with this approach:\n")])])]),n("ul",[n("li",[e._v("You have to manually find appropriate places to do this.")]),e._v(" "),n("li",[e._v("How do you know where to put the call and what kind of call to use?")]),e._v(" "),n("li",[e._v("Leaving such code in a production environment unnecessarily slows the code down.")]),e._v(" "),n("li",[e._v("It’s a shotgun approach. You may or may not find flaws. Indeed, the odds aren’t with you.")])]),e._v(" "),n("p",[e._v("What we need is a way to do this during testing but not in production. We also need to\neasily mix up configurations between different runs, which results in increased chances of\nfinding errors in the aggregate.")]),e._v(" "),n("p",[e._v("Clearly, if we divide our system up into POJOs that know nothing of threading and\nclasses that control the threading, it will be easier to find appropriate places to instrument\nthe code. Moreover, we could create many different test jigs that invoke the POJOs under\ndifferent regimes of calls to sleep,yield, and so on.")]),e._v(" "),n("h3",{attrs:{id:"automated"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#automated"}},[e._v("#")]),e._v(" Automated ..")]),e._v(" "),n("p",[e._v("You could use tools like an Aspect-Oriented Framework, CGLIB, or ASM to programmat-\nically instrument your code. For example, you could use a class with a single method:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class ThreadJigglePoint {\npublic static void jiggle() {\n}\n}\n")])])]),n("ol",{attrs:{start:"17"}},[n("li",[e._v("This is not strictly the case. Since the JVM does not guarantee preemptive threading, a particular algorithm might always\nwork on an OS that does not preempt threads. The reverse is also possible but for different reasons.")])]),e._v(" "),n("p",[e._v("190 "),n("strong",[e._v("Chapter 13: Concurrency")])]),e._v(" "),n("p",[e._v("You can add calls to this in various places within your code:\npublic synchronized String nextUrlOrNull() {\nif(hasNext()) {\nThreadJiglePoint.jiggle();\nString url = urlGenerator.next();\nThreadJiglePoint.jiggle();\nupdateHasNext();\nThreadJiglePoint.jiggle();\nreturn url;\n}\nreturn null;\n}\nNow you use a simple aspect that randomly selects among doing nothing, sleeping, or\nyielding.")]),e._v(" "),n("p",[e._v("Or imagine that the ThreadJigglePointclass has two implementations. The first imple-\nmentsjiggleto do nothing and is used in production. The second generates a random\nnumber to choose between sleeping, yielding, or just falling through. If you run your tests\na thousand times with random jiggling, you may root out some flaws. If the tests pass, at\nleast you can say you’ve done due diligence. Though a bit simplistic, this could be a rea-\nsonable option in lieu of a more sophisticated tool.")]),e._v(" "),n("p",[e._v("There is a tool called ConTest,^18 developed by IBM that does something similar, but it\ndoes so with quite a bit more sophistication.")]),e._v(" "),n("p",[e._v("The point is to jiggle the code so that threads run in different orderings at different\ntimes. The combination of well-written tests and jiggling can dramatically increase the\nchance finding errors.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Recommendation : Use jiggling strategies to ferret out errors.\n")])])]),n("h2",{attrs:{id:"conclusion"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[e._v("#")]),e._v(" Conclusion ..")]),e._v(" "),n("p",[e._v("Concurrent code is difficult to get right. Code that is simple to follow can become night-\nmarish when multiple threads and shared data get into the mix. If you are faced with writ-\ning concurrent code, you need to write clean code with rigor or else face subtle and\ninfrequent failures.")]),e._v(" "),n("p",[e._v("First and foremost, follow the Single Responsibility Principle. Break your system into\nPOJOs that separate thread-aware code from thread-ignorant code. Make sure when you\nare testing your thread-aware code, you are only testing it and nothing else. This suggests\nthat your thread-aware code should be small and focused.")]),e._v(" "),n("p",[e._v("Know the possible sources of concurrency issues: multiple threads operating on\nshared data, or using a common resource pool. Boundary cases, such as shutting down\ncleanly or finishing the iteration of a loop, can be especially thorny.")]),e._v(" "),n("ol",{attrs:{start:"18"}},[n("li",[n("a",{attrs:{href:"http://www.alphaworks.ibm.com/tech/contest",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.alphaworks.ibm.com/tech/contest"),n("OutboundLink")],1)])]),e._v(" "),n("p",[n("strong",[e._v("Bibliography")]),e._v(" 191")]),e._v(" "),n("p",[e._v("Learn your library and know the fundamental algorithms. Understand how some of\nthe features offered by the library support solving problems similar to the fundamental\nalgorithms.")]),e._v(" "),n("p",[e._v("Learn how to find regions of code that must be locked and lock them. Do not lock\nregions of code that do not need to be locked. Avoid calling one locked section from\nanother. This requires a deep understanding of whether something is or is not shared. Keep\nthe amount of shared objects and the scope of the sharing as narrow as possible. Change\ndesigns of the objects with shared data to accommodate clients rather than forcing clients\nto manage shared state.")]),e._v(" "),n("p",[e._v("Issues will crop up. The ones that do not crop up early are often written off as a one-\ntime occurrence. These so-called one-offs typically only happen under load or at seem-\ningly random times. Therefore, you need to be able to run your thread-related code in\nmany configurations on many platforms repeatedly and continuously. Testability, which\ncomes naturally from following the Three Laws of TDD, implies some level of plug-ability,\nwhich offers the support necessary to run code in a wider range of configurations.")]),e._v(" "),n("p",[e._v("You will greatly improve your chances of finding erroneous code if you take the time\nto instrument your code. You can either do so by hand or using some kind of automated\ntechnology. Invest in this early. You want to be running your thread-based code as long as\npossible before you put it into production.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("If you take a clean approach, your chances of getting it right increase drastically.\n")])])]),n("h2",{attrs:{id:"bibliography"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bibliography"}},[e._v("#")]),e._v(" Bibliography ...")]),e._v(" "),n("p",[n("strong",[e._v("[Lea99]:")]),e._v(" "),n("em",[e._v("Concurrent Programming in Java: Design Principles and Patterns")]),e._v(" , 2d. ed.,\nDoug Lea, Prentice Hall, 1999.")]),e._v(" "),n("p",[n("strong",[e._v("[PPP]:")]),e._v(" "),n("em",[e._v("Agile Software Development: Principles, Patterns, and Practices")]),e._v(" , Robert C. Martin,\nPrentice Hall, 2002.")]),e._v(" "),n("p",[n("strong",[e._v("[PRAG]:")]),e._v(" "),n("em",[e._v("The Pragmatic Programmer")]),e._v(" , Andrew Hunt, Dave Thomas, Addison-Wesley,\n2000.")])])}),[],!1,null,null,null);t.default=r.exports}}]);