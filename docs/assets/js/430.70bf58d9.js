(window.webpackJsonp=window.webpackJsonp||[]).push([[430],{1592:function(e,n,t){"use strict";t.r(n);var o=t(7),a=Object(o.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"_17-consistency"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-consistency"}},[e._v("#")]),e._v(" 17. Consistency")]),e._v(" "),t("p",[e._v("Consistency is a powerful tool for reducing the complexity of a system and\nmaking its behavior more obvious. If a system is consistent, it means that\nsimilar things are done in similar ways, and dissimilar things are done in\ndifferent ways. Consistency creates cognitive leverage: once you have\nlearned how something is done in one place, you can use that knowledge to\nimmediately understand other places that use the same approach. If a\nsystem is not implemented in a consistent fashion, developers must learn\nabout each situation separately. This will take more time.")]),e._v(" "),t("p",[e._v("Consistency reduces mistakes. If a system is not consistent, two\nsituations may appear the same when in fact they are different. A\ndeveloper may see a pattern that looks familiar and make incorrect\nassumptions based on previous encounters with that pattern. On the other\nhand, if the system is consistent, assumptions made based on familiar-\nlooking situations will be safe. Consistency allows developers to work\nmore quickly with fewer mistakes.")]),e._v(" "),t("h2",{attrs:{id:"_17-1-examples-of-consistency"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-1-examples-of-consistency"}},[e._v("#")]),e._v(" 17.1  Examples of consistency")]),e._v(" "),t("p",[e._v("Consistency can be applied at many levels in a system; here are a few\nexamples.")]),e._v(" "),t("p",[e._v("Names. Chapter 14 has already discussed the benefits of using names in a\nconsistent way.")]),e._v(" "),t("p",[e._v("Coding style. It is common nowadays for development organizations to\nhave style guides that restrict program structure beyond the rules enforced\nby compilers. Modern style guides address a range of issues, such as\nindentation, curly-brace placement, order of declarations, naming,")]),e._v(" "),t("p",[e._v("commenting, and restrictions on language features considered dangerous.\nStyle guidelines make code easier to read and can reduce some kinds of\nerrors.")]),e._v(" "),t("p",[e._v("Interfaces. An interface with multiple implementations is another\nexample of consistency. Once you understand one implementation of the\ninterface, any other implementation becomes easier to understand because\nyou already know the features it will have to provide.")]),e._v(" "),t("p",[e._v("Design patterns. Design patterns are generally-accepted solutions to\ncertain common problems, such as the model-view-controller approach to\nuser interface design. If you can use an existing design pattern to solve the\nproblem, the implementation will proceed more quickly, it is more likely\nto work, and your code will be more obvious to readers. Design patterns\nare discussed in more detail in Section 19.5.")]),e._v(" "),t("p",[e._v("Invariants. An invariant is a property of a variable or structure that is\nalways true. For example, a data structure storing lines of text might\nenforce an invariant that each line is terminated by a newline character.\nInvariants reduce the number of special cases that must be considered in\ncode and make it easier to reason about the code’s behavior.")]),e._v(" "),t("h2",{attrs:{id:"_17-2-ensuring-consistency"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-2-ensuring-consistency"}},[e._v("#")]),e._v(" 17.2  Ensuring consistency")]),e._v(" "),t("p",[e._v("Consistency is hard to maintain, especially when many people work on a\nproject over a long time. People in one group may not know about\nconventions established in another group. Newcomers don’t know the\nrules, so they unintentionally violate the conventions and create new\nconventions that conflict with existing ones. Here are a few tips for\nestablishing and maintaining consistency:")]),e._v(" "),t("p",[e._v("Document. Create a document that lists the most important overall\nconventions, such as coding style guidelines. Place the document in a spot\nwhere developers are likely to see it, such as a conspicuous place on the\nproject Wiki. Encourage new people joining the group to read the\ndocument, and encourage existing people to review it every once in a\nwhile. Several style guides from various organizations have been\npublished on the Web; consider starting with one of these.")]),e._v(" "),t("p",[e._v("For conventions that are more localized, such as invariants, find an\nappropriate spot in the code to document them. If you don’t write the\nconventions down, it’s unlikely that other people will follow them.")]),e._v(" "),t("p",[e._v("Enforce. Even with good documentation, it’s hard for developers to\nremember all of the conventions. The best way to enforce conventions is to\nwrite a tool that checks for violations, and make sure that code cannot be\ncommitted to the repository unless it passes the checker. Automated\ncheckers work particularly well for low-level syntactic conventions.")]),e._v(" "),t("p",[e._v("One of my recent projects had problems with line termination\ncharacters. Some developers worked on Unix, where lines are terminated\nby newlines; others worked on Windows, where lines are normally\nterminated by a carriage-return followed by a newline. If a developer on\none system made a small edit to a file previously edited on the other\nsystem, the editor would sometimes replace all of the line terminators\nwith ones appropriate for that system. This gave the appearance that every\nline of the file had been modified, which made it hard to track the\nmeaningful changes. We established a convention that files should contain\nnewlines only, but it was hard to ensure that every tool used by every\ndeveloper followed the convention. Every time a new developer joined the\nproject, we would experience a rash of line termination problems while\nthat developer adjusted to the convention.")]),e._v(" "),t("p",[e._v("We eventually solved this problem by writing a short script that was\nexecuted automatically before changes are committed to the source code\nrepository. The script checks all of the files that have been modified and\naborts the commit if any of them contain carriage returns. The script can\nalso be run manually to repair damaged files by replacing carriage-\nreturn/newline sequences with newlines. This instantly eliminated the\nproblems, and it also helped train new developers.")]),e._v(" "),t("p",[e._v("Code reviews provide another opportunity for enforcing conventions\nand for educating new developers about the conventions. The more nit-\npicky that code reviewers are, the more quickly everyone on the team will\nlearn the conventions, and the cleaner the code will be.")]),e._v(" "),t("p",[e._v("When in Rome ... The most important convention of all is that every\ndeveloper should follow the old adage “When in Rome, do as the Romans")]),e._v(" "),t("p",[e._v("do.” When working in a new file, look around to see how the existing code\nis structured. Are all public variables and methods declared before private\nones? Are the methods in alphabetical order? Do variables use “camel\ncase,” as in firstServerName, or “snake case,” as in first_server_name?")]),e._v(" "),t("p",[e._v("When you see anything that looks like it might possibly be a convention,\nfollow it. When making a design decision, ask yourself if it’s likely that a\nsimilar decision was made elsewhere in the project; if so, find an existing\nexample and use the same approach in your new code.")]),e._v(" "),t("p",[e._v("Don’t change existing conventions. Resist the urge to “improve” on\nexisting conventions. Having a “better idea” is not a sufficient excuse to\nintroduce inconsistencies. Your new idea may indeed be better, but the\nvalue of consistency over inconsistency is almost always greater than the\nvalue of one approach over another. Before introducing inconsistent\nbehavior, ask yourself two questions. First, do you have significant new\ninformation justifying your approach that wasn’t available when the old\nconvention was established? Second, is the new approach so much better\nthat it is worth taking the time to update all of the old uses? If your\norganization agrees that the answers to both questions are “yes,” then go\nahead and make the upgrade; when you are done, there should be no sign\nof the old convention. However, you still run the risk that other developers\nwill not know about the new convention, so they may reintroduce the old\napproach in the future. Overall, reconsidering established conventions is\nrarely a good use of developer time.")]),e._v(" "),t("h2",{attrs:{id:"_17-3-taking-it-too-far"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-3-taking-it-too-far"}},[e._v("#")]),e._v(" 17.3  Taking it too far")]),e._v(" "),t("p",[e._v("Consistency means not only that similar things should be done in similar\nways, but that dissimilar things should be done in different ways. If you\nbecome overzealous about consistency and try to force dissimilar things\ninto the same approach, such as by using the same variable name for\nthings that are really different or using an existing design pattern for a task\nthat doesn’t fit the pattern, you’ll create complexity and confusion.\nConsistency only provides benefits when developers have confidence that\n“if it looks like an x, it really is an x.”")]),e._v(" "),t("h2",{attrs:{id:"_17-4-conclusion"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-4-conclusion"}},[e._v("#")]),e._v(" 17.4  Conclusion")]),e._v(" "),t("p",[e._v("Consistency is another example of the investment mindset. It will take a\nbit of extra work to ensure consistency: work to decide on conventions,\nwork to create automated checkers, work to look for similar situations to\nmimic in new code, and work in code reviews to educate the team. The\nreturn on this investment is that your code will be more obvious.\nDevelopers will be able to understand the code’s behavior more quickly\nand accurately, and this will allow them to work faster, with fewer bugs.")])])}),[],!1,null,null,null);n.default=a.exports}}]);