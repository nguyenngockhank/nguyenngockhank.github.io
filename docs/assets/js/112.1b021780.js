(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{1322:function(e,s,t){"use strict";t.r(s);var a=t(7),r=Object(a.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"messaging-events"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#messaging-events"}},[e._v("#")]),e._v(" Messaging / Events")]),e._v(" "),a("TagLinks"),e._v(" "),a("ul",[a("li",[e._v("asynchronous communication")]),e._v(" "),a("li",[e._v("one-to-one communication (queuing model)")]),e._v(" "),a("li",[e._v("one-to-many (Pub/Sub model)")])]),e._v(" "),a("p",[a("img",{attrs:{src:t(504),alt:"Messaging models"}})]),e._v(" "),a("h2",{attrs:{id:"performance-characterization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#performance-characterization"}},[e._v("#")]),e._v(" Performance characterization")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("Scalability")]),e._v(" "),a("p",[e._v("How system is able to handle increases in load without noticeable degradation of latency & availability. Here, load can mean things such as the no. of topics, consumers, producers, messages / sec, ...")])]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("Availability")]),e._v(" "),a("p",[e._v("In a distributed system, a variety of problems can occur at a unit level( servers, disks, network, and so on). The system's availability is a measure of how resilient the system is to these failures so that it is available to end users.")])]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("Latency")]),e._v(" "),a("p",[e._v("how much time it taks for a message to get to a consumer from a producer.")])]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("Throughput")]),e._v(" "),a("p",[e._v("how many messages can be processed / sec by messaging system.")])]),e._v(" "),a("h2",{attrs:{id:"broker-based-messaging"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#broker-based-messaging"}},[e._v("#")]),e._v(" Broker-based messaging")]),e._v(" "),a("ul",[a("li",[e._v("A broker is a component that acts as the intermediary in messaging system.")]),e._v(" "),a("li",[e._v("The clients connect to the broker and not to each other directly\n"),a("ul",[a("li",[a("strong",[e._v("Producers")]),e._v(" connect to the broker & send messages to a specific queue.")]),e._v(" "),a("li",[a("strong",[e._v("Consumers")]),e._v(" connect to the broker & specify queue name from which they want to read messages.")])])])]),e._v(" "),a("h3",{attrs:{id:"broker-responsibilities"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#broker-responsibilities"}},[e._v("#")]),e._v(" Broker responsibilities:")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("Maintaining the mapping of queues, producers, and consumers reliably")]),e._v(": storing the messages in a durable format")]),e._v(" "),a("li",[a("strong",[e._v("Handling message production")]),e._v(": storing messages written by the producers")]),e._v(" "),a("li",[a("strong",[e._v("Handling message consumption")]),e._v(": ensuring that consumers reliably get messages & providing constructs to avoid duplicate messages.")]),e._v(" "),a("li",[a("strong",[e._v("Routing and transformation")]),e._v(": may transform or maintain multiple copies for each mesages to enable various topology models.")])]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("Advantages")]),e._v(" "),a("ul",[a("li",[e._v("There is clear segregation btw connected services.")]),e._v(" "),a("li",[e._v("Producer & consumer lifetimes don't have to overlap.")])])]),e._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[e._v("Disadvantages")]),e._v(" "),a("ul",[a("li",[e._v("The broker can become a bottleneck, where all messages need to squeeze through. This can affect performance")]),e._v(" "),a("li",[e._v("There is not network I/O which is absolutely necessary")])])]),e._v(" "),a("h2",{attrs:{id:"models"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#models"}},[e._v("#")]),e._v(" Models")]),e._v(" "),a("h3",{attrs:{id:"queuing-model"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#queuing-model"}},[e._v("#")]),e._v(" Queuing Model")]),e._v(" "),a("ul",[a("li",[e._v("If more than 1 consumer is registered in the queuing model, each message is delivered to "),a("em",[e._v("only one")]),e._v(" consumer, thereby enabling load-balancing semantics for message consumption & processing.")]),e._v(" "),a("li",[e._v("There are 2 ways in which consumers can get to the messages:\n"),a("ul",[a("li",[a("strong",[e._v("Pull mode")]),e._v(": the messaging client in the consumer periodically polls the broker to check for any new messages.")]),e._v(" "),a("li",[a("strong",[e._v("Push mode")]),e._v(": the consumers register an endpoint and produced messages are sent to the URL using protocols such as HTTPs "),a("code",[e._v("POST")])])])])]),e._v(" "),a("h3",{attrs:{id:"pub-sub-model"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pub-sub-model"}},[e._v("#")]),e._v(" Pub/Sub Model")]),e._v(" "),a("ul",[a("li",[e._v("Each consumer gets a copy of the message.")]),e._v(" "),a("li",[e._v("Messaging systems also provide load balancing semantics with "),a("strong",[e._v("Topics")]),e._v(" using something called "),a("strong",[e._v("virtual topics")])])]),e._v(" "),a("p",[a("em",[e._v("Note")]),e._v(": "),a("a",{attrs:{href:"https://tuhrig.de/queues-vs-topics-vs-virtual-topics-in-activemq/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Read more about virtual topic"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"event-driven-architecture"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#event-driven-architecture"}},[e._v("#")]),e._v(" Event driven architecture")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://i.pinimg.com/564x/68/4b/bc/684bbca2196fb2fdafc5caeb75847b80.jpg",alt:"Event driven architecture"}})]),e._v(" "),a("h2",{attrs:{id:"delivery-semantics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delivery-semantics"}},[e._v("#")]),e._v(" Delivery semantics")]),e._v(" "),a("h3",{attrs:{id:"at-least-once-delivery"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#at-least-once-delivery"}},[e._v("#")]),e._v(" At-least-once delivery")]),e._v(" "),a("p",[e._v("The "),a("strong",[e._v("Broker")]),e._v(" ensures that it will deliver every required message "),a("code",[e._v("at least once")]),e._v(" to the "),a("strong",[e._v("Consumer")]),e._v(". Most of the time, a message will be received only once, but sometimes duplicates might arise.")]),e._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[e._v("NOTICE")]),e._v(" "),a("p",[e._v("To avoid duplicate processing, the "),a("strong",[e._v("Consumer")]),e._v(" would need to deduplicate message on its side.")])]),e._v(" "),a("h3",{attrs:{id:"at-most-once-delivery"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#at-most-once-delivery"}},[e._v("#")]),e._v(" At-most-once delivery")]),e._v(" "),a("p",[e._v("Sometimes it is essential to avoid sending duplicate messages, such as emails - don't want to spam your customer.")]),e._v(" "),a("h3",{attrs:{id:"exactly-once-delivery"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exactly-once-delivery"}},[e._v("#")]),e._v(" Exactly-once delivery")]),e._v(" "),a("p",[e._v("Exactly-once semantics is the most desirable guarantee, but is impossible to guarantee without some sort of cooperation between the broker & the consumer.")]),e._v(" "),a("ul",[a("li",[e._v("If the broker uses "),a("strong",[e._v("acknowledgements")]),e._v(" to producers for publishing message, each message must have "),a("code",[e._v("unique IDs")]),e._v(" for the broker to deduplicate retires.")]),e._v(" "),a("li",[e._v("On consumer side, deduplication can be used to ensure that duplicate message are not processed.")])]),e._v(" "),a("h2",{attrs:{id:"resilience"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resilience"}},[e._v("#")]),e._v(" Resilience")]),e._v(" "),a("p",[e._v("A lot of things can go wrong with models:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("The broker can fail")]),e._v(", which takes away any messages stored on it.\n"),a("ul",[a("li",[e._v("To overcome this eventuality, generally brokers are deployed in a cluster of redundant instances.")]),e._v(" "),a("li",[e._v("Every message is replicated on a set of machines as part of the write commit. If a message is replicated on to "),a("em",[e._v("n")]),e._v(" brokers, that means the system can tolerate failure of *n-*1 instances.")])])]),e._v(" "),a("li",[a("code",[e._v("The producer-to-broker communication can fail")]),e._v(", which causes messages to be losts.\n"),a("ul",[a("li",[e._v("This is generally solved by "),a("strong",[e._v("acknowledgements")])]),e._v(" "),a("li",[e._v("Duplicate messages being produced can be avoided by having a sequence number for messages.")])])]),e._v(" "),a("li",[a("code",[e._v("The consumer-to-broker message communication can fail")]),e._v(", which causes messages to be losts.\n"),a("ul",[a("li",[e._v("Hence, messages should not be deleted from the Broker, unless there is an explicit acknowledgement from the consumer that the message has been processed.")])])])]),e._v(" "),a("h2",{attrs:{id:"order-of-messages"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#order-of-messages"}},[e._v("#")]),e._v(" Order of messages")]),e._v(" "),a("h3",{attrs:{id:"order-in-producing-messages"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#order-in-producing-messages"}},[e._v("#")]),e._v(" Order in producing messages")]),e._v(" "),a("p",[e._v('Example we have "PostCreated" then "PostTitleUpdated", when '),a("code",[e._v("The producer-to-broker communication can fail")]),e._v(", in distributed system the order of message in broker can be wrong.")]),e._v(" "),a("p",[a("strong",[e._v("Solution")]),e._v(":")]),e._v(" "),a("ul",[a("li",[e._v("Use a "),a("strong",[e._v("UndispatchedEvent")]),e._v(" with a schedule sender")]),e._v(" "),a("li",[e._v("After publish successfully, sender will remove rows in table")]),e._v(" "),a("li",[e._v("Can send multiple events at a same time as long as aggregate_id different")])]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Field")]),e._v(" "),a("th",[e._v("Desc")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("event_id")]),e._v(" "),a("td",[e._v("PK - as a deduplicate id in broker")])]),e._v(" "),a("tr",[a("td",[e._v("aggregate_id")]),e._v(" "),a("td",[e._v("root of aggregate, different aggregate_id can be sent in parallelly")])]),e._v(" "),a("tr",[a("td",[e._v("created_at")]),e._v(" "),a("td",[e._v("timestamp (use this field to make sure the order)")])]),e._v(" "),a("tr",[a("td",[e._v("event_payload")]),e._v(" "),a("td",[e._v("body of event")])])])]),e._v(" "),a("p",[e._v("See more:")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://microservices.io/patterns/data/transactional-outbox.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Transactional outbox"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://www.npmjs.com/package/pg-trx-outbox",target:"_blank",rel:"noopener noreferrer"}},[e._v("Node pkg: pg-trx-outbox"),a("OutboundLink")],1)])]),e._v(" "),a("h3",{attrs:{id:"order-in-receiving-messages"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#order-in-receiving-messages"}},[e._v("#")]),e._v(" Order in receiving messages")]),e._v(" "),a("p",[e._v("Solution, routing the relevant messages to a consumer")]),e._v(" "),a("ul",[a("li",[e._v("use the partition key / group id of broker")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://medium.com/event-driven-utopia/understanding-kafka-topic-partitions-ae40f80552e8",target:"_blank",rel:"noopener noreferrer"}},[e._v("Understanding Kafka Topic Partitions"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"brokerless-messaging"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#brokerless-messaging"}},[e._v("#")]),e._v(" Brokerless messaging")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://wiki.zeromq.org/whitepapers:brokerless",target:"_blank",rel:"noopener noreferrer"}},[e._v("Broker vs. Brokerless (zeromq)"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://blog.rabbitmq.com/posts/2010/09/broker-vs-brokerless/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Broker vs. Brokerless (rabbitmq)"),a("OutboundLink")],1)])])],1)}),[],!1,null,null,null);s.default=r.exports},504:function(e,s,t){e.exports=t.p+"assets/img/mess-models.7a5a8b35.png"}}]);