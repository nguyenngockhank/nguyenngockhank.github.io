(window.webpackJsonp=window.webpackJsonp||[]).push([[213],{773:function(e,t,a){"use strict";a.r(t);var s=a(7),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h3",{attrs:{id:"c-h-a-p-t-e-r-f-i-f-t-e-e-n"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-h-a-p-t-e-r-f-i-f-t-e-e-n"}},[e._v("#")]),e._v(" C H A P T E R F I F T E E N")]),e._v(" "),a("p",[a("strong",[e._v("Designing and Implementing")])]),e._v(" "),a("p",[a("strong",[e._v("a “Minute/Hour Counter”")])]),e._v(" "),a("p",[e._v("Let’s take a look at a data structure used in real production code: a “minute/hour counter.”")]),e._v(" "),a("p",[e._v("We’ll take you through the natural thought process an engineer might go through, first trying")]),e._v(" "),a("p",[e._v("to solve this problem and then improving its performance and adding features. Most important,")]),e._v(" "),a("p",[e._v("we’ll also be trying to keep the code easy to read, using principles from throughout this book.")]),e._v(" "),a("p",[e._v("We might take some wrong turns along the way or make other mistakes. See if you can follow")]),e._v(" "),a("p",[e._v("along and catch them.")]),e._v(" "),a("h3",{attrs:{id:"the-problem"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-problem"}},[e._v("#")]),e._v(" The Problem")]),e._v(" "),a("p",[e._v("We need to keep track of how many bytes a web server has transferred over the past minute")]),e._v(" "),a("p",[e._v("and over the past hour. Here’s an illustration of how these totals are maintained:")]),e._v(" "),a("p",[e._v("It’s a fairly straightforward problem, but as you’ll see, solving it efficiently is an interesting")]),e._v(" "),a("p",[e._v("challenge. Let’s start by defining the class interface.")]),e._v(" "),a("h3",{attrs:{id:"defining-the-class-interface"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#defining-the-class-interface"}},[e._v("#")]),e._v(" Defining the Class Interface")]),e._v(" "),a("p",[e._v("Here is our first version of the class interface in C++:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class MinuteHourCounter {\npublic:\n// Add a count\nvoid Count (int num_bytes);\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Return the count over this minute\nint MinuteCount ();\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Return the count over this hour\nint HourCount ();\n};\n")])])]),a("p",[e._v("Before we implement this class, let’s go through the names and comments to see if there’s")]),e._v(" "),a("p",[e._v("anything we want to change.")]),e._v(" "),a("p",[a("strong",[e._v("166")]),e._v(" CHAPTER FIFTEEN")]),e._v(" "),a("p",[a("strong",[e._v("Improving the Names")])]),e._v(" "),a("p",[e._v("The class name MinuteHourCounter is pretty good. It’s very specific, concrete, and easy to say.")]),e._v(" "),a("p",[e._v("Given the class name, the method names MinuteCount() and HourCount() are also reasonable.")]),e._v(" "),a("p",[e._v("You might have called them GetMinuteCount() and GetHourCount(), but this doesn’t help")]),e._v(" "),a("p",[e._v("anything. As we said in Chapter 3, "),a("em",[e._v("Names That Can’t Be Misconstrued")]),e._v(" , “get” implies “lightweight")]),e._v(" "),a("p",[e._v("accessor” to many people. And as you’ll see, the implementation won’t be lightweight, so it’s")]),e._v(" "),a("p",[e._v("best to leave “get” out.")]),e._v(" "),a("p",[e._v("The method name Count() is problematic, though. We asked our coworkers what they thought")]),e._v(" "),a("p",[e._v("Count() would do, and some thought it meant “return the total number of counts over all time.”")]),e._v(" "),a("p",[e._v("The name is a bit counterintuitive (no pun intended). The problem is that Count is both a noun")]),e._v(" "),a("p",[e._v("and a verb and could mean either “I want a count of the number of samples you have seen”")]),e._v(" "),a("p",[e._v("or “I want you to count this sample.”")]),e._v(" "),a("p",[e._v("Here are alternative names to consider in place of Count():")]),e._v(" "),a("ul",[a("li",[e._v("Increment()")]),e._v(" "),a("li",[e._v("Observe()")]),e._v(" "),a("li",[e._v("Record()")]),e._v(" "),a("li",[e._v("Add()")])]),e._v(" "),a("p",[e._v("Increment() is misleading because it implies that there’s a value that only increases. (In our")]),e._v(" "),a("p",[e._v("case, the hour count fluctuates over time.)")]),e._v(" "),a("p",[e._v("Observe() is okay, but a little vague.")]),e._v(" "),a("p",[e._v("Record() also has the noun/verb problem, so that’s no good.")]),e._v(" "),a("p",[e._v("Add() is interesting because it can either mean “add this numerically” or “add to a list of data”—")]),e._v(" "),a("p",[e._v("in our case, it’s a little of both, so that works. So we’ll rename the method to void Add(int")]),e._v(" "),a("p",[e._v("num_bytes).")]),e._v(" "),a("p",[e._v("But the argument name num_bytes is too specific. Yes, our primary use case is for counting bytes,")]),e._v(" "),a("p",[e._v("but MinuteHourCounter doesn’t need to know this. Someone else might use this class to count")]),e._v(" "),a("p",[e._v("queries or database transactions. We could use a more generic name like delta, but the term")]),e._v(" "),a("p",[e._v("delta is often used in places where the value can be negative, which we don’t want. The name")]),e._v(" "),a("p",[e._v("count should work—it’s simple, generic, and implies “nonnegative.” Also, it lets us sneak in the")]),e._v(" "),a("p",[e._v("word “count” in a less ambiguous context.")]),e._v(" "),a("p",[a("strong",[e._v("Improving the Comments")])]),e._v(" "),a("p",[e._v("Here’s the class interface we have so far:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class MinuteHourCounter {\npublic:\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("DESIGNING AND IMPLEMENTING A “MINUTE/HOUR COUNTER” 167\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Add a count\nvoid Add(int count);\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Return the count over this minute\nint MinuteCount();\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Return the count over this hour\nint HourCount();\n};\n")])])]),a("p",[e._v("Let’s go through each of these method comments and improve them. Consider the first one:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Add a count\nvoid Add(int count);\n")])])]),a("p",[e._v("This comment is completely redundant now—it should be either removed or improved. Here’s")]),e._v(" "),a("p",[e._v("an improved version:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Add a new data point (count >= 0).\n// For the next minute, MinuteCount() will be larger by +count.\n// For the next hour, HourCount() will be larger by +count.\nvoid Add(int count);\n")])])]),a("p",[e._v("Now let’s consider the comment for MinuteCount():")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Return the count over this minute\nint MinuteCount();\n")])])]),a("p",[e._v("When we asked our coworkers what this comment meant, there were two conflicting")]),e._v(" "),a("p",[e._v("interpretations:")]),e._v(" "),a("ol",[a("li",[e._v("Return the count during this current clock-minute, such as 12:13 p.m.")]),e._v(" "),a("li",[e._v("Return the count during the past 60 seconds, regardless of clock-minute boundaries.")])]),e._v(" "),a("p",[e._v("The second interpretation is how it actually works. So let’s clear up this confusion with")]),e._v(" "),a("p",[e._v("language that is more precise and detailed:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Return the accumulated count over the past 60 seconds.\nint MinuteCount();\n")])])]),a("p",[e._v("(Similarly, we should improve the comment for HourCount().)")]),e._v(" "),a("p",[e._v("Here is the class definition with all the changes so far, along with a class-level comment:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Track the cumulative counts over the past minute and over the past hour.\n// Useful, for example, to track recent bandwidth usage.\nclass MinuteHourCounter {\n// Add a new data point (count >= 0).\n// For the next minute, MinuteCount() will be larger by +count.\n// For the next hour, HourCount() will be larger by +count.\nvoid Add(int count);\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Return the accumulated count over the past 60 seconds.\nint MinuteCount();\n")])])]),a("p",[a("strong",[e._v("168")]),e._v(" CHAPTER FIFTEEN")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Return the accumulated count over the past 3600 seconds.\nint HourCount();\n};\n")])])]),a("p",[e._v("(For brevity, we’ll leave the comments out of the code listings from now on.)")]),e._v(" "),a("p",[e._v("GETTING AN OUTSIDE PERSPECTIVE")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("You may have noticed that there were already a couple cases where we ran things by our coworkers.\nAsking for an outside perspective is a great way to test if your code is “user-friendly.” Try to be open\nto their first impressions, because other people may come to the same conclusions. And those “other\npeople” may include you in six months.\n")])])]),a("h3",{attrs:{id:"attempt-1-a-naive-solution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#attempt-1-a-naive-solution"}},[e._v("#")]),e._v(" Attempt 1: A Naive Solution")]),e._v(" "),a("p",[e._v("Let’s move on to solving the problem. We’ll start with a straightforward solution: just keep a")]),e._v(" "),a("p",[e._v("list of timestamped “events”:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class MinuteHourCounter {\nstruct Event {\nEvent(int count, time_t time) : count(count), time(time) {}\nint count;\ntime_t time;\n};\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("list<Event> events ;\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public:\nvoid Add(int count) {\nevents .push_back(Event(count, time()));\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("...\n};\n")])])]),a("p",[e._v("We can then count over the most recent events as needed:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class MinuteHourCounter {\n...\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("int MinuteCount () {\nint count = 0;\nconst time_t now_secs = time();\nfor (list<Event>::reverse_iterator i = events .rbegin();\ni != events .rend() && i->time > now_secs - 60; ++i) {\ncount += i->count;\n}\nreturn count;\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("DESIGNING AND IMPLEMENTING A “MINUTE/HOUR COUNTER” 169\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("int HourCount () {\nint count = 0;\nconst time_t now_secs = time();\nfor (list<Event>::reverse_iterator i = events .rbegin();\ni != events .rend() && i->time > now_secs - 3600; ++i) {\ncount += i->count;\n}\nreturn count;\n}\n};\n")])])]),a("p",[a("strong",[e._v("Is the Code Easy to Understand?")])]),e._v(" "),a("p",[e._v("Although this solution is “correct,” there are a couple readability problems:")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("The for loops are a bit of a mouthful.")]),e._v(" Most readers slow down significantly while\nthey’re reading this part of the code (at least they should, if they’re making sure there\naren’t any bugs).")]),e._v(" "),a("li",[a("strong",[e._v("MinuteCount() and HourCount() are almost identical.")]),e._v(" It would make the code smaller if\nthey could share the duplicated code. This detail is especially important because the\nredundant code is relatively complex. (Better to have all the difficult code confined to one\nplace.)")])]),e._v(" "),a("p",[a("strong",[e._v("An Easier-to-Read Version")])]),e._v(" "),a("p",[e._v("The code for MinuteCount() and HourCount() differs by only a single constant ( 60 vs. 3600 ). The")]),e._v(" "),a("p",[e._v("obvious refactoring is to introduce a helper method to handle both cases:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class MinuteHourCounter {\nlist<Event> events;\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("int CountSince (time_t cutoff) {\nint count = 0;\nfor (list<Event>::reverse_iterator rit = events.rbegin();\nrit != events.rend(); ++rit) {\nif (rit->time <= cutoff) {\nbreak;\n}\ncount += rit->count;\n}\nreturn count;\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public:\nvoid Add(int count) {\nevents.push_back(Event(count, time()));\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("int MinuteCount() {\nreturn CountSince (time() - 60);\n")])])]),a("p",[a("strong",[e._v("170")]),e._v(" CHAPTER FIFTEEN")]),e._v(" "),a("h4",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")]),e._v(" }")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("int HourCount() {\nreturn CountSince (time() - 3600);\n}\n};\n")])])]),a("p",[e._v("There are a few things worth pointing out about this new code.")]),e._v(" "),a("p",[e._v("First, notice that CountSince() takes an absolute cutoff parameter, rather than a relative")]),e._v(" "),a("p",[e._v("secs_ago value ( 60 or 3600 ). Either way would have worked, but this way CountSince() has a")]),e._v(" "),a("p",[e._v("slightly easier job to do.")]),e._v(" "),a("p",[e._v("Second, we renamed the iterator from i to rit. The name i is more commonly used for integer")]),e._v(" "),a("p",[e._v("indexes. We contemplated using the name it, which is typical for iterators. But in this case we")]),e._v(" "),a("p",[e._v("have a "),a("em",[e._v("reverse")]),e._v(" iterator, and this fact is crucial to the correctness of the code. By having a variable")]),e._v(" "),a("p",[e._v("name prefixed with r, it adds a comforting symmetry to statements like rit != events.rend().")]),e._v(" "),a("p",[e._v("Finally, we extracted the condition rit->time <= cutoff out of the for loop, and made it a")]),e._v(" "),a("p",[e._v("separate if statement. Why? Because “traditional” for loops of the form for(begin; end;")]),e._v(" "),a("p",[e._v("advance) are easiest to read. The reader can immediately understand it as “go through all the")]),e._v(" "),a("p",[e._v("elements” and doesn’t have to think about it further.")]),e._v(" "),a("p",[a("strong",[e._v("Performance Problems")])]),e._v(" "),a("p",[e._v("Although we’ve improved how the code looks, this design has two serious performance")]),e._v(" "),a("p",[e._v("problems:")]),e._v(" "),a("ol",[a("li",[a("strong",[e._v("It just keeps growing and growing.")]),e._v("\nThe class holds on to all of the events it’s ever seen—it uses an unbounded amount of\nmemory! Ideally, the MinuteHourCounter should automatically delete events that are older\nthan an hour because they’re no longer needed.")]),e._v(" "),a("li",[a("strong",[e._v("MinuteCount() and HourCount() are too slow.")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("The method CountSince() takes O(n) time, where n is the number of data points in the\nrelevant time window. Imagine a high-performance server that called Add() hundreds of\ntimes per second. Every call to HourCount() would have to count through a million data\npoints! Ideally, the MinuteHourCounter should keep separate minute_count and hour_count\nvariables that are kept up date with each call to Add().\n")])])]),a("h3",{attrs:{id:"attempt-2-conveyor-belt-design"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#attempt-2-conveyor-belt-design"}},[e._v("#")]),e._v(" Attempt 2: Conveyor Belt Design")]),e._v(" "),a("p",[e._v("We need a design that solves both of the previous problems:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1.Delete data we no longer need.\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[e._v("Keep precomputed minute_count and hour_count totals up to date.")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("DESIGNING AND IMPLEMENTING A “MINUTE/HOUR COUNTER” 171\n")])])]),a("p",[e._v("Here’s how we’ll do it: we’ll use our list like a conveyor belt. When new data arrives on one")]),e._v(" "),a("p",[e._v("end, we add to our total. And when the data is too old, it “falls off” the other end, and we")]),e._v(" "),a("p",[e._v("subtract from our total.")]),e._v(" "),a("p",[e._v("There are a couple ways we could implement this conveyor belt design. One way is to maintain")]),e._v(" "),a("p",[e._v("two independent lists, one for events in the past minute, one for those in the past hour. When")]),e._v(" "),a("p",[e._v("a new event comes in, add a copy to both lists.")]),e._v(" "),a("p",[e._v("This way is pretty simple, but it’s inefficient because it makes two copies of every event.")]),e._v(" "),a("p",[e._v("Another way is to maintain two lists, where events initially go into the first list (the “last")]),e._v(" "),a("p",[e._v("minute events”), and then this feeds into the second list (the “last hour [but not last minute]")]),e._v(" "),a("p",[e._v("events”).")]),e._v(" "),a("p",[e._v("This “two-stage” conveyor belt design seems more efficient, so let’s implement this one.")]),e._v(" "),a("p",[a("strong",[e._v("Implementing the Two-Stage Conveyor Belt Design")])]),e._v(" "),a("p",[e._v("Let’s begin by listing the members of our class:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class MinuteHourCounter {\nlist<Event> minute_events;\nlist<Event> hour_events; // only contains elements NOT in minute_events\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("int minute_count;\nint hour_count; // counts ALL events over past hour, including past minute\n};\n")])])]),a("p",[e._v("The crux of this conveyor belt design is to be able to “shift” the events as time goes by, so that")]),e._v(" "),a("p",[e._v("events move from minute_events to hour_events, and minute_count and hour_count get updated")]),e._v(" "),a("p",[a("strong",[e._v("172")]),e._v(" CHAPTER FIFTEEN")]),e._v(" "),a("p",[e._v("accordingly. To do this, we’ll create a helper method named ShiftOldEvents(). Once we have")]),e._v(" "),a("p",[e._v("that method, the rest of the class is fairly easy to implement:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("void Add(int count) {\nconst time_t now_secs = time();\nShiftOldEvents (now_secs);\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Feed into the minute list (not into the hour list--that will happen later)\nminute_events.push_back(Event(count, now_secs));\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("minute_count += count;\nhour_count += count;\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("int MinuteCount() {\nShiftOldEvents (time());\nreturn minute_count;\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("int HourCount() {\nShiftOldEvents (time());\nreturn hour_count;\n}\n")])])]),a("p",[e._v("Clearly, we’ve deferred all the dirty work to ShiftOldEvents():")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Find and delete old events, and decrease hour_count and minute_count accordingly.\nvoid ShiftOldEvents(time_t now_secs) {\nconst int minute_ago = now_secs - 60;\nconst int hour_ago = now_secs - 3600;\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Move events more than one minute old from 'minute_events' into 'hour_events'\n// (Events older than one hour will be removed in the second loop.)\nwhile (! minute_events .empty() && minute_events .front().time <= minute_ago) {\nhour_events .push_back( minute_events .front());\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("minute_count -= minute_events .front().count;\nminute_events .pop_front();\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Remove events more than one hour old from 'hour_events'\nwhile (! hour_events .empty() && hour_events .front().time <= hour_ago) {\nhour_count -= hour_events .front().count;\nhour_events .pop_front();\n}\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("DESIGNING AND IMPLEMENTING A “MINUTE/HOUR COUNTER” 173\n")])])]),a("p",[a("strong",[e._v("Are We Done?")])]),e._v(" "),a("p",[e._v("We’ve solved the two performance concerns we mentioned earlier, and our solution works.")]),e._v(" "),a("p",[e._v("For many applications, this solution would be good enough. But there are a number of")]),e._v(" "),a("p",[e._v("deficiencies, too.")]),e._v(" "),a("p",[e._v("First, the design is very inflexible. Suppose we wanted to keep counts over the past 24 hours.")]),e._v(" "),a("p",[e._v("That would require making a lot of changes to the code. And as you probably noticed,")]),e._v(" "),a("p",[e._v("ShiftOldEvents() is a pretty dense function, with subtle interaction between the minute and")]),e._v(" "),a("p",[e._v("hour data.")]),e._v(" "),a("p",[e._v("Second, this class has a pretty big memory footprint. Suppose you had a high-traffic server")]),e._v(" "),a("p",[e._v("calling Add() 100 times per second. Because we hold on to all data over the past hour, this code")]),e._v(" "),a("p",[e._v("would end up requiring about 5MB of memory.")]),e._v(" "),a("p",[e._v("In general, the more frequently Add() is called, the more memory we use. In a production")]),e._v(" "),a("p",[e._v("environment, libraries that use a large, unpredictable amount of memory aren’t good. Ideally,")]),e._v(" "),a("p",[e._v("the MinuteHourCounter would use a fixed amount of memory no matter how often Add() is called.")]),e._v(" "),a("h3",{attrs:{id:"attempt-3-a-time-bucketed-design"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#attempt-3-a-time-bucketed-design"}},[e._v("#")]),e._v(" Attempt 3: A Time-Bucketed Design")]),e._v(" "),a("p",[e._v("You may not have noticed, but both of the previous implementations had a small bug. We used")]),e._v(" "),a("p",[e._v("time_t to store the timestamp, which stores an integral number of seconds. Because of this")]),e._v(" "),a("p",[e._v("rounding, MinuteCount() actually returns somewhere between 59 and 60 seconds worth of data,")]),e._v(" "),a("p",[e._v("depending on when exactly you call it.")]),e._v(" "),a("p",[e._v("For example, if an event happens at time = 0.99 seconds, that time will get rounded to t=0")]),e._v(" "),a("p",[e._v("seconds. And if you call MinuteCount() at time = 60.1 seconds, it will return the total for events")]),e._v(" "),a("p",[e._v("where t=1,2,3,...60. So that first event will be missed, even though it’s technically less than")]),e._v(" "),a("p",[e._v("a minute ago.")]),e._v(" "),a("p",[e._v("On average, MinuteCount() will return 59.5 seconds worth of data. And HourCount() will return")]),e._v(" "),a("p",[e._v("3599.5 seconds worth of data (a negligible error).")]),e._v(" "),a("p",[e._v("We could fix all this by using a time with subsecond granularity. But interestingly, most")]),e._v(" "),a("p",[e._v("applications using a MinuteHourCounter don’t need that level of accuracy in the first place. We")]),e._v(" "),a("p",[e._v("will exploit this fact to design a new MinuteHourCounter that’s much faster and uses less space.")]),e._v(" "),a("p",[e._v("It’s a trade-off of precision for performance that will be well worth it.")]),e._v(" "),a("p",[e._v("The key idea is to "),a("em",[e._v("bucket")]),e._v(" all the events within a small time window together, and summarize")]),e._v(" "),a("p",[e._v("those events with a single total. For instance, the events over the past minute could be inserted")]),e._v(" "),a("p",[e._v("into 60 discrete buckets, each 1 second wide. The events over the past hour could also be")]),e._v(" "),a("p",[e._v("inserted into 60 discrete buckets, each 1 minute wide.")]),e._v(" "),a("p",[a("strong",[e._v("174")]),e._v(" CHAPTER FIFTEEN")]),e._v(" "),a("p",[e._v("Using the buckets as shown, the methods MinuteCount() and HourCount() will be accurate to")]),e._v(" "),a("p",[e._v("1 part per 60, which is reasonable.*")]),e._v(" "),a("p",[e._v("If more precision is needed, more buckets can be used in exchange for a larger memory")]),e._v(" "),a("p",[e._v("footprint. But the important thing is that this design has a fixed, predictable memory usage.")]),e._v(" "),a("p",[a("strong",[e._v("Implementing the Time-Bucketed Design")])]),e._v(" "),a("p",[e._v("Implementing this design with just one class would create a lot of intricate code that’s hard to")]),e._v(" "),a("p",[e._v("wrap your head around. Instead, we’re going to follow our advice from Chapter 11, "),a("em",[e._v("One Task")])]),e._v(" "),a("p",[a("em",[e._v("at a Time")]),e._v(" , and create separate classes to handle the different parts of this problem.")]),e._v(" "),a("p",[e._v("For starters, let’s create a separate class to keep track of the counts for a single time span (like")]),e._v(" "),a("p",[e._v("the last hour). We’ll call it a TrailingBucketCounter. It’s essentially a generic version of")]),e._v(" "),a("p",[e._v("MinuteHourCounter that handles only one time span. Here’s the interface:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// A class that keeps counts for the past N buckets of time.\nclass TrailingBucketCounter {\npublic:\n// Example: TrailingBucketCounter(30, 60) tracks the last 30 minute-buckets of time.\nTrailingBucketCounter (int num_buckets, int secs_per_bucket);\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("void Add (int count, time_t now);\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Return the total count over the last num_buckets worth of time\nint TrailingCount (time_t now);\n};\n")])])]),a("p",[e._v("You might wonder why Add() and TrailingCount() require the current time (time_t now) as an")]),e._v(" "),a("p",[e._v("argument—wouldn’t it be easier if those methods just computed the current time()")]),e._v(" "),a("p",[e._v("themselves?")]),e._v(" "),a("ul",[a("li",[e._v("Similar to the previous solutions, the last bucket will be only half-full on average. With this design, we\ncould remedy the underestimate by keeping 61 buckets instead of 60 and ignoring the current “in-\nprogress” bucket. But this causes the data to be partially “stale.” A better fix is to combine the in-progress\nbucket with a complementary fraction of the oldest bucket to obtain a count that is both unbiased and\nup to date. This implementation is left as an exercise for the reader.")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("DESIGNING AND IMPLEMENTING A “MINUTE/HOUR COUNTER” 175\n")])])]),a("p",[e._v("Although it may seem strange, passing in the current time has a couple benefits. First, it makes")]),e._v(" "),a("p",[e._v("TrailingBucketCounter a “clockless” class, which in general is easier to test and less bug-prone.")]),e._v(" "),a("p",[e._v("Second, it keeps all the calls to time() inside MinuteHourCounter. With time-sensitive systems, it")]),e._v(" "),a("p",[e._v("helps if you can put all the calls to get the time in one place.")]),e._v(" "),a("p",[e._v("Assuming TrailingBucketCounter was already implemented, the MinuteHourCounter is easy to")]),e._v(" "),a("p",[e._v("implement:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class MinuteHourCounter {\nTrailingBucketCounter minute_counts;\nTrailingBucketCounter hour_counts;\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public:\nMinuteHourCounter() :\nminute_counts(/* num_buckets = */ 60, /* secs_per_bucket = */ 1),\nhour_counts( /* num_buckets = */ 60, /* secs_per_bucket = */ 60) {\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("void Add(int count) {\ntime_t now = time();\nminute_counts. Add (count, now);\nhour_counts. Add (count, now);\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("int MinuteCount() {\ntime_t now = time();\nreturn minute_counts. TrailingCount (now);\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("int HourCount() {\ntime_t now = time();\nreturn hour_counts. TrailingCount (now);\n}\n};\n")])])]),a("p",[e._v("This code is much more readable, and also more flexible—if we wanted to increase the number")]),e._v(" "),a("p",[e._v("of buckets (to improve precision but increase memory usage), that would be easy to do.")]),e._v(" "),a("p",[a("strong",[e._v("Implementing TrailingBucketCounter")])]),e._v(" "),a("p",[e._v("Now all that’s left is to implement the TrailingBucketCounter class. Once again, we’re going to")]),e._v(" "),a("p",[e._v("create a helper class to break down this problem further.")]),e._v(" "),a("p",[e._v("We’ll create a data structure called ConveyorQueue whose job is to deal with the underlying")]),e._v(" "),a("p",[e._v("counts and their totals. The TrailingBucketCounter class can focus on the task of moving the")]),e._v(" "),a("p",[e._v("ConveyorQueue according to how much time has elapsed.")]),e._v(" "),a("p",[e._v("Here is the ConveyorQueue interface:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// A queue with a maximum number of slots, where old data "falls off" the end.\nclass ConveyorQueue {\nConveyorQueue (int max_items);\n')])])]),a("p",[a("strong",[e._v("176")]),e._v(" CHAPTER FIFTEEN")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Increment the value at the back of the queue.\nvoid AddToBack (int count);\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Each value in the queue is shifted forward by 'num_shifted'.\n// New items are initialized to 0.\n// Oldest items will be removed so there are <= max_items.\nvoid Shift (int num_shifted);\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Return the total value of all items currently in the queue.\nint TotalSum ();\n};\n")])])]),a("p",[e._v("Assuming this class was implemented, look how easy the TrailingBucketCounter is to")]),e._v(" "),a("p",[e._v("implement:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class TrailingBucketCounter {\nConveyorQueue buckets;\nconst int secs_per_bucket;\ntime_t last_update_time; // the last time Update() was called\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Calculate how many buckets of time have passed and Shift() accordingly.\nvoid Update(time_t now) {\nint current_bucket = now / secs_per_bucket;\nint last_update_bucket = last_update_time / secs_per_bucket;\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("buckets.Shift(current_bucket - last_update_bucket);\nlast_update_time = now;\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public:\nTrailingBucketCounter(int num_buckets, int secs_per_bucket) :\nbuckets(num_buckets) ,\nsecs_per_bucket(secs_per_bucket) {\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("void Add(int count, time_t now) {\nUpdate(now);\nbuckets.AddToBack(count);\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("int TrailingCount(time_t now) {\nUpdate(now);\nreturn buckets.TotalSum();\n}\n};\n")])])]),a("p",[e._v("This breakdown into two classes (TrailingBucketCounter and ConveyorQueue) is another instance")]),e._v(" "),a("p",[e._v("of what we discussed in Chapter 11, "),a("em",[e._v("One Task at a Time")]),e._v(". We could also have done without")]),e._v(" "),a("p",[e._v("ConveyorQueue and implemented everything directly inside TrailingBucketCounter. But this way,")]),e._v(" "),a("p",[e._v("the code is easier to digest.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("DESIGNING AND IMPLEMENTING A “MINUTE/HOUR COUNTER” 177\n")])])]),a("p",[a("strong",[e._v("Implementing ConveyorQueue")])]),e._v(" "),a("p",[e._v("Now all that’s left is to implement the ConveyorQueue class:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// A queue with a maximum number of slots, where old data gets shifted off the end.\nclass ConveyorQueue {\nqueue<int> q;\nint max_items;\nint total_sum; // sum of all items in q\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public:\nConveyorQueue (int max_items) : max_items(max_items), total_sum(0) {\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("int TotalSum () {\nreturn total_sum;\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("void Shift (int num_shifted) {\n// In case too many items shifted, just clear the queue.\nif (num_shifted >= max_items) {\nq = queue<int>(); // clear the queue\ntotal_sum = 0;\nreturn;\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Push all the needed zeros.\nwhile (num_shifted > 0) {\nq.push(0);\nnum_shifted--;\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Let all the excess items fall off.\nwhile (q.size() > max_items) {\ntotal_sum -= q.front();\nq.pop();\n}\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("void AddToBack (int count) {\nif (q.empty()) Shift(1); // Make sure q has at least 1 item.\nq.back() += count;\ntotal_sum += count;\n}\n};\n")])])]),a("p",[e._v("Now we’re done! We have a MinuteHourCounter that’s fast and memory-efficient, plus a more")]),e._v(" "),a("p",[e._v("flexible TrailingBucketCounter that’s easily reusable. For instance, it would be pretty easy to")]),e._v(" "),a("p",[e._v("create a more versatile RecentCounter that can count a wide range of intervals, such as the last")]),e._v(" "),a("p",[e._v("day or last ten minutes.")]),e._v(" "),a("p",[a("strong",[e._v("178")]),e._v(" CHAPTER FIFTEEN")]),e._v(" "),a("h3",{attrs:{id:"comparing-the-three-solutions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparing-the-three-solutions"}},[e._v("#")]),e._v(" Comparing the Three Solutions")]),e._v(" "),a("p",[e._v("Let’s compare the solutions we’ve looked at in this chapter. The following table shows the code")]),e._v(" "),a("p",[e._v("size and performance stats (assuming a high-traffic use case of 100 Add()/sec):")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Solution Lines of code Cost per HourCount() Memory use Error in HourCount()\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Naive solution 33 O(#events-per-hour)\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("(~3.6 million)\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("unbounded 1 part per 3600\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Conveyor belt design 55 O(1) O(#events-per-hour)\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("(~5MB)\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1 part per 3600\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Time-bucketed design\n(60 buckets)\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("98 O(1) O(#buckets)\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("(~500 bytes)\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1 part per 60\n")])])]),a("p",[e._v("Notice that the total amount of code for our final three-class solution is more than for any of")]),e._v(" "),a("p",[e._v("the other attempts. However, the performance is far superior, and the design is more flexible.")]),e._v(" "),a("p",[e._v("Also, each class individually is much easier to read. This is always a positive change: having")]),e._v(" "),a("p",[e._v("100 lines that are all easy to read is better than 50 lines that aren’t.")]),e._v(" "),a("p",[e._v("Sometimes, breaking a problem into multiple classes can introduce interclass complexity (that")]),e._v(" "),a("p",[e._v("a one-class solution wouldn’t have). In this case, though, there’s a simple “linear” chain of use")]),e._v(" "),a("p",[e._v("from one class to the next, and only one of the classes is exposed to end users. Overall, the")]),e._v(" "),a("p",[e._v("benefits of breaking this problem down make this a win.")]),e._v(" "),a("h3",{attrs:{id:"summary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#summary"}},[e._v("#")]),e._v(" Summary")]),e._v(" "),a("p",[e._v("Let’s review the steps we went through to get to the final MinuteHourCounter design. The process")]),e._v(" "),a("p",[e._v("is typical of how other pieces of code evolve.")]),e._v(" "),a("p",[e._v("First, we started by coding a naive solution. This helped us realize two design challenges: speed")]),e._v(" "),a("p",[e._v("and memory use.")]),e._v(" "),a("p",[e._v("Next, we tried a “conveyor belt” design. This design improved the speed and memory use but")]),e._v(" "),a("p",[e._v("still wasn’t good enough for high-performance applications. Also, this design was very")]),e._v(" "),a("p",[e._v("inflexible: adapting the code to handle other time intervals would be a lot of work.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("DESIGNING AND IMPLEMENTING A “MINUTE/HOUR COUNTER” 179\n")])])]),a("p",[e._v("Our final design solved the previous problems by breaking things down into subproblems. Here")]),e._v(" "),a("p",[e._v("are the three classes we created, in bottom-up order, and the subproblem each one solved:")]),e._v(" "),a("p",[e._v("ConveyorQueue")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("A maximum-length queue that can be “shifted” and maintains its total sum\n")])])]),a("p",[e._v("TrailingBucketCounter")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Moves the ConveyorQueue according to how much time has elapsed and maintains the count\nof a single (latest) time interval, with a given precision\n")])])]),a("p",[e._v("MinuteHourCounter")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Simply contains two TrailingBucketCounters, one for the minute count and one for the\nhour count\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);