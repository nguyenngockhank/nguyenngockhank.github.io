(window.webpackJsonp=window.webpackJsonp||[]).push([[241],{809:function(e,t,a){"use strict";a.r(t);var n=a(7),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"_11-systems"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-systems"}},[e._v("#")]),e._v(" 11. Systems")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("by Dr. Kevin Dean Wampler\n")])])]),a("p",[a("em",[e._v("“Complexity kills. It sucks the life out of developers,\nit makes products difficult to plan, build, and test.”")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("—Ray Ozzie, CTO, Microsoft Corporation\n")])])]),a("p",[e._v("154 "),a("strong",[e._v("Chapter 11: Systems")])]),e._v(" "),a("h2",{attrs:{id:"how-would-you-build-a-city"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-would-you-build-a-city"}},[e._v("#")]),e._v(" How Would You Build a City? ..")]),e._v(" "),a("p",[e._v("Could you manage all the details yourself? Probably not. Even managing an existing city\nis too much for one person. Yet, cities work (most of the time). They work because cities\nhave teams of people who manage particular parts of the city, the water systems, power\nsystems, traffic, law enforcement, building codes, and so forth. Some of those people are\nresponsible for the "),a("em",[e._v("big picture")]),e._v(" , while others focus on the details.")]),e._v(" "),a("p",[e._v("Cities also work because they have evolved appropriate levels of abstraction and mod-\nularity that make it possible for individuals and the “components” they manage to work\neffectively, even without understanding the big picture.")]),e._v(" "),a("p",[e._v("Although software teams are often organized like that too, the systems they work on\noften don’t have the same separation of concerns and levels of abstraction. Clean code\nhelps us achieve this at the lower levels of abstraction. In this chapter let us consider how\nto stay clean at higher levels of abstraction, the "),a("em",[e._v("system")]),e._v(" level.")]),e._v(" "),a("h2",{attrs:{id:"separate-constructing-a-system-from-using-it"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#separate-constructing-a-system-from-using-it"}},[e._v("#")]),e._v(" Separate Constructing a System from Using It ..")]),e._v(" "),a("p",[e._v("First, consider that "),a("em",[e._v("construction")]),e._v(" is a very different process from "),a("em",[e._v("use")]),e._v(". As I write this,\nthere is a new hotel under construction that I see out my window in Chicago. Today it is\na bare concrete box with a construction crane and elevator bolted to the outside. The\nbusy people there all wear hard hats and work clothes. In a year or so the hotel will be\nfinished. The crane and elevator will be gone. The building will be clean, encased in\nglass window walls and attractive paint. The people working and staying there will look\na lot different too.")]),e._v(" "),a("p",[a("em",[e._v("Software systems should separate the startup process, when the application objects are\nconstructed and the dependencies are “wired” together, from the runtime logic that takes\nover after startup.")]),e._v("\nThe startup process is a "),a("em",[e._v("concern")]),e._v(" that any application must address. It is the first "),a("em",[e._v("con-\ncern")]),e._v(" that we will examine in this chapter. The "),a("em",[e._v("separation of concerns")]),e._v(" is one of the oldest\nand most important design techniques in our craft.")]),e._v(" "),a("p",[e._v("Unfortunately, most applications don’t separate this concern. The code for the startup\nprocess is ad hoc and it is mixed in with the runtime logic. Here is a typical example:")]),e._v(" "),a("p",[e._v("public Service getService() {\nif (service == null)\nservice = new MyServiceImpl(...); // Good enough default for most cases?\nreturn service;\n}\nThis is the LAZY INITIALIZATION/EVALUATIONidiom, and it has several merits. We\ndon’t incur the overhead of construction unless we actually use the object, and our startup\ntimes can be faster as a result. We also ensure that null is never returned.")]),e._v(" "),a("p",[a("strong",[e._v("Separate Constructing a System from Using It")]),e._v(" 155")]),e._v(" "),a("p",[e._v("However, we now have a hard-coded dependency on MyServiceImpland everything its\nconstructor requires (which I have elided). We can’t compile without resolving these\ndependencies, even if we never actually use an object of this type at runtime!")]),e._v(" "),a("p",[e._v("Testing can be a problem. If MyServiceImplis a heavyweight object, we will need to\nmake sure that an appropriate TEST DOUBLE^1 or MOCK OBJECTgets assigned to the ser-\nvice field before this method is called during unit testing. Because we have construction\nlogic mixed in with normal runtime processing, we should test all execution paths (for\nexample, thenulltest and its block). Having both of these responsibilities means that the\nmethod is doing more than one thing, so we are breaking the "),a("em",[e._v("Single Responsibility Principle")]),e._v("\nin a small way.")]),e._v(" "),a("p",[e._v("Perhaps worst of all, we do not know whether MyServiceImplis the right object in all\ncases. I implied as much in the comment. Why does the class with this method have to\nknow the global context? Can we "),a("em",[e._v("ever")]),e._v(" really know the right object to use here? Is it even\npossible for one type to be right for all possible contexts?")]),e._v(" "),a("p",[e._v("One occurrence of LAZY-INITIALIZATIONisn’t a serious problem, of course. However,\nthere are normally many instances of little setup idioms like this in applications. Hence,\nthe global setup "),a("em",[e._v("strategy")]),e._v(" (if there is one) is "),a("em",[e._v("scattered")]),e._v(" across the application, with little\nmodularity and often significant duplication.")]),e._v(" "),a("p",[e._v("If we are "),a("em",[e._v("diligent")]),e._v(" about building well-formed and robust systems, we should never let\nlittle, "),a("em",[e._v("convenient")]),e._v(" idioms lead to modularity breakdown. The startup process of object con-\nstruction and wiring is no exception. We should modularize this process separately from\nthe normal runtime logic and we should make sure that we have a global, consistent strat-\negy for resolving our major dependencies.")]),e._v(" "),a("h3",{attrs:{id:"separation-of-main"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#separation-of-main"}},[e._v("#")]),e._v(" Separation of Main .")]),e._v(" "),a("p",[e._v("One way to separate construction from use is simply to move all aspects of construction to\nmain, or modules called by main, and to design the rest of the system assuming that all\nobjects have been constructed and wired up appropriately. (See Figure 11-1.)")]),e._v(" "),a("p",[e._v("The flow of control is easy to follow. The mainfunction builds the objects necessary\nfor the system, then passes them to the application, which simply uses them. Notice the\ndirection of the dependency arrows crossing the barrier between mainand the application.\nThey all go one direction, pointing away from main. This means that the application has no\nknowledge of mainor of the construction process. It simply expects that everything has\nbeen built properly.")]),e._v(" "),a("h3",{attrs:{id:"factories"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#factories"}},[e._v("#")]),e._v(" Factories .")]),e._v(" "),a("p",[e._v("Sometimes, of course, we need to make the application responsible for "),a("em",[e._v("when")]),e._v(" an object gets\ncreated. For example, in an order processing system the application must create the")]),e._v(" "),a("ol",[a("li",[e._v("[Mezzaros07].")])]),e._v(" "),a("p",[e._v("156 "),a("strong",[e._v("Chapter 11: Systems")])]),e._v(" "),a("p",[e._v("LineIteminstances to add to an Order. In this case we can use the ABSTRACT FACTORY^2\npattern to give the application control of "),a("em",[e._v("when")]),e._v(" to build the LineItems, but keep the details\nof that construction separate from the application code. (See Figure 11-2.)")]),e._v(" "),a("p",[e._v("Again notice that all the dependencies point from main toward the OrderProcessing\napplication. This means that the application is decoupled from the details of how to\nbuild a LineItem. That capability is held in the LineItemFactoryImplementation, which\nis on the mainside of the line. And yet the application is in complete control of when\ntheLineIteminstances get built and can even provide application-specific constructor\narguments.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Figure 11-1\nSeparating construction in main()\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[e._v("[GOF].")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Figure 11-2\nSeparation construction with factory\n")])])]),a("p",[a("strong",[e._v("Scaling Up")]),e._v(" 157")]),e._v(" "),a("h3",{attrs:{id:"dependency-injection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dependency-injection"}},[e._v("#")]),e._v(" Dependency Injection.")]),e._v(" "),a("p",[e._v("A powerful mechanism for separating construction from use is "),a("em",[e._v("Dependency Injection")]),e._v(" (DI),\nthe application of "),a("em",[e._v("Inversion of Control")]),e._v(" (IoC) to dependency management.^3 Inversion of\nControl moves secondary responsibilities from an object to other objects that are dedicated\nto the purpose, thereby supporting the "),a("em",[e._v("Single Responsibility Principle.")]),e._v(" In the context of\ndependency management, an object should not take responsibility for instantiating depen-\ndencies itself. Instead, it should pass this responsibility to another “authoritative” mecha-\nnism, thereby inverting the control. Because setup is a global concern, this authoritative\nmechanism will usually be either the “main” routine or a special-purpose "),a("em",[e._v("container.")])]),e._v(" "),a("p",[e._v("JNDI lookups are a “partial” implementation of DI, where an object asks a directory\nserver to provide a “service” matching a particular name.")]),e._v(" "),a("p",[e._v("MyService myService = (MyService)(jndiContext.lookup(“NameOfMyService”));\nThe invoking object doesn’t control what kind of object is actually returned (as long it\nimplements the appropriate interface, of course), but the invoking object still actively\nresolves the dependency.")]),e._v(" "),a("p",[e._v("True Dependency Injection goes one step further. The class takes no direct steps to\nresolve its dependencies; it is completely passive. Instead, it provides setter methods or\nconstructor arguments (or both) that are used to "),a("em",[e._v("inject")]),e._v(" the dependencies. During the con-\nstruction process, the DI container instantiates the required objects (usually on demand)\nand uses the constructor arguments or setter methods provided to wire together the depen-\ndencies. Which dependent objects are actually used is specified through a configuration\nfile or programmatically in a special-purpose construction module.")]),e._v(" "),a("p",[e._v("The Spring Framework provides the best known DI container for Java.^4 You define\nwhich objects to wire together in an XML configuration file, then you ask for particular\nobjects by name in Java code. We will look at an example shortly.")]),e._v(" "),a("p",[e._v("But what about the virtues of LAZY-INITIALIZATION? This idiom is still sometimes\nuseful with DI. First, most DI containers won’t construct an object until needed. Second,\nmany of these containers provide mechanisms for invoking factories or for constructing\nproxies, which could be used for LAZY-EVALUATION and similar "),a("em",[e._v("optimizations.")]),e._v("^5")]),e._v(" "),a("h2",{attrs:{id:"scaling-up"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scaling-up"}},[e._v("#")]),e._v(" Scaling Up ..")]),e._v(" "),a("p",[e._v("Cities grow from towns, which grow from settlements. At first the roads are narrow and\npractically nonexistent, then they are paved, then widened over time. Small buildings and")]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[e._v("See, for example, [Fowler].")]),e._v(" "),a("li",[e._v("See [Spring]. There is also a Spring.NET framework.")]),e._v(" "),a("li",[e._v("Don’t forget that lazy instantiation/evaluation is just an optimization and perhaps premature!")])]),e._v(" "),a("p",[e._v("158 "),a("strong",[e._v("Chapter 11: Systems")])]),e._v(" "),a("p",[e._v("empty plots are filled with larger buildings, some of which will eventually be replaced\nwith skyscrapers.")]),e._v(" "),a("p",[e._v("At first there are no services like power, water, sewage, and the Internet (gasp!). These\nservices are also added as the population and building densities increase.")]),e._v(" "),a("p",[e._v("This growth is not without pain. How many times have you driven, bumper to bumper\nthrough a road “improvement” project and asked yourself, “Why didn’t they build it wide\nenough the first time!?”")]),e._v(" "),a("p",[e._v("But it couldn’t have happened any other way. Who can justify the expense of a six-\nlane highway through the middle of a small town that anticipates growth? Who would\n"),a("em",[e._v("want")]),e._v(" such a road through their town?")]),e._v(" "),a("p",[e._v("It is a myth that we can get systems “right the first time.” Instead, we should imple-\nment only today’s "),a("em",[e._v("stories,")]),e._v(" then refactor and expand the system to implement new stories\ntomorrow. This is the essence of iterative and incremental agility. Test-driven develop-\nment, refactoring, and the clean code they produce make this work at the code level.")]),e._v(" "),a("p",[e._v("But what about at the system level? Doesn’t the system architecture require preplan-\nning? Certainly, "),a("em",[e._v("it")]),e._v(" can’t grow incrementally from simple to complex "),a("em",[e._v(",")]),e._v(" can it?")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Software systems are unique compared to physical systems. Their architectures can grow\nincrementally, if we maintain the proper separation of concerns.\n")])])]),a("p",[e._v("The ephemeral nature of software systems makes this possible, as we will see. Let us first\nconsider a counterexample of an architecture that doesn’t separate concerns adequately.")]),e._v(" "),a("p",[e._v("The original EJB1 and EJB2 architectures did not separate concerns appropriately and\nthereby imposed unnecessary barriers to organic growth. Consider an "),a("em",[e._v("Entity Bean")]),e._v(" for a\npersistentBankclass. An entity bean is an in-memory representation of relational data, in\nother words, a table row.")]),e._v(" "),a("p",[e._v("First, you had to define a local (in process) or remote (separate JVM) interface, which\nclients would use. Listing 11-1 shows a possible local interface:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Listing 11-1\nAn EJB2 local interface for a Bank EJB\npackage com.example.banking;\nimport java.util.Collections;\nimport javax.ejb.*;\npublic interface BankLocal extends java.ejb.EJBLocalObject {\nString getStreetAddr1() throws EJBException;\nString getStreetAddr2() throws EJBException;\nString getCity() throws EJBException;\nString getState() throws EJBException;\nString getZipCode() throws EJBException;\nvoid setStreetAddr1(String street1) throws EJBException;\nvoid setStreetAddr2(String street2) throws EJBException;\nvoid setCity(String city) throws EJBException;\nvoid setState(String state) throws EJBException;\n")])])]),a("p",[a("strong",[e._v("Scaling Up")]),e._v(" 159")]),e._v(" "),a("p",[e._v("I have shown several attributes for the Bank’s address and a collection of accounts that\nthe bank owns, each of which would have its data handled by a separate AccountEJB.\nListing 11-2 shows the corresponding implementation class for the Bank bean.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("void setZipCode(String zip) throws EJBException;\nCollection getAccounts() throws EJBException;\nvoid setAccounts(Collection accounts) throws EJBException;\nvoid addAccount(AccountDTO accountDTO) throws EJBException;\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('Listing 11-2\nThe corresponding EJB2 Entity Bean Implementation\npackage com.example.banking;\nimport java.util.Collections;\nimport javax.ejb.*;\npublic abstract class Bank implements javax.ejb.EntityBean {\n// Business logic...\npublic abstract String getStreetAddr1();\npublic abstract String getStreetAddr2();\npublic abstract String getCity();\npublic abstract String getState();\npublic abstract String getZipCode();\npublic abstract void setStreetAddr1(String street1);\npublic abstract void setStreetAddr2(String street2);\npublic abstract void setCity(String city);\npublic abstract void setState(String state);\npublic abstract void setZipCode(String zip);\npublic abstract Collection getAccounts();\npublic abstract void setAccounts(Collection accounts);\npublic void addAccount(AccountDTO accountDTO) {\nInitialContext context = new InitialContext();\nAccountHomeLocal accountHome = context.lookup("AccountHomeLocal");\nAccountLocal account = accountHome.create(accountDTO);\nCollection accounts = getAccounts();\naccounts.add(account);\n}\n// EJB container logic\npublic abstract void setId(Integer id);\npublic abstract Integer getId();\npublic Integer ejbCreate(Integer id) { ... }\npublic void ejbPostCreate(Integer id) { ... }\n// The rest had to be implemented but were usually empty:\npublic void setEntityContext(EntityContext ctx) {}\npublic void unsetEntityContext() {}\npublic void ejbActivate() {}\npublic void ejbPassivate() {}\npublic void ejbLoad() {}\npublic void ejbStore() {}\npublic void ejbRemove() {}\n}\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Listing 11-1 (continued)\nAn EJB2 local interface for a Bank EJB\n")])])]),a("p",[e._v("160 "),a("strong",[e._v("Chapter 11: Systems")])]),e._v(" "),a("p",[e._v("I haven’t shown the corresponding "),a("em",[e._v("LocalHome")]),e._v(" interface, essentially a factory used to\ncreate objects, nor any of the possible Bank finder (query) methods you might add.")]),e._v(" "),a("p",[e._v("Finally, you had to write one or more XML deployment descriptors that specify the\nobject-relational mapping details to a persistence store, the desired transactional behavior,\nsecurity constraints, and so on_._")]),e._v(" "),a("p",[e._v("The business logic is tightly coupled to the EJB2 application “container.” You must\nsubclass container types and you must provide many lifecycle methods that are required\nby the container.")]),e._v(" "),a("p",[e._v("Because of this coupling to the heavyweight container, isolated unit testing is difficult.\nIt is necessary to mock out the container, which is hard, or waste a lot of time deploying\nEJBs and tests to a real server. Reuse outside of the EJB2 architecture is effectively impos-\nsible, due to the tight coupling.")]),e._v(" "),a("p",[e._v("Finally, even object-oriented programming is undermined. One bean cannot inherit\nfrom another bean. Notice the logic for adding a new account. It is common in EJB2 beans\nto define “data transfer objects” (DTOs) that are essentially “structs” with no behavior.\nThis usually leads to redundant types holding essentially the same data, and it requires\nboilerplate code to copy data from one object to another.")]),e._v(" "),a("h3",{attrs:{id:"cross-cutting-concerns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cross-cutting-concerns"}},[e._v("#")]),e._v(" Cross-Cutting Concerns .")]),e._v(" "),a("p",[e._v("The EJB2 architecture comes close to true separation of concerns in some areas. For\nexample, the desired transactional, security, and some of the persistence behaviors are\ndeclared in the deployment descriptors, independently of the source code.")]),e._v(" "),a("p",[e._v("Note that "),a("em",[e._v("concerns")]),e._v(" like persistence tend to cut across the natural object boundaries of\na domain. You want to persist all your objects using generally the same strategy, for exam-\nple "),a("em",[e._v(",")]),e._v(" using a particular DBMS^6 versus flat files, following certain naming conventions for\ntables and columns, using consistent transactional semantics, and so on_._")]),e._v(" "),a("p",[e._v("In principle, you can reason about your persistence strategy in a modular, encapsulated\nway. Yet, in practice, you have to spread essentially the same code that implements the persis-\ntence strategy across many objects. We use the term "),a("em",[e._v("cross-cutting concerns")]),e._v(" for concerns like\nthese. Again, the persistence framework might be modular and our domain logic, in isola-\ntion, might be modular. The problem is the fine-grained "),a("em",[e._v("intersection")]),e._v(" of these domains.")]),e._v(" "),a("p",[e._v("In fact, the way the EJB architecture handled persistence, security, and transactions "),a("em",[e._v(",")]),e._v("\n“anticipated” "),a("em",[e._v("aspect-oriented programming")]),e._v(" (AOP),^7 which is a general-purpose approach\nto restoring modularity for cross-cutting concerns.")]),e._v(" "),a("p",[e._v("In AOP, modular constructs called "),a("em",[e._v("aspects")]),e._v(" specify which points in the system should\nhave their behavior modified in some consistent way to support a particular concern. This\nspecification is done using a succinct declarative or programmatic mechanism.")]),e._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[e._v("Database management system.")]),e._v(" "),a("li",[e._v("See [AOSD] for general information on aspects and [AspectJ]] and [Colyer] for AspectJ-specific information.")])]),e._v(" "),a("p",[a("strong",[e._v("Java Proxies")]),e._v(" 161")]),e._v(" "),a("p",[e._v("Using persistence as an example, you would declare which objects and attributes (or\n"),a("em",[e._v("patterns")]),e._v(" thereof) should be persisted and then delegate the persistence tasks to your persis-\ntence framework. The behavior modifications are made "),a("em",[e._v("noninvasively")]),e._v("^8 to the target code\nby the AOP framework. Let us look at three aspects or aspect-like mechanisms in Java.")]),e._v(" "),a("h2",{attrs:{id:"java-proxies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-proxies"}},[e._v("#")]),e._v(" Java Proxies")]),e._v(" "),a("p",[e._v("Java proxies are suitable for simple situations, such as wrapping method calls in individual\nobjects or classes. However, the dynamic proxies provided in the JDK only work with\ninterfaces. To proxy classes, you have to use a byte-code manipulation library, such as\nCGLIB, ASM, or Javassist.^9")]),e._v(" "),a("p",[e._v("Listing 11-3 shows the skeleton for a JDK proxy to provide persistence support for\nourBankapplication, covering only the methods for getting and setting the list of accounts.")]),e._v(" "),a("ol",{attrs:{start:"8"}},[a("li",[e._v("Meaning no manual editing of the target source code is required.")]),e._v(" "),a("li",[e._v("See [CGLIB], [ASM], and [Javassist].")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Listing 11-3\nJDK Proxy Example\n// Bank.java (suppressing package names...)\nimport java.utils.*;\n// The abstraction of a bank.\npublic interface Bank {\nCollection<Account> getAccounts();\nvoid setAccounts(Collection<Account> accounts);\n}\n// BankImpl.java\nimport java.utils.*;\n// The “Plain Old Java Object” (POJO) implementing the abstraction.\npublic class BankImpl implements Bank {\nprivate List<Account> accounts;\npublic Collection<Account> getAccounts() {\nreturn accounts;\n}\npublic void setAccounts(Collection<Account> accounts) {\nthis.accounts = new ArrayList<Account>();\nfor (Account account: accounts) {\nthis.accounts.add(account);\n}\n}\n}\n// BankProxyHandler.java\nimport java.lang.reflect.*;\nimport java.util.*;\n")])])]),a("p",[e._v("162 "),a("strong",[e._v("Chapter 11: Systems")])]),e._v(" "),a("p",[e._v("We defined an interface Bank, which will be "),a("em",[e._v("wrapped")]),e._v(" by the proxy, and a "),a("em",[e._v("Plain-Old\nJava Object")]),e._v(" (POJO), BankImpl, that implements the business logic. (We will revisit POJOs\nshortly.)")]),e._v(" "),a("p",[e._v("The Proxy API requires an InvocationHandlerobject that it calls to implement any\nBankmethod calls made to the proxy. Our BankProxyHandleruses the Java reflection\nAPI to map the generic method invocations to the corresponding methods in BankImpl,\nand so on.")]),e._v(" "),a("p",[e._v("There is a "),a("em",[e._v("lot")]),e._v(" of code here and it is relatively complicated, even for this simple case.^10\nUsing one of the byte-manipulation libraries is similarly challenging. This code “volume”")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// “InvocationHandler” required by the proxy API.\npublic class BankProxyHandler implements InvocationHandler {\nprivate Bank bank;\npublic BankHandler (Bank bank) {\nthis.bank = bank;\n}\n// Method defined in InvocationHandler\npublic Object invoke(Object proxy, Method method, Object[] args)\nthrows Throwable {\nString methodName = method.getName();\nif (methodName.equals("getAccounts")) {\nbank.setAccounts(getAccountsFromDatabase());\nreturn bank.getAccounts();\n} else if (methodName.equals("setAccounts")) {\nbank.setAccounts((Collection<Account>) args[0]);\nsetAccountsToDatabase(bank.getAccounts());\nreturn null;\n} else {\n...\n}\n}\n// Lots of details here:\nprotected Collection<Account> getAccountsFromDatabase() { ... }\nprotected void setAccountsToDatabase(Collection<Account> accounts) { ... }\n}\n// Somewhere else...\nBank bank = (Bank) Proxy.newProxyInstance(\nBank.class.getClassLoader(),\nnew Class[] { Bank.class },\nnew BankProxyHandler(new BankImpl()));\n')])])]),a("ol",{attrs:{start:"10"}},[a("li",[e._v("For more detailed examples of the Proxy API and examples of its use, see, for example, [Goetz].")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Listing 11-3 (continued)\nJDK Proxy Example\n")])])]),a("p",[a("strong",[e._v("Pure Java AOP Frameworks")]),e._v(" 163")]),e._v(" "),a("p",[e._v("and complexity are two of the drawbacks of proxies. They make it hard to create clean\ncode! Also, proxies don’t provide a mechanism for specifying system-wide execution\n“points” of interest, which is needed for a true AOP solution.^11")]),e._v(" "),a("h2",{attrs:{id:"pure-java-aop-frameworks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pure-java-aop-frameworks"}},[e._v("#")]),e._v(" Pure Java AOP Frameworks .")]),e._v(" "),a("p",[e._v("Fortunately, most of the proxy boilerplate can be handled automatically by tools. Proxies\nare used internally in several Java frameworks, for example, Spring AOP and JBoss AOP,\nto implement aspects in pure Java.^12 In Spring, you write your business logic as "),a("em",[e._v("Plain-Old\nJava Objects")]),e._v(". POJOs are purely focused on their domain. They have no dependencies on\nenterprise frameworks (or any other domains). Hence, they are conceptually simpler and\neasier to test drive. The relative simplicity makes it easier to ensure that you are imple-\nmenting the corresponding user stories correctly and to maintain and evolve the code for\nfuture stories.")]),e._v(" "),a("p",[e._v("You incorporate the required application infrastructure, including cross-cutting con-\ncerns like persistence, transactions, security, caching, failover, and so on, using declara-\ntive configuration files or APIs. In many cases, you are actually specifying Spring or\nJBoss library aspects, where the framework handles the mechanics of using Java proxies\nor byte-code libraries transparently to the user. These declarations drive the dependency\ninjection (DI) container, which instantiates the major objects and wires them together on\ndemand_._")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Listing 11-4 shows a typical fragment of a Spring V2.5 configuration file, app.xml^13 :\n")])])]),a("ol",{attrs:{start:"11"}},[a("li",[e._v("AOP is sometimes confused with techniques used to implement it, such as method interception and “wrapping” through\nproxies. The real value of an AOP system is the ability to specify systemic behaviors in a concise and modular way.")]),e._v(" "),a("li",[e._v("See [Spring] and [JBoss]. “Pure Java” means without the use of AspectJ.")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('Listing 11-4\nSpring 2.X configuration file\n<beans>\n...\n<bean id="appDataSource"\nclass="org.apache.commons.dbcp.BasicDataSource"\ndestroy-method="close"\np:driverClassName="com.mysql.jdbc.Driver"\np:url="jdbc:mysql://localhost:3306/mydb"\np:username="me"/>\n<bean id="bankDataAccessObject"\nclass="com.example.banking.persistence.BankDataAccessObject"\np:dataSource-ref="appDataSource"/>\n<bean id="bank"\n')])])]),a("ol",{attrs:{start:"13"}},[a("li",[e._v("Adapted from "),a("a",{attrs:{href:"http://www.theserverside.com/tt/articles/article.tss?l=IntrotoSpring25",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.theserverside.com/tt/articles/article.tss?l=IntrotoSpring25"),a("OutboundLink")],1)])]),e._v(" "),a("p",[e._v("164 "),a("strong",[e._v("Chapter 11: Systems")])]),e._v(" "),a("p",[e._v("Each “bean” is like one part of a nested “Russian doll,” with a domain object for a\nBankproxied (wrapped) by a data accessor object (DAO), which is itself proxied by a\nJDBC driver data source. (See Figure 11-3.)")]),e._v(" "),a("p",[e._v("The client believes it is invoking getAccounts()on a Bankobject, but it is actually talk-\ning to the outermost of a set of nested DECORATOR^14 objects that extend the basic behavior\nof the Bank POJO. We could add other decorators for transactions, caching, and so forth_._")]),e._v(" "),a("p",[e._v("In the application, a few lines are needed to ask the DI container for the top-level\nobjects in the system, as specified in the XML file.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('XmlBeanFactory bf =\nnew XmlBeanFactory(new ClassPathResource("app.xml", getClass()));\nBank bank = (Bank) bf.getBean("bank");\n')])])]),a("p",[e._v("Because so few lines of Spring-specific Java code are required, "),a("em",[e._v("the application is almost\ncompletely decoupled from Spring")]),e._v(" , eliminating all the tight-coupling problems of systems\nlike EJB2.")]),e._v(" "),a("p",[e._v("Although XML can be verbose and hard to read,^15 the “policy” specified in these con-\nfiguration files is simpler than the complicated proxy and aspect logic that is hidden from\nview and created automatically. This type of architecture is so compelling that frame-\nworks like Spring led to a complete overhaul of the EJB standard for version 3. EJB3")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('class="com.example.banking.model.Bank"\np:dataAccessObject-ref="bankDataAccessObject"/>\n...\n</beans>\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Figure 11-3\nThe “Russian doll” of decorators\n")])])]),a("ol",{attrs:{start:"14"}},[a("li",[e._v("[GOF].")]),e._v(" "),a("li",[e._v("The example can be simplified using mechanisms that exploit "),a("em",[e._v("convention over configuration")]),e._v(" and Java 5 annotations to reduce\nthe amount of explicit “wiring” logic required.")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Listing 11-4 (continued)\nSpring 2.X configuration file\n")])])]),a("p",[a("strong",[e._v("Pure Java AOP Frameworks")]),e._v(" 165")]),e._v(" "),a("p",[e._v("largely follows the Spring model of declaratively supporting cross-cutting concerns using\nXML configuration files and/or Java 5 annotations.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Listing 11-5 shows our Bank object rewritten in EJB3^16.\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('Listing 11-5\nAn EBJ3 Bank EJB\npackage com.example.banking.model;\nimport javax.persistence.*;\nimport java.util.ArrayList;\nimport java.util.Collection;\n@Entity\n@Table(name = "BANKS")\npublic class Bank implements java.io.Serializable {\n@Id @GeneratedValue(strategy=GenerationType.AUTO)\nprivate int id;\n@Embeddable // An object “inlined” in Bank’s DB row\npublic class Address {\nprotected String streetAddr1;\nprotected String streetAddr2;\nprotected String city;\nprotected String state;\nprotected String zipCode;\n}\n@Embedded\nprivate Address address;\n@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER,\nmappedBy="bank")\nprivate Collection<Account> accounts = new ArrayList<Account>();\npublic int getId() {\nreturn id;\n}\npublic void setId(int id) {\nthis.id = id;\n}\npublic void addAccount(Account account) {\naccount.setBank(this);\naccounts.add(account);\n}\npublic Collection<Account> getAccounts() {\nreturn accounts;\n}\n')])])]),a("ol",{attrs:{start:"16"}},[a("li",[e._v("Adapted from "),a("a",{attrs:{href:"http://www.onjava.com/pub/a/onjava/2006/05/17/standardizing-with-ejb3-java-persistence-api.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.onjava.com/pub/a/onjava/2006/05/17/standardizing-with-ejb3-java-persistence-api.html"),a("OutboundLink")],1)])]),e._v(" "),a("p",[e._v("166 "),a("strong",[e._v("Chapter 11: Systems")])]),e._v(" "),a("p",[e._v("This code is much cleaner than the original EJB2 code. Some of the entity details are\nstill here, contained in the annotations. However, because none of that information is out-\nside of the annotations, the code is clean, clear, and hence easy to test drive, maintain, and\nso on.")]),e._v(" "),a("p",[e._v("Some or all of the persistence information in the annotations can be moved to XML\ndeployment descriptors, if desired, leaving a truly pure POJO. If the persistence mapping\ndetails won’t change frequently, many teams may choose to keep the annotations, but with\nfar fewer harmful drawbacks compared to the EJB2 invasiveness.")]),e._v(" "),a("h2",{attrs:{id:"aspectj-aspects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aspectj-aspects"}},[e._v("#")]),e._v(" AspectJ Aspects .")]),e._v(" "),a("p",[e._v("Finally, the most full-featured tool for separating concerns through aspects is the AspectJ\nlanguage,^17 an extension of Java that provides “first-class” support for aspects as modular-\nity constructs. The pure Java approaches provided by Spring AOP and JBoss AOP are suf-\nficient for 80–90 percent of the cases where aspects are most useful. However, AspectJ\nprovides a very rich and powerful tool set for separating concerns. The drawback of\nAspectJ is the need to adopt several new tools and to learn new language constructs and\nusage idioms.")]),e._v(" "),a("p",[e._v("The adoption issues have been partially mitigated by a recently introduced “annota-\ntion form” of AspectJ, where Java 5 annotations are used to define aspects using pure Java\ncode. Also, the Spring Framework has a number of features that make incorporation of\nannotation-based aspects much easier for a team with limited AspectJ experience.")]),e._v(" "),a("p",[e._v("A full discussion of AspectJ is beyond the scope of this book. See [AspectJ], [Colyer],\nand [Spring] for more information.")]),e._v(" "),a("h2",{attrs:{id:"test-drive-the-system-architecture"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#test-drive-the-system-architecture"}},[e._v("#")]),e._v(" Test Drive the System Architecture ..")]),e._v(" "),a("p",[e._v("The power of separating concerns through aspect-like approaches can’t be overstated. If\nyou can write your application’s domain logic using POJOs, decoupled from any architec-\nture concerns at the code level, then it is possible to truly "),a("em",[e._v("test drive")]),e._v(" your architecture. You\ncan evolve it from simple to sophisticated, as needed, by adopting new technologies on")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public void setAccounts(Collection<Account> accounts) {\nthis.accounts = accounts;\n}\n}\n")])])]),a("ol",{attrs:{start:"17"}},[a("li",[e._v("See [AspectJ] and [Colyer].")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Listing 11-5 (continued)\nAn EBJ3 Bank EJB\n")])])]),a("p",[a("strong",[e._v("Optimize Decision Making")]),e._v(" 167")]),e._v(" "),a("p",[e._v("demand. It is not necessary to do a "),a("em",[e._v("Big Design Up Front")]),e._v("^18 (BDUF). In fact, BDUF is even\nharmful because it inhibits adapting to change, due to the psychological resistance to dis-\ncarding prior effort and because of the way architecture choices influence subsequent\nthinking about the design.")]),e._v(" "),a("p",[e._v("Building architects have to do BDUF because it is not feasible to make radical archi-\ntectural changes to a large physical structure once construction is well underway.^19\nAlthough software has its own "),a("em",[e._v("physics")]),e._v(" ,^20 it is economically feasible to make radical\nchange, "),a("em",[e._v("if")]),e._v(" the structure of the software separates its concerns effectively.")]),e._v(" "),a("p",[e._v("This means we can start a software project with a “naively simple” but nicely decou-\npled architecture, delivering working user stories quickly, then adding more infrastructure\nas we scale up. Some of the world’s largest Web sites have achieved very high availability\nand performance, using sophisticated data caching, security, virtualization, and so forth,\nall done efficiently and flexibly because the minimally coupled designs are appropriately\n"),a("em",[e._v("simple")]),e._v(" at each level of abstraction and scope.")]),e._v(" "),a("p",[e._v("Of course, this does not mean that we go into a project “rudderless.” We have some\nexpectations of the general scope, goals, and schedule for the project, as well as the gen-\neral structure of the resulting system. However, we must maintain the ability to change\ncourse in response to evolving circumstances.")]),e._v(" "),a("p",[e._v("The early EJB architecture is but one of many well-known APIs that are over-engi-\nneered and that compromise separation of concerns. Even well-designed APIs can be over-\nkill when they aren’t really needed. A good API should largely "),a("em",[e._v("disappear")]),e._v(" from view most\nof the time, so the team expends the majority of its creative efforts focused on the user sto-\nries being implemented. If not, then the architectural constraints will inhibit the efficient\ndelivery of optimal value to the customer.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("To recap this long discussion,\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("An optimal system architecture consists of modularized domains of concern, each of which\nis implemented with Plain Old Java (or other) Objects. The different domains are inte-\ngrated together with minimally invasive Aspects or Aspect-like tools. This architecture can\nbe test-driven, just like the code.\n")])])]),a("h2",{attrs:{id:"optimize-decision-making"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#optimize-decision-making"}},[e._v("#")]),e._v(" Optimize Decision Making ...")]),e._v(" "),a("p",[e._v("Modularity and separation of concerns make decentralized management and decision\nmaking possible. In a sufficiently large system, whether it is a city or a software project, no\none person can make all the decisions.")]),e._v(" "),a("ol",{attrs:{start:"18"}},[a("li",[e._v("Not to be confused with the good practice of up-front design, BDUF is the practice of designing "),a("em",[e._v("everything")]),e._v(" up front before\nimplementing anything at all.")]),e._v(" "),a("li",[e._v("There is still a significant amount of iterative exploration and discussion of details, even after construction starts.")]),e._v(" "),a("li",[e._v("The term "),a("em",[e._v("software physics")]),e._v(" was first used by [Kolence].")])]),e._v(" "),a("p",[e._v("168 "),a("strong",[e._v("Chapter 11: Systems")])]),e._v(" "),a("p",[e._v("We all know it is best to give responsibilities to the most qualified persons. We often\nforget that it is also best to "),a("em",[e._v("postpone decisions until the last possible moment")]),e._v(". This isn’t\nlazy or irresponsible; it lets us make informed choices with the best possible information.\nA premature decision is a decision made with suboptimal knowledge. We will have that\nmuch less customer feedback, mental reflection on the project, and experience with our\nimplementation choices if we decide too soon.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("The agility provided by a POJO system with modularized concerns allows us to make opti-\nmal, just-in-time decisions, based on the most recent knowledge. The complexity of these\ndecisions is also reduced.\n")])])]),a("h2",{attrs:{id:"use-standards-wisely-when-they-add-demonstrable-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use-standards-wisely-when-they-add-demonstrable-value"}},[e._v("#")]),e._v(" Use Standards Wisely, When They Add Demonstrable Value .")]),e._v(" "),a("p",[e._v("Building construction is a marvel to watch because of the pace at which new buildings are\nbuilt (even in the dead of winter) and because of the extraordinary designs that are possi-\nble with today’s technology. Construction is a mature industry with highly optimized parts,\nmethods, and standards that have evolved under pressure for centuries.")]),e._v(" "),a("p",[e._v("Many teams used the EJB2 architecture because it was a standard, even when lighter-\nweight and more straightforward designs would have been sufficient. I have seen teams\nbecome obsessed with various "),a("em",[e._v("strongly hyped")]),e._v(" standards and lose focus on implementing\nvalue for their customers.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Standards make it easier to reuse ideas and components, recruit people with relevant expe-\nrience, encapsulate good ideas, and wire components together. However, the process of\ncreating standards can sometimes take too long for industry to wait, and some standards\nlose touch with the real needs of the adopters they are intended to serve.\n")])])]),a("h2",{attrs:{id:"systems-need-domain-specific-languages"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#systems-need-domain-specific-languages"}},[e._v("#")]),e._v(" Systems Need Domain-Specific Languages .")]),e._v(" "),a("p",[e._v("Building construction, like most domains, has developed a rich language with a vocabu-\nlary, idioms, and patterns^21 that convey essential information clearly and concisely. In soft-\nware, there has been renewed interest recently in creating "),a("em",[e._v("Domain-Specific Languages")]),e._v("\n(DSLs),^22 which are separate, small scripting languages or APIs in standard languages that\npermit code to be written so that it reads like a structured form of prose that a domain\nexpert might write.")]),e._v(" "),a("p",[e._v("A good DSL minimizes the “communication gap” between a domain concept and the\ncode that implements it, just as agile practices optimize the communications within a\nteam and with the project’s stakeholders. If you are implementing domain logic in the")]),e._v(" "),a("ol",{attrs:{start:"21"}},[a("li",[e._v("The work of [Alexander] has been particularly influential on the software community.")]),e._v(" "),a("li",[e._v("See, for example, [DSL]. [JMock] is a good example of a Java API that creates a DSL.")])]),e._v(" "),a("p",[a("strong",[e._v("Bibliography")]),e._v(" 169")]),e._v(" "),a("p",[e._v("same language that a domain expert uses, there is less risk that you will incorrectly trans-\nlate the domain into the implementation.")]),e._v(" "),a("p",[e._v("DSLs, when used effectively, raise the abstraction level above code idioms and design\npatterns. They allow the developer to reveal the intent of the code at the appropriate level\nof abstraction.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Domain-Specific Languages allow all levels of abstraction and all domains in the applica-\ntion to be expressed as POJOs, from high-level policy to low-level details.\n")])])]),a("h2",{attrs:{id:"conclusion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[e._v("#")]),e._v(" Conclusion ..")]),e._v(" "),a("p",[e._v("Systems must be clean too. An invasive architecture overwhelms the domain logic and\nimpacts agility. When the domain logic is obscured, quality suffers because bugs find it\neasier to hide and stories become harder to implement. If agility is compromised, produc-\ntivity suffers and the benefits of TDD are lost.")]),e._v(" "),a("p",[e._v("At all levels of abstraction, the intent should be clear. This will only happen if you\nwrite POJOs and you use aspect-like mechanisms to incorporate other implementation\nconcerns noninvasively.")]),e._v(" "),a("p",[e._v("Whether you are designing systems or individual modules, never forget to "),a("em",[e._v("use the\nsimplest thing that can possibly work")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"bibliography"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bibliography"}},[e._v("#")]),e._v(" Bibliography ...")]),e._v(" "),a("p",[a("strong",[e._v("[Alexander]:")]),e._v(" Christopher Alexander, "),a("em",[e._v("A Timeless Way of Building,")]),e._v(" Oxford University\nPress, New York, 1979.")]),e._v(" "),a("p",[a("strong",[e._v("[AOSD]:")]),e._v(" Aspect-Oriented Software Development port, "),a("a",{attrs:{href:"http://aosd.net",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://aosd.net"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("strong",[e._v("[ASM]:")]),e._v(" ASM Home Page, "),a("a",{attrs:{href:"http://asm.objectweb.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://asm.objectweb.org/"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("strong",[e._v("[AspectJ]:")]),e._v(" "),a("a",{attrs:{href:"http://eclipse.org/aspectj",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://eclipse.org/aspectj"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("strong",[e._v("[CGLIB]:")]),e._v(" Code Generation Library, "),a("a",{attrs:{href:"http://cglib.sourceforge.net/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://cglib.sourceforge.net/"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("strong",[e._v("[Colyer]:")]),e._v(" Adrian Colyer, Andy Clement, George Hurley, Mathew Webster, "),a("em",[e._v("Eclipse\nAspectJ,")]),e._v(" Person Education, Inc., Upper Saddle River, NJ, 2005.")]),e._v(" "),a("p",[a("strong",[e._v("[DSL]:")]),e._v(" Domain-specific programming language, "),a("a",{attrs:{href:"http://en.wikipedia.org/wiki/Domain-",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://en.wikipedia.org/wiki/Domain-"),a("OutboundLink")],1),e._v("\nspecific_programming_language")]),e._v(" "),a("p",[a("strong",[e._v("[Fowler]:")]),e._v(" Inversion of Control Containers and the Dependency Injection pattern,\n"),a("a",{attrs:{href:"http://martinfowler.com/articles/injection.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://martinfowler.com/articles/injection.html"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("170 "),a("strong",[e._v("Chapter 11: Systems")])]),e._v(" "),a("p",[a("strong",[e._v("[Goetz]:")]),e._v(" Brian Goetz, "),a("em",[e._v("Java Theory and Practice: Decorating with Dynamic Proxie")]),e._v(" s,\n"),a("a",{attrs:{href:"http://www.ibm.com/developerworks/java/library/j-jtp08305.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.ibm.com/developerworks/java/library/j-jtp08305.html"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("strong",[e._v("[Javassist]:")]),e._v(" Javassist Home Page, "),a("a",{attrs:{href:"http://www.csg.is.titech.ac.jp/~chiba/javassist/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.csg.is.titech.ac.jp/~chiba/javassist/"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("strong",[e._v("[JBoss]:")]),e._v(" JBoss Home Page, "),a("a",{attrs:{href:"http://jboss.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://jboss.org"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("strong",[e._v("[JMock]:")]),e._v(" JMock—A Lightweight Mock Object Library for Java, "),a("a",{attrs:{href:"http://jmock.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://jmock.org"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("strong",[e._v("[Kolence]:")]),e._v(" Kenneth W. Kolence, Software physics and computer performance measure-\nments, "),a("em",[e._v("Proceedings of the ACM annual conference—Volume 2")]),e._v(" , Boston, Massachusetts,\npp. 1024–1040, 1972.")]),e._v(" "),a("p",[a("strong",[e._v("[Spring]:")]),e._v(" "),a("em",[e._v("The Spring Framework")]),e._v(" , "),a("a",{attrs:{href:"http://www.springframework.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.springframework.org"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("strong",[e._v("[Mezzaros07]:")]),e._v(" "),a("em",[e._v("XUnit Patterns")]),e._v(" , Gerard Mezzaros, Addison-Wesley, 2007.")]),e._v(" "),a("p",[a("strong",[e._v("[GOF]:")]),e._v(" "),a("em",[e._v("Design Patterns: Elements of Reusable Object Oriented Software")]),e._v(" , Gamma et al.,\nAddison-Wesley, 1996.")])])}),[],!1,null,null,null);t.default=s.exports}}]);