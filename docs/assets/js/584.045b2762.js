(window.webpackJsonp=window.webpackJsonp||[]).push([[584],{1829:function(t,a,s){"use strict";s.r(a);var e=s(7),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"yaml-notes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#yaml-notes"}},[t._v("#")]),t._v(" YAML notes")]),t._v(" "),s("h2",{attrs:{id:"concepts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concepts"}},[t._v("#")]),t._v(" Concepts")]),t._v(" "),s("h3",{attrs:{id:"indentation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#indentation"}},[t._v("#")]),t._v(" Indentation")]),t._v(" "),s("ul",[s("li",[t._v("YAML relies on indentation to define nesting levels. Increased indentation indicates a nested element within a list or dictionary.")]),t._v(" "),s("li",[t._v("Consistent spacing (typically 2 or 4 spaces) is crucial, and mixing tabs and spaces is not allowed.")])]),t._v(" "),s("h3",{attrs:{id:"lists"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lists"}},[t._v("#")]),t._v(" Lists")]),t._v(" "),s("ul",[s("li",[t._v("Represented by a hyphen ("),s("code",[t._v("-")]),t._v(") followed by a space at the beginning of each line in the list.")]),t._v(" "),s("li",[s("strong",[t._v("Order")]),t._v(" matters in lists, the first element is accessed first")])]),t._v(" "),s("div",{staticClass:"language-yml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This defines a list with two elements")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Element 1\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Element 2\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This defines a dictionary with two key-value pairs")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" John Doe\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("age")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Nested element within a list")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("Sublist")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Item A\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Item B\n")])])]),s("h3",{attrs:{id:"key-value-pairs-mappings"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#key-value-pairs-mappings"}},[t._v("#")]),t._v(" Key-Value Pairs (Mappings)")]),t._v(" "),s("ul",[s("li",[t._v("Defined with a colon ("),s("code",[t._v(":")]),t._v(") separating the key and value.")]),t._v(" "),s("li",[t._v("Keys are unique identifiers within a mapping (dictionary-like structure).")]),t._v(" "),s("li",[t._v("Order generally doesn't matter in mappings.")])]),t._v(" "),s("div",{staticClass:"language-yml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Alice\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("age")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("occupation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Programmer\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Accessing the value for key "occupation"')]),t._v("\noccupation = person"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"occupation"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("h3",{attrs:{id:"folding-and-literal-scalars"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#folding-and-literal-scalars"}},[t._v("#")]),t._v(" Folding and Literal Scalars")]),t._v(" "),s("ul",[s("li",[t._v("YAML allows folding long strings (using the "),s("code",[t._v(">")]),t._v(" character) to keep the code readable.")]),t._v(" "),s("li",[t._v("Literal scalars (using "),s("code",[t._v("|")]),t._v(" character) preserve newlines and whitespace within the string value.")])]),t._v(" "),s("div",{staticClass:"language-yml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Long string with folding (preserves whitespace on the same line)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("message")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" This is a very long message "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" that would otherwise wrap to the next line \n  but is kept on a single line for readability.\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Literal scalar with newlines preserved")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("description")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token scalar string"}},[t._v("\n  This is a description\n  with multiple lines\n  and preserved whitespace.")]),t._v("\n")])])]),s("h3",{attrs:{id:"advanced-techniques"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#advanced-techniques"}},[t._v("#")]),t._v(" Advanced Techniques")]),t._v(" "),s("ul",[s("li",[t._v("YAML anchors (denoted by "),s("code",[t._v("&")]),t._v(") and aliases (denoted by "),s("code",[t._v("*")]),t._v(") allow referencing and reusing complex data structures within the YAML document.")]),t._v(" "),s("li",[t._v("While YAML doesn't have arithmetic or comparison operators, it offers these core mechanisms for building and managing data structures.")])]),t._v(" "),s("div",{staticClass:"language-yml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Define a base structure with an anchor")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("base")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("&common_data")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" value1\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" value2\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Reuse the base structure with an alias")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("user1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("*common_data")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Inherits everything from the base")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("username")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" user_01\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("user2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("*common_data")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Reuses the base again")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("username")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" user_02\n")])])]),s("h2",{attrs:{id:"data-serialization-language-comparision"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#data-serialization-language-comparision"}},[t._v("#")]),t._v(" Data serialization language comparision")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.pinimg.com/originals/fb/d9/a8/fbd9a8d19df0b604b7f3e92f801783dd.jpg",alt:"JSON vs YAML vs XML"}})])])}),[],!1,null,null,null);a.default=n.exports}}]);