(window.webpackJsonp=window.webpackJsonp||[]).push([[318],{935:function(e,t,n){"use strict";n.r(t);var a=n(7),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_18-code-should-be-obvious"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_18-code-should-be-obvious"}},[e._v("#")]),e._v(" 18. Code Should be Obvious")]),e._v(" "),n("p",[e._v("Obscurity is one of the two main causes of complexity described in\nSection 2.3. Obscurity occurs when important information about a system\nis not obvious to new developers. The solution to the obscurity problem is\nto write code in a way that makes it obvious; this chapter discusses some\nof the factors that make code more or less obvious.")]),e._v(" "),n("p",[e._v("If code is obvious, it means that someone can read the code quickly,\nwithout much thought, and their first guesses about the behavior or\nmeaning of the code will be correct. If code is obvious, a reader doesn’t\nneed to spend much time or effort to gather all the information they need\nto work with the code. If code is not obvious, then a reader must expend a\nlot of time and energy to understand it. Not only does this reduce their\nefficiency, but it also increases the likelihood of misunderstanding and\nbugs. Obvious code needs fewer comments than nonobvious code.")]),e._v(" "),n("p",[e._v("“Obvious” is in the mind of the reader: it’s easier to notice that\nsomeone else’s code is nonobvious than to see problems with your own\ncode. Thus, the best way to determine the obviousness of code is through\ncode reviews. If someone reading your code says it’s not obvious, then it’s\nnot obvious, no matter how clear it may seem to you. By trying to\nunderstand what made the code nonobvious, you will learn how to write\nbetter code in the future.")]),e._v(" "),n("h2",{attrs:{id:"_18-1-things-that-make-code-more-obvious"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_18-1-things-that-make-code-more-obvious"}},[e._v("#")]),e._v(" 18.1  Things that make code more obvious")]),e._v(" "),n("p",[e._v("Two of the most important techniques for making code obvious have\nalready been discussed in previous chapters. The first is choosing good\nnames (Chapter 14). Precise and meaningful names clarify the behavior of\nthe code and reduce the need for documentation. If a name is vague or")]),e._v(" "),n("p",[e._v("ambiguous, then readers will have read through the code in order to deduce\nthe meaning of the named entity; this is time-consuming and error-prone.\nThe second technique is consistency (Chapter 17). If similar things are\nalways done in similar ways, then readers can recognize patterns they have\nseen before and immediately draw (safe) conclusions without analyzing\nthe code in detail.")]),e._v(" "),n("p",[e._v("Here are a few other general-purpose techniques for making code more\nobvious:")]),e._v(" "),n("p",[e._v("Judicious use of white space. The way code is formatted can impact how\neasy it is to understand. Consider the following parameter documentation,\nin which whitespace has been squeezed out:\n/**")]),e._v(" "),n("p",[e._v("*  ...\n*  @param numThreads The number of threads that this manager should")]),e._v(" "),n("p",[e._v("*  spin up in order to manage ongoing connections. The\nMessageManager\n*  spins up at least one thread for every open connection, so this")]),e._v(" "),n("p",[e._v("*  should be at least equal to the number of connections you expect\n*  to be open at once. This should be a multiple of that number if")]),e._v(" "),n("p",[e._v("*  you expect to send a lot of messages in a short amount of time.\n*  @param handler Used as a callback in order to handle incoming")]),e._v(" "),n("p",[e._v("*  messages on this MessageManager's open connections. See\n*  {@code MessageHandler} and {@code handleMessage} for details.")]),e._v(" "),n("p",[e._v("*/")]),e._v(" "),n("p",[e._v("It’s hard to see where the documentation for one parameter ends and the\nnext begins. It’s not even obvious how many parameters there are, or what\ntheir names are. If a little whitespace is added, the structure suddenly\nbecomes clear and the documentation is easier to scan:\n/**\n*  @param numThreads")]),e._v(" "),n("p",[e._v("*           The number of threads that this manager should spin up\nin\n*           order to manage ongoing connections. The MessageManager\nspins")]),e._v(" "),n("p",[e._v("*           up at least one thread for every open connection, so\nthis")]),e._v(" "),n("p",[e._v("*           should be at least equal to the number of connections\nyou\n*           expect to be open at once. This should be a multiple of\nthat")]),e._v(" "),n("p",[e._v("*           number if you expect to send a lot of messages in a\nshort\n*           amount of time.")]),e._v(" "),n("p",[e._v("*  @param handler\n*           Used as a callback in order to handle incoming messages\non")]),e._v(" "),n("p",[e._v("*           this MessageManager's open connections. See\n*           {@code MessageHandler} and {@code handleMessage} for\ndetails.")]),e._v(" "),n("p",[e._v("*/")]),e._v(" "),n("p",[e._v("Blank lines are also useful to separate major blocks of code within a\nmethod, such as in the following example:\nvoid* Buffer::allocAux(size_t numBytes)\n{\n//  Round up the length to a multiple of 8 bytes, to ensure\nalignment.")]),e._v(" "),n("p",[e._v("uint32_t numBytes32 =  (downCast<uint32_t>(numBytes) + 7) &\n~0x7;\nassert(numBytes32 != 0);")]),e._v(" "),n("p",[e._v("//  If there is enough memory at firstAvailable, use that. Work\ndown\n//  from the top, because this memory is guaranteed to be\naligned")]),e._v(" "),n("p",[e._v("//  (memory at the bottom may have been used for variable-size\nchunks).\nif  (availableLength >= numBytes32) {")]),e._v(" "),n("p",[e._v("availableLength -= numBytes32;")]),e._v(" "),n("p",[e._v("return firstAvailable + availableLength;")]),e._v(" "),n("p",[e._v("}")]),e._v(" "),n("p",[e._v("//  Next, see if there is extra space at the end of the last\nchunk.")]),e._v(" "),n("p",[e._v("if  (extraAppendBytes >= numBytes32) {\nextraAppendBytes -= numBytes32;")]),e._v(" "),n("p",[e._v("return lastChunk->data + lastChunk->length +\nextraAppendBytes;\n}")]),e._v(" "),n("p",[e._v("//  Must create a new space allocation; allocate space within\nit.\nuint32_t allocatedLength;")]),e._v(" "),n("p",[e._v("firstAvailable = getNewAllocation(numBytes32,\n&allocatedLength);\navailableLength = allocatedLength numBytes32;")]),e._v(" "),n("p",[e._v("return firstAvailable + availableLength;\n}")]),e._v(" "),n("p",[e._v("This approach works particularly well if the first line after each blank line\nis a comment describing the next block of code: the blank lines make the\ncomments more visible.")]),e._v(" "),n("p",[e._v("White space within a statement helps to clarify the structure of the\nstatement. Compare the following two statements, one of which has\nwhitespace and one of which doesn’t:\nfor(int pass=1;pass>=0&&!empty;pass--) {")]),e._v(" "),n("p",[e._v("for (int pass = 1; pass >= 0 && !empty; pass--) {")]),e._v(" "),n("p",[e._v("Comments. Sometimes it isn’t possible to avoid code that is nonobvious.\nWhen this happens, it’s important to use comments to compensate by\nproviding the missing information. To do this well, you must put yourself\nin the position of the reader and figure out what is likely to confuse them,\nand what information will clear up that confusion. The next section shows\na few examples.")]),e._v(" "),n("h2",{attrs:{id:"_18-2-things-that-make-code-less-obvious"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_18-2-things-that-make-code-less-obvious"}},[e._v("#")]),e._v(" 18.2 Things that make code less obvious")]),e._v(" "),n("p",[e._v("There are many things that can make code nonobvious; this section\nprovides a few examples. Some of these, such as event-driven\nprogramming, are useful in some situations, so you may end up using\nthem anyway. When this happens, extra documentation can help to\nminimize reader confusion.")]),e._v(" "),n("p",[e._v("Event-driven programming. In event-driven programming, an\napplication responds to external occurrences, such as the arrival of a\nnetwork packet or the press of a mouse button. One module is responsible\nfor reporting incoming events. Other parts of the application register\ninterest in certain events by asking the event module to invoke a given\nfunction or method when those events occur.")]),e._v(" "),n("p",[e._v("Event-driven programming makes it hard to follow the flow of control.\nThe event handler functions are never invoked directly; they are invoked\nindirectly by the event module, typically using a function pointer or\ninterface. Even if you find the point of invocation in the event module, it\nstill isn’t possible to tell which specific function will be invoked: this will\ndepend on which handlers were registered at runtime. Because of this, it’s\nhard to reason about event-driven code or convince yourself that it works.")]),e._v(" "),n("p",[e._v("To compensate for this obscurity, use the interface comment for each\nhandler function to indicate when it is invoked, as in this example:\n/**\n* This method is invoked in the dispatch thread by a transport if a")]),e._v(" "),n("p",[e._v("* transport-level error prevents an RPC from completing.\n*/\nvoid\nTransport::RpcNotifier::failed() {")]),e._v(" "),n("p",[e._v("...\n}")]),e._v(" "),n("div",{staticClass:"custom-block danger"},[n("p",{staticClass:"custom-block-title"},[e._v("Nonobvious Code")]),e._v(" "),n("p",[e._v("If the meaning and behavior of code cannot be understood with a quick\nreading, it is a red flag. Often this means that there is important\ninformation that is not immediately clear to someone reading the code.")])]),e._v(" "),n("p",[e._v("Generic containers. Many languages provide generic classes for grouping\ntwo or more items into a single object, such as Pair in Java or std::pair in\nC++. These classes are tempting because they make it easy to pass around\nseveral objects with a single variable. One of the most common uses is to\nreturn multiple values from a method, as in this Java example:")]),e._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Pair")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Boolean")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("currentTerm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),n("p",[e._v("Unfortunately, generic containers result in nonobvious code because the\ngrouped elements have generic names that obscure their meaning. In the\nexample above, the caller must reference the two returned values with\n"),n("code",[e._v("result.getKey()")]),e._v(" and "),n("code",[e._v("result.getValue(),")]),e._v(" which give no clue about the actual meaning of the values.")]),e._v(" "),n("p",[e._v("Thus, it’s better not to use generic containers. If you need a container,\ndefine a new class or structure that is specialized for the particular use.\nYou can then use meaningful names for the elements, and you can provide\nadditional documentation in the declaration, which is not possible with the\ngeneric container.")]),e._v(" "),n("p",[e._v("This example illustrates a general rule: software should be designed\nfor ease of reading, not ease of writing. Generic containers are expedient\nfor the person writing the code, but they create confusion for all the\nreaders that follow. It’s better for the person writing the code to spend a\nfew extra minutes to define a specific container structure, so that the\nresulting code is more obvious.")]),e._v(" "),n("p",[e._v("Different types for declaration and allocation. Consider the following\nJava example:")]),e._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("List")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Message")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v(" incomingMessageList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\nincomingMessageList "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("ArrayList")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Message")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),n("p",[e._v("The variable is declared as a List, but the actual value is an ArrayList.")]),e._v(" "),n("p",[e._v("This code is legal, since List is a superclass of ArrayList, but it can\nmislead a reader who sees the declaration but not the actual allocation.\nThe actual type may impact how the variable is used (ArrayLists have different performance and thread-safety properties than other subclasses of List), so it is better to match the declaration with the allocation.")]),e._v(" "),n("p",[e._v("Code that violates reader expectations. Consider the following code,\nwhich is the main program for a Java application")]),e._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("static")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("RaftClient")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("myAddress"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" serverAddresses"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),n("p",[e._v("Most applications exit when their main programs return, so readers are\nlikely to assume that will happen here. However, that is not the case. The\nconstructor for RaftClient creates additional threads, which continue to\noperate even though the application’s main thread finishes. This behavior\nshould be documented in the interface comment for the RaftClient")]),e._v(" "),n("p",[e._v("constructor, but the behavior is nonobvious enough that it’s worth putting\na short comment at the end of main as well. The comment should indicate\nthat the application will continue executing in other threads. Code is most\nobvious if it conforms to the conventions that readers will be expecting; if\nit doesn’t, then it’s important to document the behavior so readers aren’t\nconfused.")]),e._v(" "),n("h2",{attrs:{id:"_18-3-conclusion"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_18-3-conclusion"}},[e._v("#")]),e._v(" 18.3  Conclusion")]),e._v(" "),n("p",[e._v("Another way of thinking about obviousness is in terms of information. If code is nonobvious, that usually means there is important information about the code that the reader does not have: in the "),n("code",[e._v("RaftClient")]),e._v(" example, the reader might not know that the "),n("code",[e._v("RaftClient")]),e._v(" constructor created new threads; in the Pair example, the reader might not know that "),n("code",[e._v("result.getKey()")]),e._v(" returns the number of the current term.")]),e._v(" "),n("p",[e._v("To make code obvious, you must ensure that readers always have the\ninformation they need to understand it. You can do this in three ways. The best way is to reduce the amount of information that is needed, using design techniques such as abstraction and eliminating special cases.")]),e._v(" "),n("p",[e._v("Second, you can take advantage of information that readers have already acquired in other contexts (for example, by following conventions and conforming to expectations) so readers don’t have to learn new information for your code. Third, you can present the important information to them in the code, using techniques such as good names and strategic comments.")])])}),[],!1,null,null,null);t.default=s.exports}}]);