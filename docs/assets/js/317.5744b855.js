(window.webpackJsonp=window.webpackJsonp||[]).push([[317],{1491:function(n,h,t){"use strict";t.r(h);var c=t(7),i=Object(c.a)({},(function(){var n=this,h=n.$createElement,t=n._self._c||h;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"_1-hanh-đong-mot-cach-than-trong-act-with-prudence"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-hanh-đong-mot-cach-than-trong-act-with-prudence"}},[n._v("#")]),n._v(" 1. Hành động một cách thận trọng (Act with Prudence)")]),n._v(" "),t("blockquote",{staticClass:"highlight-quote"},[t("p",[t("em",[n._v("Nếu bạn đảm nhận bất cứ việc gì, hãy làm một cách thận trọng và cân nhắc những ảnh hưởng sau này. — Anon")])])]),t("p",[n._v("Bất kể công việc của bạn có vẻ dễ dàng thế nào trong giai đoạn đầu dự án, bạn không thể tránh khỏi những lúc bị áp lực. Nếu bạn phải chọn giữa “"),t("strong",[n._v("làm đúng")]),n._v("” và “"),t("strong",[n._v("làm nhanh")]),n._v("”, thường thì bạn sẽ chọn “"),t("strong",[n._v("làm nhanh")]),n._v("” và có suy nghĩ trong đầu là sẽ quay lại fix nó sau. Khi bạn hứa điều này với chính bạn, với team, với khách hàng, nghĩa là bạn có chủ ý như vậy. Nhưng hầu như thì, sẽ nảy sinh ra những vấn đề mới ở những công việc tiếp theo và bạn sẽ tập trung vào những vấn đề này. Cái kiểu trì hoãn lại công việc để làm sau như vậy thường được coi là “technical debt” (nợ kĩ thuật) và nó không được tốt cho lắm. Đặc biệt Martin Fowler gọi cái kiểu tech debt này là tech debt có chủ ý (deliberate technical debt) để tránh nhầm lẫn với tech debt vô ý (inadvertent technical debt).")]),n._v(" "),t("p",[n._v("Tech debt giống như một món vay lãi: bạn nhận được lợi ích ngắn hạn từ nó, nhưng bạn sẽ phải trả cả lãi cho đến khi nó được thanh toán hoàn toàn. Những lối tắt trong code làm cho việc thêm feature và refactor code khó khăn hơn. Chúng là nơi sản sinh ra những sai sót và những test case dễ đổ bể. Để chúng đó càng lâu thì càng nguy hiểm. Cho đến lúc bạn phải fix cái chỗ ban đầu mà bạn tạo ra, có thể có tới một đống bùi nhùi được xây dựng trên phần code sai ban đầu, làm cho nó khó sửa và refactor. Thực tế, thường chỉ khi mọi thứ trở nên quá tệ đến nỗi bạn phải fix cái lỗi ban đầu thì bạn mới fix. Còn trước đó thì thường là khó để bạn có thể dành thời gian hoặc cân nhắc rủi ro để sửa nó.")]),n._v(" "),t("p",[n._v("Có những lúc bạn sẽ phải gánh chịu các tech debt để kịp deadline hoặc làm một feature nhỏ. Cố đừng để vào tình huống đó, nhưng nếu tình huống thực sự đòi hỏi phải làm vậy thì vẫn phải làm thôi. NHƯNG bạn phải track các tech debt và trả nợ nhanh chóng, hoặc mọi thứ sẽ lao dốc không phanh. Ngay sau khi quyết định gánh tech debt, viết ngay một task hoặc lưu lại trong hệ thống track issue của bạn để đảm bảo là bạn không quên nó.")]),n._v(" "),t("p",[n._v("Nếu bạn lên kế hoạch trả nợ trong tuần làm việc tới, giá phải trả sẽ là thấp nhất. Để nợ đó mà không trả sẽ sinh lãi, lãi này nên được theo dõi một cách minh bạch. Việc làm này sẽ giúp nhấn mạnh được mức độ ảnh hưởng của tech debt tới business value và sẽ giúp đánh giá cao việc trả nợ. Làm thế nào để tính và theo dõi phần nợ lãi dự vào project của bạn, nhưng bạn phải track nó.")]),n._v(" "),t("p",[n._v("Trả nợ tech càng sớm càng tốt. Còn không thì đồng nghĩa với việc bạn thiếu thận trọng.")]),n._v(" "),t("hr")])}),[],!1,null,null,null);h.default=i.exports}}]);