(window.webpackJsonp=window.webpackJsonp||[]).push([[430],{1658:function(e,t,a){"use strict";a.r(t);var n=a(7),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"_16-refactoring-serialdate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-refactoring-serialdate"}},[e._v("#")]),e._v(" 16. Refactoring SerialDate")]),e._v(" "),a("p",[e._v("If you go to "),a("a",{attrs:{href:"http://www.jfree.org/jcommon/index.php,",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.jfree.org/jcommon/index.php,"),a("OutboundLink")],1),e._v(" you will find the JCommon library.\nDeep within that library there is a package named org.jfree.date. Within that package\nthere is a class named SerialDate. We are going to explore that class.")]),e._v(" "),a("p",[e._v("The author of SerialDateis David Gilbert. David is clearly an experienced and com-\npetent programmer. As we shall see, he shows a significant degree of professionalism and\ndiscipline within his code. For all intents and purposes, this is “good code.” And I am\ngoing to rip it to pieces.")]),e._v(" "),a("p",[e._v("268 "),a("strong",[e._v("Chapter 16: Refactoring SerialDate")])]),e._v(" "),a("p",[e._v("This is not an activity of malice. Nor do I think that I am so much better than David\nthat I somehow have a right to pass judgment on his code. Indeed, if you were to find some\nof my code, I’m sure you could find plenty of things to complain about.")]),e._v(" "),a("p",[e._v("No, this is not an activity of nastiness or arrogance. What I am about to do is nothing\nmore and nothing less than a professional review. It is something that we should all be\ncomfortable doing. And it is something we should welcome when it is done for us. It is\nonly through critiques like these that we will learn. Doctors do it. Pilots do it. Lawyers do\nit. And we programmers need to learn how to do it too.")]),e._v(" "),a("p",[e._v("One more thing about David Gilbert: David is more than just a good programmer.\nDavid had the courage and good will to offer his code to the community at large for free.\nHe placed it out in the open for all to see and invited public usage and public scrutiny. This\nwas well done!")]),e._v(" "),a("p",[e._v("SerialDate(Listing B-1, page 349) is a class that represents a date in Java. Why have\na class that represents a date, when Java already has java.util.Date and\njava.util.Calendar, and others? The author wrote this class in response to a pain that I\nhave often felt myself. The comment in his opening Javadoc (line 67) explains it well. We\ncould quibble about his intention, but I have certainly had to deal with this issue, and I\nwelcome a class that is about dates instead of times.")]),e._v(" "),a("h2",{attrs:{id:"first-make-it-work"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#first-make-it-work"}},[e._v("#")]),e._v(" First, Make It Work ...")]),e._v(" "),a("p",[e._v("There are some unit tests in a class named SerialDateTests(Listing B-2, page 366). The\ntests all pass. Unfortunately a quick inspection of the tests shows that they don’t test every-\nthing [T1]. For example, doing a “Find Usages” search on the method MonthCodeToQuarter\n(line 334) indicates that it is not used [F4]. Therefore, the unit tests don’t test it.")]),e._v(" "),a("p",[e._v("So I fired up Clover to see what the unit tests covered and what they didn’t. Clover\nreported that the unit tests executed only 91 of the 185 executable statements in SerialDate\n(~50 percent) [T2]. The coverage map looks like a patchwork quilt, with big gobs of unex-\necuted code littered all through the class.")]),e._v(" "),a("p",[e._v("It was my goal to completely understand and also refactor this class. I couldn’t do that\nwithout much greater test coverage. So I wrote my own suite of completely independent\nunit tests (Listing B-4, page 374).")]),e._v(" "),a("p",[e._v("As you look through these tests, you will note that many of them are commented out.\nThese tests didn’t pass. They represent behavior that I think SerialDate should have. So as\nI refactor SerialDate, I’ll be working to make these tests pass too.")]),e._v(" "),a("p",[e._v("Even with some of the tests commented out, Clover reports that the new unit tests are\nexecuting 170 (92 percent) out of the 185 executable statements. This is pretty good, and I\nthink we’ll be able to get this number higher.")]),e._v(" "),a("p",[e._v("The first few commented-out tests (lines 23-63) were a bit of conceit on my part. The\nprogram was not designed to pass these tests, but the behavior seemed obvious [G2] to me.")]),e._v(" "),a("p",[a("strong",[e._v("First, Make It Work")]),e._v(" 269")]),e._v(" "),a("p",[e._v("I’m not sure why the testWeekdayCodeToStringmethod was written in the first place, but\nbecause it is there, it seems obvious that it should not be case sensitive. Writing these tests\nwas trivial [T3]. Making them pass was even easier; I just changed lines 259 and 263 to\nuseequalsIgnoreCase.")]),e._v(" "),a("p",[e._v("I left the tests at line 32 and line 45 commented out because it’s not clear to me that\nthe “tues” and “thurs” abbreviations ought to be supported.")]),e._v(" "),a("p",[e._v("The tests on line 153 and line 154 don’t pass. Clearly, they should [G2]. We can easily\nfix this, and the tests on line 163 through line 213, by making the following changes to the\nstringToMonthCode function.")]),e._v(" "),a("p",[e._v("The commented test on line 318 exposes a bug in the getFollowingDayOfWeekmethod\n(line 672). December 25th, 2004, was a Saturday. The following Saturday was January 1st,")]),e._v(" "),a("ol",{attrs:{start:"2005"}},[a("li",[e._v("However, when we run the test, we see that getFollowingDayOfWeekreturns Decem-\nber 25th as the Saturday that follows December 25th. Clearly, this is wrong [G3],[T1]. We\nsee the problem in line 685. It is a typical boundary condition error [T5]. It should read as\nfollows:")])]),e._v(" "),a("p",[e._v("It is interesting to note that this function was the target of an earlier repair. The change\nhistory (line 43) shows that “bugs” were fixed in getPreviousDayOfWeek,getFollowing-\nDayOfWeek, and getNearestDayOfWeek [T6].")]),e._v(" "),a("p",[e._v("ThetestGetNearestDayOfWeek unit test (line 329), which tests the getNearestDayOfWeek\nmethod (line 705), did not start out as long and exhaustive as it currently is. I added a lot\nof test cases to it because my initial test cases did not all pass [T6]. You can see the pattern\nof failure by looking at which test cases are commented out. That pattern is revealing [T7].\nIt shows that the algorithm fails if the nearest day is in the future. Clearly there is some\nkind of boundary condition error [T5].")]),e._v(" "),a("p",[e._v("The pattern of test coverage reported by Clover is also interesting [T8]. Line 719\nnever gets executed! This means that the ifstatement in line 718 is always false. Sure\nenough, a look at the code shows that this must be true. The adjust variable is always neg-\native and so cannot be greater or equal to 4. So this algorithm is just wrong.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("457 if ((result < 1) || (result > 12)) {\nresult = -1;\n458 for (int i = 0; i < monthNames.length; i++) {\n459 if (s.equalsIgnoreCase(shortMonthNames[i])) {\n460 result = i + 1;\n461 break;\n462 }\n463 if (s.equalsIgnoreCase(monthNames[i])) {\n464 result = i + 1;\n465 break;\n466 }\n467 }\n468 }\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("685 if (baseDOW >= targetWeekday) {\n")])])]),a("p",[e._v("270 "),a("strong",[e._v("Chapter 16: Refactoring SerialDate")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("The right algorithm is shown below:\n")])])]),a("p",[e._v("Finally, the tests at line 417 and line 429 can be made to pass simply by throwing an\nIllegalArgumentExceptioninstead of returning an error string from weekInMonthToString\nandrelativeToString.")]),e._v(" "),a("p",[e._v("With these changes all the unit tests pass, and I believe SerialDatenow works. So now\nit’s time to make it “right.”")]),e._v(" "),a("h2",{attrs:{id:"then-make-it-right"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#then-make-it-right"}},[e._v("#")]),e._v(" Then Make It Right ...")]),e._v(" "),a("p",[e._v("We are going to walk from the top to the bottom of SerialDate, improving it as we go\nalong. Although you won’t see this in the discussion, I will be running all of the JCommon\nunit tests, including my improved unit test for SerialDate, after every change I make. So\nrest assured that every change you see here works for all of JCommon.")]),e._v(" "),a("p",[e._v("Starting at line 1, we see a ream of comments with license information, copyrights,\nauthors, and change history. I acknowledge that there are certain legalities that need to be\naddressed, and so the copyrights and licenses must stay. On the other hand, the change his-\ntory is a leftover from the 1960s. We have source code control tools that do this for us now.\nThis history should be deleted [C1].")]),e._v(" "),a("p",[e._v("The import list starting at line 61 could be shortened by using java.text."),a("em",[e._v("and\njava.util.")]),e._v(". [J1]")]),e._v(" "),a("p",[e._v("I wince at the HTML formatting in the Javadoc (line 67). Having a source file with\nmore than one language in it troubles me. This comment has "),a("em",[e._v("four")]),e._v(" languages in it: Java,\nEnglish, Javadoc, and html [G1]. With that many languages in use, it’s hard to keep things\nstraight. For example, the nice positioning of line 71 and line 72 are lost when the Javadoc\nis generated, and yet who wants to see "),a("em",[e._v("ul")]),e._v(" and "),a("em",[e._v("li")]),e._v(" in the source code? A better strategy\nmight be to just surround the whole comment with "),a("em",[e._v("pre")]),e._v(" so that the formatting that is\napparent in the source code is preserved within the Javadoc.^1")]),e._v(" "),a("p",[e._v("Line 86 is the class declaration. Why is this class named SerialDate? What is the sig-\nnificance of the world “serial”? Is it because the class is derived from Serializable? That\ndoesn’t seem likely.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("int delta = targetDOW - base.getDayOfWeek();\nint positiveDelta = delta + 7;\nint adjust = positiveDelta % 7;\nif (adjust > 3)\nadjust -= 7;\nreturn SerialDate.addDays(adjust, base);\n")])])]),a("ol",[a("li",[e._v("An even better solution would have been for Javadoc to present all comments as preformatted, so that comments appear the\nsame in both code and document.")])]),e._v(" "),a("p",[a("strong",[e._v("Then Make It Right")]),e._v(" 271")]),e._v(" "),a("p",[e._v("I won’t keep you guessing. I know why (or at least I think I know why) the word\n“serial” was used. The clue is in the constants SERIAL_LOWER_BOUND and\nSERIAL_UPPER_BOUND on line 98 and line 101. An even better clue is in the comment\nthat begins on line 830. This class is named SerialDatebecause it is implemented using a\n“serial number,” which happens to be the number of days since December 30th, 1899.")]),e._v(" "),a("p",[e._v("I have two problems with this. First, the term “serial number” is not really correct.\nThis may be a quibble, but the representation is more of a relative offset than a serial num-\nber. The term “serial number” has more to do with product identification markers than\ndates. So I don’t find this name particularly descriptive [N1]. A more descriptive term\nmight be “ordinal.”")]),e._v(" "),a("p",[e._v("The second problem is more significant. The name SerialDateimplies an implementa-\ntion. This class is an abstract class. There is no need to imply anything at all about the\nimplementation. Indeed, there is good reason to hide the implementation! So I find this\nname to be at the wrong level of abstraction [N2]. In my opinion, the name of this class\nshould simply be Date.")]),e._v(" "),a("p",[e._v("Unfortunately, there are already too many classes in the Java library named Date, so\nthis is probably not the best name to choose. Because this class is all about days, instead of\ntime, I considered naming it Day, but this name is also heavily used in other places. In the\nend, I chose DayDate as the best compromise.")]),e._v(" "),a("p",[e._v("From now on in this discussion I will use the term DayDate. I leave it to you to remem-\nber that the listings you are looking at still use SerialDate.")]),e._v(" "),a("p",[e._v("I understand why DayDateinherits from ComparableandSerializable. But why does it\ninherit from MonthConstants? The class MonthConstants(Listing B-3, page 372) is just a\nbunch of static final constants that define the months. Inheriting from classes with con-\nstants is an old trick that Java programmers used so that they could avoid using expres-\nsions like MonthConstants.January, but it’s a bad idea [J2]. MonthConstants should really be\nan enum.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public abstract class DayDate implements Comparable,\nSerializable {\npublic static enum Month {\nJANUARY(1),\nFEBRUARY(2),\nMARCH(3),\nAPRIL(4),\nMAY(5),\nJUNE(6),\nJULY(7),\nAUGUST(8),\nSEPTEMBER(9),\nOCTOBER(10),\nNOVEMBER(11),\nDECEMBER(12);\nMonth(int index) {\nthis.index = index;\n}\n")])])]),a("p",[e._v("272 "),a("strong",[e._v("Chapter 16: Refactoring SerialDate")])]),e._v(" "),a("p",[e._v("ChangingMonthConstantsto this enumforces quite a few changes to the DayDateclass\nand all it’s users. It took me an hour to make all the changes. However, any function that\nused to take an intfor a month, now takes a Monthenumerator. This means we can get rid\nof the isValidMonthCodemethod (line 326), and all the month code error checking such as\nthat in monthCodeToQuarter (line 356) [G5].")]),e._v(" "),a("p",[e._v("Next, we have line 91, serialVersionUID. This variable is used to control the serializer.\nIf we change it, then any DayDatewritten with an older version of the software won’t be\nreadable anymore and will result in an InvalidClassException. If you don’t declare the\nserialVersionUIDvariable, then the compiler automatically generates one for you, and it\nwill be different every time you make a change to the module. I know that all the docu-\nments recommend manual control of this variable, but it seems to me that automatic con-\ntrol of serialization is a lot safer [G4]. After all, I’d much rather debug an\nInvalidClassExceptionthan the odd behavior that would ensue if I forgot to change the\nserialVersionUID. So I’m going to delete the variable—at least for the time being.^2")]),e._v(" "),a("p",[e._v("I find the comment on line 93 redundant. Redundant comments are just places to col-\nlect lies and misinformation [C2]. So I’m going to get rid of it and its ilk.")]),e._v(" "),a("p",[e._v("The comments at line 97 and line 100 talk about serial numbers, which I discussed\nearlier [C1]. The variables they describe are the earliest and latest possible dates that\nDayDate can describe. This can be made a bit clearer [N1].")]),e._v(" "),a("p",[e._v("It’s not clear to me why EARLIEST_DATE_ORDINALis 2 instead of 0. There is a hint in the\ncomment on line 829 that suggests that this has something to do with the way dates are\nrepresented in Microsoft Excel. There is a much deeper insight provided in a derivative of\nDayDatecalledSpreadsheetDate(Listing B-5, page 382). The comment on line 71 describes\nthe issue nicely.")]),e._v(" "),a("p",[e._v("The problem I have with this is that the issue seems to be related to the implementa-\ntion of SpreadsheetDateand has nothing to do with DayDate. I conclude from this that")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('public static Month make(int monthIndex) {\nfor (Month m : Month.values()) {\nif (m.index == monthIndex)\nreturn m;\n}\nthrow new IllegalArgumentException("Invalid month index " + monthIndex);\n}\npublic final int index;\n}\n')])])]),a("ol",{attrs:{start:"2"}},[a("li",[e._v("Several of the reviewers of this text have taken exception to this decision. They contend that in an open source framework itis\nbetter to assert manual control over the serial ID so that minor changes to the software don’t cause old serialized dates to be\ninvalid. This is a fair point. However, at least the failure, inconvenient though it might be, has a clear-cut cause. On the other\nhand, if the author of the class forgets to update the ID, then the failure mode is undefined and might very well be silent. I\nthink the real moral of this story is that you should not expect to deserialize across versions.")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public static final int EARLIEST_DATE_ORDINAL = 2; // 1/1/1900\npublic static final int LATEST_DATE_ORDINAL = 2958465; // 12/31/9999\n")])])]),a("p",[a("strong",[e._v("Then Make It Right")]),e._v(" 273")]),e._v(" "),a("p",[e._v("EARLIEST_DATE_ORDINALand LATEST_DATE_ORDINALdo not really belong in DayDateand\nshould be moved to SpreadsheetDate[G6].")]),e._v(" "),a("p",[e._v("Indeed, a search of the code shows that these variables are used only within\nSpreadsheetDate. Nothing in DayDate, nor in any other class in the JCommonframework, uses\nthem. Therefore, I’ll move them down into SpreadsheetDate.")]),e._v(" "),a("p",[e._v("The next variables, MINIMUM_YEAR_SUPPORTED, and MAXIMUM_YEAR_SUPPORTED(line 104\nand line 107), provide something of a dilemma. It seems clear that if DayDate is an abstract\nclass that provides no foreshadowing of implementation, then it should not inform us\nabout a minimum or maximum year. Again, I am tempted to move these variables down\nintoSpreadsheetDate[G6]. However, a quick search of the users of these variables shows\nthat one other class uses them: RelativeDayOfWeekRule(Listing B-6, page 390). We see that\nusage at line 177 and line 178 in the getDatefunction, where they are used to check that\nthe argument to getDateis a valid year. The dilemma is that a user of an abstract class\nneeds information about its implementation.")]),e._v(" "),a("p",[e._v("What we need to do is provide this information without polluting DayDateitself.\nUsually, we would get implementation information from an instance of a derivative.\nHowever, the getDatefunction is not passed an instance of a DayDate. It does, however,\nreturn such an instance, which means that somewhere it must be creating it. Line 187\nthrough line 205 provide the hint. The DayDateinstance is being created by one of the\nthree functions, getPreviousDayOfWeek,getNearestDayOfWeek, or getFollowingDayOfWeek.\nLooking back at the DayDatelisting, we see that these functions (lines 638–724) all return\na date created by addDays(line 571), which calls createInstance(line 808), which creates\naSpreadsheetDate! [G7].")]),e._v(" "),a("p",[e._v("It’s generally a bad idea for base classes to know about their derivatives. To fix this, we\nshould use the ABSTRACT FACTORY^3 pattern and create a DayDateFactory. This factory will\ncreate the instances of DayDatethat we need and can also answer questions about the\nimplementation, such as the maximum and minimum dates.")]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[e._v("[GOF].")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public abstract class DayDateFactory {\nprivate static DayDateFactory factory = new SpreadsheetDateFactory();\npublic static void setInstance(DayDateFactory factory) {\nDayDateFactory.factory = factory;\n}\nprotected abstract DayDate _makeDate(int ordinal);\nprotected abstract DayDate _makeDate(int day, DayDate.Month month, int year);\nprotected abstract DayDate _makeDate(int day, int month, int year);\nprotected abstract DayDate _makeDate(java.util.Date date);\nprotected abstract int _getMinimumYear();\nprotected abstract int _getMaximumYear();\npublic static DayDate makeDate(int ordinal) {\nreturn factory._makeDate(ordinal);\n}\n")])])]),a("p",[e._v("274 "),a("strong",[e._v("Chapter 16: Refactoring SerialDate")])]),e._v(" "),a("p",[e._v("This factory class replaces the createInstancemethods with makeDatemethods, which\nimproves the names quite a bit [N1]. It defaults to a SpreadsheetDateFactorybut can be\nchanged at any time to use a different factory. The static methods that delegate to abstract\nmethods use a combination of the SINGLETON,^4 DECORATOR,^5 and ABSTRACT FACTORY\npatterns that I have found to be useful.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("TheSpreadsheetDateFactory looks like this.\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public static DayDate makeDate(int day, DayDate.Month month, int year) {\nreturn factory._makeDate(day, month, year);\n}\npublic static DayDate makeDate(int day, int month, int year) {\nreturn factory._makeDate(day, month, year);\n}\npublic static DayDate makeDate(java.util.Date date) {\nreturn factory._makeDate(date);\n}\npublic static int getMinimumYear() {\nreturn factory._getMinimumYear();\n}\npublic static int getMaximumYear() {\nreturn factory._getMaximumYear();\n}\n}\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[e._v("Ibid.")]),e._v(" "),a("li",[e._v("Ibid.")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class SpreadsheetDateFactory extends DayDateFactory {\npublic DayDate _makeDate(int ordinal) {\nreturn new SpreadsheetDate(ordinal);\n}\npublic DayDate _makeDate(int day, DayDate.Month month, int year) {\nreturn new SpreadsheetDate(day, month, year);\n}\npublic DayDate _makeDate(int day, int month, int year) {\nreturn new SpreadsheetDate(day, month, year);\n}\npublic DayDate _makeDate(Date date) {\nfinal GregorianCalendar calendar = new GregorianCalendar();\ncalendar.setTime(date);\nreturn new SpreadsheetDate(\ncalendar.get(Calendar.DATE),\nDayDate.Month.make(calendar.get(Calendar.MONTH) + 1),\ncalendar.get(Calendar.YEAR));\n}\n")])])]),a("p",[a("strong",[e._v("Then Make It Right")]),e._v(" 275")]),e._v(" "),a("p",[e._v("As you can see, I have already moved the MINIMUM_YEAR_SUPPORTED and\nMAXIMUM_YEAR_SUPPORTED variables into SpreadsheetDate, where they belong [G6].")]),e._v(" "),a("p",[e._v("The next issue in DayDateare the day constants beginning at line 109. These should\nreally be another enum [J3]. We’ve seen this pattern before, so I won’t repeat it here. You’ll\nsee it in the final listings.")]),e._v(" "),a("p",[e._v("Next, we see a series of tables starting with LAST_DAY_OF_MONTHat line 140. My first\nissue with these tables is that the comments that describe them are redundant [C3]. Their\nnames are sufficient. So I’m going to delete the comments.")]),e._v(" "),a("p",[e._v("There seems to be no good reason that this table isn’t private [G8], because there is a\nstatic function lastDayOfMonth that provides the same data.")]),e._v(" "),a("p",[e._v("The next table, AGGREGATE_DAYS_TO_END_OF_MONTH, is a bit more mysterious because it is\nnot used anywhere in the JCommon framework [G9]. So I deleted it.")]),e._v(" "),a("p",[e._v("The same goes for LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH.\nThe next table, AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH, is used only in Spread-\nsheetDate(line 434 and line 473). This begs the question of whether it should be moved\ntoSpreadsheetDate. The argument for not moving it is that the table is not specific to any\nparticular implementation [G6]. On the other hand, no implementation other than\nSpreadsheetDateactually exists, and so the table should be moved close to where it is\nused [G10].")]),e._v(" "),a("p",[e._v("What settles the argument for me is that to be consistent [G11], we should make the\ntable private and expose it through a function like julianDateOfLastDayOfMonth. Nobody\nseems to need a function like that. Moreover, the table can be moved back to DayDateeasily\nif any new implementation of DayDate needs it. So I moved it.")]),e._v(" "),a("p",[e._v("The same goes for the table, LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH.\nNext, we see three sets of constants that can be turned into enums (lines 162–205).\nThe first of the three selects a week within a month. I changed it into an enum named\nWeekInMonth.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("protected int _getMinimumYear() {\nreturn SpreadsheetDate.MINIMUM_YEAR_SUPPORTED;\n}\nprotected int _getMaximumYear() {\nreturn SpreadsheetDate.MAXIMUM_YEAR_SUPPORTED;\n}\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public enum WeekInMonth {\nFIRST(1), SECOND(2), THIRD(3), FOURTH(4), LAST(0);\npublic final int index;\nWeekInMonth(int index) {\nthis.index = index;\n}\n}\n")])])]),a("p",[e._v("276 "),a("strong",[e._v("Chapter 16: Refactoring SerialDate")])]),e._v(" "),a("p",[e._v("The second set of constants (lines 177–187) is a bit more obscure. The INCLUDE_NONE,\nINCLUDE_FIRST,INCLUDE_SECOND, and INCLUDE_BOTHconstants are used to describe whether\nthe defining end-point dates of a range should be included in that range. Mathematically,\nthis is described using the terms “open interval,” “half-open interval,” and “closed inter-\nval.” I think it is clearer using the mathematical nomenclature [N3], so I changed it to an\nenum named DateInterval with CLOSED,CLOSED_LEFT,CLOSED_RIGHT, and OPEN enumerators.")]),e._v(" "),a("p",[e._v("The third set of constants (lines 18–205) describe whether a search for a particular\nday of the week should result in the last, next, or nearest instance. Deciding what to call\nthis is difficult at best. In the end, I settled for WeekdayRangewithLAST,NEXT, and NEAREST\nenumerators.")]),e._v(" "),a("p",[e._v("You might not agree with the names I’ve chosen. They make sense to me, but they\nmay not make sense to you. The point is that they are now in a form that makes them easy\nto change [J3]. They aren’t passed as integers anymore; they are passed as symbols. I can\nuse the “change name” function of my IDE to change the names, or the types, without\nworrying that I missed some -1or 2 somewhere in the code or that some intargument dec-\nlaration is left poorly described.")]),e._v(" "),a("p",[e._v("The description field at line 208 does not seem to be used by anyone. I deleted it along\nwith its accessor and mutator [G9].")]),e._v(" "),a("p",[e._v("I also deleted the degenerate default constructor at line 213 [G12]. The compiler will\ngenerate it for us.")]),e._v(" "),a("p",[e._v("We can skip over the isValidWeekdayCodemethod (lines 216–238) because we deleted\nit when we created the Day enumeration.")]),e._v(" "),a("p",[e._v("This brings us to the stringToWeekdayCodemethod (lines 242–270). Javadocs that\ndon’t add much to the method signature are just clutter [C3],[G12]. The only value this\nJavadoc adds is the description of the -1return value. However, because we changed to the\nDayenumeration, the comment is actually wrong [C2]. The method now throws an\nIllegalArgumentException. So I deleted the Javadoc.")]),e._v(" "),a("p",[e._v("I also deleted all the final keywords in arguments and variable declarations. As far as\nI could tell, they added no real value but did add to the clutter [G12]. Eliminating final\nflies in the face of some conventional wisdom. For example, Robert Simmons^6 strongly\nrecommends us to “... spread finalall over your code.” Clearly I disagree. I think that\nthere are a few good uses for final, such as the occasional finalconstant, but otherwise\nthe keyword adds little value and creates a lot of clutter. Perhaps I feel this way because the\nkinds of errors that final might catch are already caught by the unit tests I write.")]),e._v(" "),a("p",[e._v("I didn’t care for the duplicate ifstatements [G5] inside the forloop (line 259 and\nline 263), so I connected them into a single ifstatement using the ||operator. I also used\ntheDay enumeration to direct the for loop and made a few other cosmetic changes.")]),e._v(" "),a("p",[e._v("It occurred to me that this method does not really belong in DayDate. It’s really the\nparse function of Day. So I moved it into the Dayenumeration. However, that made the Day")]),e._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[e._v("[Simmons04], p. 73.")])]),e._v(" "),a("p",[a("strong",[e._v("Then Make It Right")]),e._v(" 277")]),e._v(" "),a("p",[e._v("enumeration pretty large. Because the concept of Daydoes not depend on DayDate, I moved\ntheDay enumeration outside of the DayDate class into its own source file [G13].")]),e._v(" "),a("p",[e._v("I also moved the next function, weekdayCodeToString(lines 272–286) into the Day\nenumeration and called it toString.")]),e._v(" "),a("p",[e._v("There are two getMonthsfunctions (lines 288–316). The first calls the second. The\nsecond is never called by anyone but the first. Therefore, I collapsed the two into one and\nvastly simplified them [G9],[G12],[F4]. Finally, I changed the name to be a bit more self-\ndescriptive [N1].")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('public enum Day {\nMONDAY(Calendar.MONDAY),\nTUESDAY(Calendar.TUESDAY),\nWEDNESDAY(Calendar.WEDNESDAY),s\nTHURSDAY(Calendar.THURSDAY),\nFRIDAY(Calendar.FRIDAY),\nSATURDAY(Calendar.SATURDAY),\nSUNDAY(Calendar.SUNDAY);\npublic final int index;\nprivate static DateFormatSymbols dateSymbols = new DateFormatSymbols();\nDay(int day) {\nindex = day;\n}\npublic static Day make(int index) throws IllegalArgumentException {\nfor (Day d : Day.values())\nif (d.index == index)\nreturn d;\nthrow new IllegalArgumentException(\nString.format("Illegal day index: %d.", index));\n}\npublic static Day parse(String s) throws IllegalArgumentException {\nString[] shortWeekdayNames =\ndateSymbols.getShortWeekdays();\nString[] weekDayNames =\ndateSymbols.getWeekdays();\ns = s.trim();\nfor (Day day : Day.values()) {\nif (s.equalsIgnoreCase(shortWeekdayNames[day.index]) ||\ns.equalsIgnoreCase(weekDayNames[day.index])) {\nreturn day;\n}\n}\nthrow new IllegalArgumentException(\nString.format("%s is not a valid weekday string", s));\n}\npublic String toString() {\nreturn dateSymbols.getWeekdays()[index];\n}\n}\n')])])]),a("p",[e._v("278 "),a("strong",[e._v("Chapter 16: Refactoring SerialDate")])]),e._v(" "),a("p",[e._v("TheisValidMonthCodefunction (lines 326–346) was made irrelevant by the Month\nenum, so I deleted it [G9].")]),e._v(" "),a("p",[e._v("ThemonthCodeToQuarterfunction (lines 356–375) smells of FEATURE ENVY^7 [G14]\nand probably belongs in the Month enum as a method named quarter. So I replaced it.")]),e._v(" "),a("p",[e._v("This made the Monthenum big enough to be in its own class. So I moved it out of\nDayDate to be consistent with the Day enum [G11],[G13].")]),e._v(" "),a("p",[e._v("The next two methods are named monthCodeToString(lines 377–426). Again, we see\nthe pattern of one method calling its twin with a flag. It is usually a bad idea to pass a flag\nas an argument to a function, especially when that flag simply selects the format of the out-\nput[G15]. I renamed, simplified, and restructured these functions and moved them into the\nMonth enum [N1],[N3],[C3],[G14].")]),e._v(" "),a("p",[e._v("The next method is stringToMonthCode(lines 428–472). I renamed it, moved it into the\nMonth enum, and simplified it [N1],[N3],[C3],[G14],[G12].")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public static String[] getMonthNames() {\nreturn dateFormatSymbols.getMonths();\n}\n")])])]),a("ol",{attrs:{start:"7"}},[a("li",[e._v("[Refactoring].")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public int quarter() {\nreturn 1 + (index-1)/3;\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public String toString() {\nreturn dateFormatSymbols.getMonths()[index - 1];\n}\npublic String toShortString() {\nreturn dateFormatSymbols.getShortMonths()[index - 1];\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('public static Month parse(String s) {\ns = s.trim();\nfor (Month m : Month.values())\nif (m.matches(s))\nreturn m;\ntry {\nreturn make(Integer.parseInt(s));\n}\ncatch (NumberFormatException e) {}\nthrow new IllegalArgumentException("Invalid month " + s);\n}\n')])])]),a("p",[a("strong",[e._v("Then Make It Right")]),e._v(" 279")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("TheisLeapYear method (lines 495–517) can be made a bit more expressive [G16].\n")])])]),a("p",[e._v("The next function, leapYearCount(lines 519–536) doesn’t really belong in DayDate.\nNobody calls it except for two methods in SpreadsheetDate. So I pushed it down [G6].")]),e._v(" "),a("p",[e._v("ThelastDayOfMonthfunction (lines 538–560) makes use of the LAST_DAY_OF_MONTH\narray. This array really belongs in the Month enum [G17], so I moved it there. I also simpli-\nfied the function and made it a bit more expressive [G16].")]),e._v(" "),a("p",[e._v("Now things start to get a bit more interesting. The next function is addDays(lines 562–\n576). First of all, because this function operates on the variables of DayDate, it should not\nbe static [G18]. So I changed it to an instance method. Second, it calls the function\ntoSerial. This function should be renamed toOrdinal[N1]. Finally, the method can be\nsimplified.")]),e._v(" "),a("p",[e._v("The same goes for addMonths(lines 578–602). It should be an instance method [G18].\nThe algorithm is a bit complicated, so I used EXPLAINING TEMPORARY VARIABLES^8 [G19]\nto make it more transparent. I also renamed the method getYYY to getYear [N1].")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("private boolean matches(String s) {\nreturn s.equalsIgnoreCase(toString()) ||\ns.equalsIgnoreCase(toShortString());\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public static boolean isLeapYear(int year) {\nboolean fourth = year % 4 == 0;\nboolean hundredth = year % 100 == 0;\nboolean fourHundredth = year % 400 == 0;\nreturn fourth && (!hundredth || fourHundredth);\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public static int lastDayOfMonth(Month month, int year) {\nif (month == Month.FEBRUARY && isLeapYear(year))\nreturn month.lastDay() + 1;\nelse\nreturn month.lastDay();\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public DayDate addDays(int days) {\nreturn DayDateFactory.makeDate(toOrdinal() + days);\n}\n")])])]),a("ol",{attrs:{start:"8"}},[a("li",[e._v("[Beck97].")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public DayDate addMonths(int months) {\nint thisMonthAsOrdinal = 12 * getYear() + getMonth().index - 1;\nint resultMonthAsOrdinal = thisMonthAsOrdinal + months;\nint resultYear = resultMonthAsOrdinal / 12;\nMonth resultMonth = Month.make(resultMonthAsOrdinal % 12 + 1);\n")])])]),a("p",[e._v("280 "),a("strong",[e._v("Chapter 16: Refactoring SerialDate")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("TheaddYears function (lines 604–626) provides no surprises over the others.\n")])])]),a("p",[e._v("There is a little itch at the back of my mind that is bothering me about changing\nthese methods from static to instance. Does the expression date.addDays(5)make it\nclear that the dateobject does not change and that a new instance of DayDateis returned?\nOr does it erroneously imply that we are adding five days to the dateobject? You might\nnot think that is a big problem, but a bit of code that looks like the following can be very\ndeceiving [G20].")]),e._v(" "),a("p",[e._v("DayDate date = DateFactory.makeDate(5, Month.DECEMBER, 1952);\ndate.addDays(7); // bump date by one week.\nSomeone reading this code would very likely just accept that addDaysis changing the\ndateobject. So we need a name that breaks this ambiguity [N4]. So I changed the names to\nplusDays and plusMonths. It seems to me that the intent of the method is captured nicely by")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("DayDate date = oldDate.plusDays(5);\n")])])]),a("p",[e._v("whereas the following doesn’t read fluidly enough for a reader to simply accept that the\ndate object is changed:")]),e._v(" "),a("p",[e._v("date.plusDays(5);\nThe algorithms continue to get more interesting. getPreviousDayOfWeek(lines 628–\n660) works but is a bit complicated. After some thought about what was really going on\n[G21], I was able to simplify it and use EXPLAINING TEMPORARY VARIABLES[G19] to\nmake it clearer. I also changed it from a static method to an instance method [G18], and\ngot rid of the duplicate instance method [G5] (lines 997–1008).")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("The exact same analysis and result occurred for getFollowingDayOfWeek(lines 662–693).\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("int lastDayOfResultMonth = lastDayOfMonth(resultMonth, resultYear);\nint resultDay = Math.min(getDayOfMonth(), lastDayOfResultMonth);\nreturn DayDateFactory.makeDate(resultDay, resultMonth, resultYear);\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public DayDate plusYears(int years) {\nint resultYear = getYear() + years;\nint lastDayOfMonthInResultYear = lastDayOfMonth(getMonth(), resultYear);\nint resultDay = Math.min(getDayOfMonth(), lastDayOfMonthInResultYear);\nreturn DayDateFactory.makeDate(resultDay, getMonth(), resultYear);\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public DayDate getPreviousDayOfWeek(Day targetDayOfWeek) {\nint offsetToTarget = targetDayOfWeek.index - getDayOfWeek().index;\nif (offsetToTarget >= 0)\noffsetToTarget -= 7;\nreturn plusDays(offsetToTarget);\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public DayDate getFollowingDayOfWeek(Day targetDayOfWeek) {\nint offsetToTarget = targetDayOfWeek.index - getDayOfWeek().index;\nif (offsetToTarget <= 0)\n")])])]),a("p",[a("strong",[e._v("Then Make It Right")]),e._v(" 281")]),e._v(" "),a("p",[e._v("The next function is getNearestDayOfWeek(lines 695–726), which we corrected back\non page 270. But the changes I made back then aren’t consistent with the current pattern in\nthe last two functions [G11]. So I made it consistent and used some EXPLAINING TEMPO-\nRARY VARIABLES [G19] to clarify the algorithm.")]),e._v(" "),a("p",[e._v("ThegetEndOfCurrentMonthmethod (lines 728–740) is a little strange because it is an\ninstance method that envies [G14] its own class by taking a DayDateargument. I made it a\ntrue instance method and clarified a few names.")]),e._v(" "),a("p",[e._v("Refactoring weekInMonthToString(lines 742–761) turned out to be very interesting\nindeed. Using the refactoring tools of my IDE, I first moved the method to the WeekInMonth\nenum that I created back on page 275. Then I renamed the method to toString. Next, I\nchanged it from a static method to an instance method. All the tests still passed. (Can you\nguess where I am going?)")]),e._v(" "),a("p",[e._v("Next, I deleted the method entirely! Five asserts failed (lines 411–415, Listing B-4,\npage 374). I changed these lines to use the names of the enumerators (FIRST,\nSECOND,.. .). All the tests passed. Can you see why? Can you also see why each of these\nsteps was necessary? The refactoring tool made sure that all previous callers of\nweekInMonthToStringnow called toStringon the weekInMonthenumerator because all enu-\nmerators implement toString to simply return their names")]),e._v(" "),a("p",[e._v("Unfortunately, I was a bit too clever. As elegant as that wonderful chain of refactor-\nings was, I finally realized that the only users of this function were the tests I had just mod-\nified, so I deleted the tests.")]),e._v(" "),a("p",[e._v("Fool me once, shame on you. Fool me twice, shame on me! So after determining that\nnobody other than the tests called relativeToString(lines 765–781), I simply deleted the\nfunction and its tests.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("offsetToTarget += 7;\nreturn plusDays(offsetToTarget);\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public DayDate getNearestDayOfWeek(final Day targetDay) {\nint offsetToThisWeeksTarget = targetDay.index - getDayOfWeek().index;\nint offsetToFutureTarget = (offsetToThisWeeksTarget + 7) % 7;\nint offsetToPreviousTarget = offsetToFutureTarget - 7;\nif (offsetToFutureTarget > 3)\nreturn plusDays(offsetToPreviousTarget);\nelse\nreturn plusDays(offsetToFutureTarget);\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public DayDate getEndOfMonth() {\nMonth month = getMonth();\nint year = getYear();\nint lastDay = lastDayOfMonth(month, year);\nreturn DayDateFactory.makeDate(lastDay, month, year);\n}\n")])])]),a("p",[e._v("282 "),a("strong",[e._v("Chapter 16: Refactoring SerialDate")])]),e._v(" "),a("p",[e._v("We have finally made it to the abstract methods of this abstract class. And the first one\nis as appropriate as they come: toSerial(lines 838–844). Back on page 279 I had changed\nthe name to toOrdinal. Having looked at it in this context, I decided the name should be\nchanged to getOrdinalDay.")]),e._v(" "),a("p",[e._v("The next abstract method is toDate(lines 838–844). It converts a DayDate to a\njava.util.Date. Why is this method abstract? If we look at its implementation in\nSpreadsheetDate(lines 198–207, Listing B-5, page 382), we see that it doesn’t depend on\nanything in the implementation of that class [G6]. So I pushed it up.")]),e._v(" "),a("p",[e._v("ThegetYYYY,getMonth, and getDayOfMonthmethods are nicely abstract. However, the\ngetDayOfWeekmethod is another one that should be pulled up from SpreadSheetDate\nbecause it doesn’t depend on anything that can’t be found in DayDate[G6]. Or does it?")]),e._v(" "),a("p",[e._v("If you look carefully (line 247, Listing B-5, page 382), you’ll see that the algorithm\nimplicitly depends on the origin of the ordinal day (in other words, the day of the week of\nday 0). So even though this function has no physical dependencies that couldn’t be moved\ntoDayDate, it does have a logical dependency.")]),e._v(" "),a("p",[e._v("Logical dependencies like this bother me [G22]. If something logical depends on\nthe implementation, then something physical should too. Also, it seems to me that the\nalgorithm itself could be generic with a much smaller portion of it dependent on the\nimplementation[G6].")]),e._v(" "),a("p",[e._v("So I created an abstract method in DayDatenamedgetDayOfWeekForOrdinalZeroand\nimplemented it in SpreadsheetDateto return Day.SATURDAY. Then I moved the getDayOfWeek\nmethod up to DayDateand changed it to call getOrdinalDayandgetDayOfWeekForOrdinal-\nZero.")]),e._v(" "),a("p",[e._v("As a side note, look carefully at the comment on line 895 through line 899. Was this\nrepetition really necessary? As usual, I deleted this comment along with all the others.")]),e._v(" "),a("p",[e._v("The next method is compare(lines 902–913). Again, this method is inappropriately\nabstract [G6], so I pulled the implementation up into DayDate. Also, the name does not\ncommunicate enough [N1]. This method actually returns the difference in days since the\nargument. So I changed the name to daysSince. Also, I noted that there weren’t any tests\nfor this method, so I wrote them.")]),e._v(" "),a("p",[e._v("The next six functions (lines 915–980) are all abstract methods that should be imple-\nmented in DayDate. So I pulled them all up from SpreadsheetDate.")]),e._v(" "),a("p",[e._v("The last function, isInRange(lines 9 8 2–995) also needs to be pulled up and refac-\ntored. The switchstatement is a bit ugly [G23]and can be replaced by moving the cases\ninto the DateInterval enum.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public Day getDayOfWeek() {\nDay startingDay = getDayOfWeekForOrdinalZero();\nint startingOffset = startingDay.index - Day.SUNDAY.index;\nreturn Day.make((getOrdinalDay() + startingOffset) % 7 + 1);\n}\n")])])]),a("p",[a("strong",[e._v("Then Make It Right")]),e._v(" 283")]),e._v(" "),a("p",[e._v("That brings us to the end of DayDate. So now we’ll make one more pass over the whole\nclass to see how well it flows.")]),e._v(" "),a("p",[e._v("First, the opening comment is long out of date, so I shortened and improved it [C2].\nNext, I moved all the remaining enums out into their own files [G12].\nNext, I moved the static variable (dateFormatSymbols) and three static methods\n(getMonthNames "),a("em",[e._v(",")]),e._v(" isLeapYear "),a("em",[e._v(",")]),e._v(" lastDayOfMonth) into a new class named DateUtil[G6].")]),e._v(" "),a("p",[e._v("I moved the abstract methods up to the top where they belong[G24].\nI changed Month.make to Month.fromInt[N1] and did the same for all the other enums.\nI also created a toInt() accessor for all the enums and made the index field private.")]),e._v(" "),a("p",[e._v("There was some interesting duplication [G5] in plusYearsandplusMonthsthat I was\nable to eliminate by extracting a new method named correctLastDayOfMonth, making the\nall three methods much clearer.")]),e._v(" "),a("p",[e._v("I got rid of the magic number 1 [G25],replacing it with Month.JANUARY.toInt()or\nDay.SUNDAY.toInt(), as appropriate. I spent a little time with SpreadsheetDate, cleaning up\nthe algorithms a bit. The end result is contained in Listing B-7, page 394, through\nListing B-16, page 405.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public enum DateInterval {\nOPEN {\npublic boolean isIn(int d, int left, int right) {\nreturn d > left && d < right;\n}\n},\nCLOSED_LEFT {\npublic boolean isIn(int d, int left, int right) {\nreturn d >= left && d < right;\n}\n},\nCLOSED_RIGHT {\npublic boolean isIn(int d, int left, int right) {\nreturn d > left && d <= right;\n}\n},\nCLOSED {\npublic boolean isIn(int d, int left, int right) {\nreturn d >= left && d <= right;\n}\n};\npublic abstract boolean isIn(int d, int left, int right);\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public boolean isInRange(DayDate d1, DayDate d2, DateInterval interval) {\nint left = Math.min(d1.getOrdinalDay(), d2.getOrdinalDay());\nint right = Math.max(d1.getOrdinalDay(), d2.getOrdinalDay());\nreturn interval.isIn(getOrdinalDay(), left, right);\n}\n")])])]),a("p",[e._v("284 "),a("strong",[e._v("Chapter 16: Refactoring SerialDate")])]),e._v(" "),a("p",[e._v("Interestingly the code coverage in DayDatehas "),a("em",[e._v("decreased")]),e._v(" to 84.9 percent! This is not\nbecause less functionality is being tested; rather it is because the class has shrunk so much\nthat the few uncovered lines have a greater weight. DayDatenow has 45 out of 53 execut-\nable statements covered by tests. The uncovered lines are so trivial that they weren’t worth\ntesting.")]),e._v(" "),a("h2",{attrs:{id:"conclusion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[e._v("#")]),e._v(" Conclusion ..")]),e._v(" "),a("p",[e._v("So once again we’ve followed the Boy Scout Rule. We’ve checked the code in a bit cleaner\nthan when we checked it out. It took a little time, but it was worth it. Test coverage was\nincreased, some bugs were fixed, the code was clarified and shrunk. The next person to\nlook at this code will hopefully find it easier to deal with than we did. That person will also\nprobably be able to clean it up a bit more than we did.")]),e._v(" "),a("h2",{attrs:{id:"bibliography"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bibliography"}},[e._v("#")]),e._v(" Bibliography ...")]),e._v(" "),a("p",[a("strong",[e._v("[GOF]:")]),e._v(" "),a("em",[e._v("Design Patterns: Elements of Reusable Object Oriented Software")]),e._v(" , Gamma et al.,\nAddison-Wesley, 1996.")]),e._v(" "),a("p",[a("strong",[e._v("[Simmons04]:")]),e._v(" "),a("em",[e._v("Hardcore Java")]),e._v(" , Robert Simmons, Jr., O’Reilly, 2004.")]),e._v(" "),a("p",[a("strong",[e._v("[Refactoring]:")]),e._v(" "),a("em",[e._v("Refactoring: Improving the Design of Existing Code")]),e._v(" , Martin Fowler et al.,\nAddison-Wesley, 1999.")]),e._v(" "),a("p",[a("strong",[e._v("[Beck97]:")]),e._v(" "),a("em",[e._v("Smalltalk Best Practice Patterns")]),e._v(" , Kent Beck, Prentice Hall, 1997.")])])}),[],!1,null,null,null);t.default=s.exports}}]);