(window.webpackJsonp=window.webpackJsonp||[]).push([[218],{778:function(e,t,a){"use strict";a.r(t);var s=a(7),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"c-h-a-p-t-e-r-s-i-x"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-h-a-p-t-e-r-s-i-x"}},[e._v("#")]),e._v(" C H A P T E R S I X")]),e._v(" "),a("p",[a("strong",[e._v("Making Comments Precise and Compact")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("59\n")])])]),a("p",[e._v("The previous chapter was about realizing "),a("em",[e._v("what")]),e._v(" you should be commenting. This chapter is")]),e._v(" "),a("p",[e._v("about "),a("em",[e._v("how")]),e._v(" to write comments that are precise and compact.")]),e._v(" "),a("p",[e._v("If you're going to write a comment at all, it might as well be "),a("em",[e._v("precise")]),e._v(" —as specific and detailed as")]),e._v(" "),a("p",[e._v("possible. On the other hand, comments take up extra space on the screen, and take extra time")]),e._v(" "),a("p",[e._v("to read. So comments should also be "),a("em",[e._v("compact")]),e._v(".")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("K E Y I D E A")]),e._v(" "),a("p",[e._v("Comments should have a high information-to-space ratio.")])]),e._v(" "),a("p",[e._v("The rest of the chapter shows examples of how to do this.")]),e._v(" "),a("h3",{attrs:{id:"keep-comments-compact"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keep-comments-compact"}},[e._v("#")]),e._v(" Keep Comments Compact")]),e._v(" "),a("p",[e._v("Here’s an example of a comment for a C++ type definition:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// The int is the CategoryType.\n// The first float in the inner pair is the 'score',\n// the second is the 'weight'.\ntypedef hash_map<int, pair<float, float> > ScoreMap;\n")])])]),a("p",[e._v("But why use three lines to explain it, when you can illustrate it in just one line?")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// CategoryType -> (score, weight)\ntypedef hash_map<int, pair<float, float> > ScoreMap;\n")])])]),a("p",[e._v("Some comments need three lines of space, but this is not one of them.")]),e._v(" "),a("h3",{attrs:{id:"avoid-ambiguous-pronouns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#avoid-ambiguous-pronouns"}},[e._v("#")]),e._v(" Avoid Ambiguous Pronouns")]),e._v(" "),a("p",[e._v("As the classic “Who’s on First?” skit illustrated, pronouns can make things very confusing.")]),e._v(" "),a("p",[e._v("It takes extra work for the reader to “resolve” a pronoun. And in some cases, it’s unclear what")]),e._v(" "),a("p",[e._v("“it” or “this” is referring to. Here’s an example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Insert the data into the cache, but check if it 's too big first.\n")])])]),a("p",[e._v("In this comment, “it” might refer to the data or the cache. You could probably figure that out")]),e._v(" "),a("p",[e._v("by reading the rest of the code. But if you have to do that, what’s the point of the comment?")]),e._v(" "),a("p",[e._v("The safest thing is to “fill in” pronouns if there’s any chance of confusion. In the previous")]),e._v(" "),a("p",[e._v("example, let’s assume “it” was “the data”:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Insert the data into the cache, but check if the data is too big first.\n")])])]),a("p",[e._v("This is the simplest change to make. You could also have restructured the sentence to make")]),e._v(" "),a("p",[e._v("“it” perfectly clear:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// If the data is small enough, insert it into the cache.\n")])])]),a("p",[a("strong",[e._v("60")]),e._v(" CHAPTER SIX")]),e._v(" "),a("h3",{attrs:{id:"polish-sloppy-sentences"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#polish-sloppy-sentences"}},[e._v("#")]),e._v(" Polish Sloppy Sentences")]),e._v(" "),a("p",[e._v("In many cases, making a comment more precise goes hand-in-hand with making it more")]),e._v(" "),a("p",[e._v("compact.")]),e._v(" "),a("p",[e._v("Here is an example from a web crawler:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# Depending on whether we've already crawled this URL before, give it a different priority.\n")])])]),a("p",[e._v("This sentence might seem okay, but compare it to this version:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# Give higher priority to URLs we've never crawled before.\n")])])]),a("p",[e._v("This sentence is simpler, smaller, and more direct. It also explains that "),a("em",[e._v("higher")]),e._v(" priority is given")]),e._v(" "),a("p",[e._v("to uncrawled URLs—the previous comment didn’t contain that information.")]),e._v(" "),a("h3",{attrs:{id:"describe-function-behavior-precisely"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#describe-function-behavior-precisely"}},[e._v("#")]),e._v(" Describe Function Behavior Precisely")]),e._v(" "),a("p",[e._v("Imagine you just wrote a function that counts the number of lines in a file:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Return the number of lines in this file.\nint CountLines(string filename) { ... }\n")])])]),a("p",[e._v("This comment isn’t very precise—there are a lot of ways to define a “line.” Here are some corner")]),e._v(" "),a("p",[e._v("cases to think about:")]),e._v(" "),a("ul",[a("li",[e._v('"" (an empty file)—0 or 1 line?')]),e._v(" "),a("li",[e._v('"hello"—0 or 1 line?')]),e._v(" "),a("li",[e._v('"hello\\n"—1 or 2 lines?')]),e._v(" "),a("li",[e._v('"hello\\n world"—1 or 2 lines?')]),e._v(" "),a("li",[e._v('"hello\\n\\r cruel\\n world\\r"—2, 3, or 4 lines?')])]),e._v(" "),a("p",[e._v("The simplest implementation is to count the number of newline (\\n) characters. (This is the")]),e._v(" "),a("p",[e._v("way the Unix command wc works.) Here’s a better comment to match this implementation:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Count how many newline bytes ('\\n') are in the file.\nint CountLines(string filename) { ... }\n")])])]),a("p",[e._v("This comment isn’t much longer than the first version, but contains much more information.")]),e._v(" "),a("p",[e._v("It tells the reader that the function might return 0 if there are no newlines. It also tells the")]),e._v(" "),a("p",[e._v("reader that carriage returns (\\r) are ignored.")]),e._v(" "),a("h3",{attrs:{id:"use-input-output-examples-that-illustrate-corner-cases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use-input-output-examples-that-illustrate-corner-cases"}},[e._v("#")]),e._v(" Use Input/Output Examples That Illustrate Corner Cases")]),e._v(" "),a("p",[e._v("When it comes to comments, a carefully chosen input/output example can be worth a")]),e._v(" "),a("p",[e._v("thousand words.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("MAKING COMMENTS PRECISE AND COMPACT 61\n")])])]),a("p",[e._v("For example, here’s a common function that removes parts of a string:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Remove the suffix/prefix of 'chars' from the input 'src'.\nString Strip(String src, String chars) { ... }\n")])])]),a("p",[e._v("This comment isn’t very precise because it can’t answer questions such as:")]),e._v(" "),a("ul",[a("li",[e._v("Is chars a whole substring that is to be removed, or effectively just an unordered set of\nletters?")]),e._v(" "),a("li",[e._v("What if there are multiples of chars on the end of src?")])]),e._v(" "),a("p",[e._v("Instead, a well-chosen example can answer these questions:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// ...\n// Example: Strip("abba/a/ba", "ab") returns "/a/"\nString Strip(String src, String chars) { ... }\n')])])]),a("p",[e._v("The example “shows off” the full functionality of Strip(). Note that a simpler example wouldn’t")]),e._v(" "),a("p",[e._v("be as useful, if it doesn’t answer those questions:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// Example: Strip("ab", "a") returns "b"\n')])])]),a("p",[e._v("Here’s another example of a function that could use an illustration:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Rearrange 'v' so that elements < pivot come before those >= pivot;\n// Then return the largest 'i' for which v[i] < pivot (or -1 if none are < pivot)\nint Partition(vector<int>* v, int pivot);\n")])])]),a("p",[e._v("This comment is actually very precise, but a little bit hard to visualize. Here’s an example you")]),e._v(" "),a("p",[e._v("could include to illustrate things further:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// ...\n// Example: Partition([8 5 9 8 2], 8) might result in [5 2 | 8 9 8] and return 1\nint Partition(vector<int>* v, int pivot);\n")])])]),a("p",[e._v("There are a number of points to mention about the specific example input/output we chose:")]),e._v(" "),a("ul",[a("li",[e._v("The pivot is equal to elements in the vector to illustrate that edge case.")]),e._v(" "),a("li",[e._v("We put duplicates in the vector ( 8 ) to illustrate that this is an acceptable input.")]),e._v(" "),a("li",[e._v("The resulting vector is not sorted—if it were, the reader might get the wrong idea.")]),e._v(" "),a("li",[e._v("Because the return value was 1 , we made sure 1 wasn’t also a value in the vector—that\nwould be confusing.")])]),e._v(" "),a("h3",{attrs:{id:"state-the-intent-of-your-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-the-intent-of-your-code"}},[e._v("#")]),e._v(" State the Intent of Your Code")]),e._v(" "),a("p",[e._v("As we mentioned in the previous chapter, commenting is often about telling the reader what")]),e._v(" "),a("p",[e._v("you were thinking about when you wrote the code. Unfortunately, many comments end up")]),e._v(" "),a("p",[e._v("just describing what the code does in literal terms, without adding much new information.")]),e._v(" "),a("p",[a("strong",[e._v("62")]),e._v(" CHAPTER SIX")]),e._v(" "),a("p",[e._v("Here’s an example of such a comment:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("void DisplayProducts(list<Product> products) {\nproducts.sort(CompareProductByPrice);\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Iterate through the list in reverse order\nfor (list<Product>::reverse_iterator it = products.rbegin(); it != products.rend();\n++it)\nDisplayPrice(it->price);\n")])])]),a("h4",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")]),e._v(" }")]),e._v(" "),a("p",[e._v("All this comment does is just describe the line below it. Instead, consider this better comment:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Display each price, from highest to lowest\nfor (list<Product>::reverse_iterator it = products.rbegin(); ... )\n")])])]),a("p",[e._v("This comment explains what the program is doing at a higher level. This is much more in tune")]),e._v(" "),a("p",[e._v("with what the programmer was thinking when she wrote the code.")]),e._v(" "),a("p",[e._v("Interestingly, there is a bug in this program! The CompareProductByPrice function (not shown)")]),e._v(" "),a("p",[e._v("already sorts higher-priced items first. The code is doing the opposite of what the author")]),e._v(" "),a("p",[e._v("intended.")]),e._v(" "),a("p",[e._v("This is a good reason why the second comment is better. Despite the bug, the first comment is")]),e._v(" "),a("p",[e._v("technically correct (the loop does iterate in reverse order). But with the second comment, a")]),e._v(" "),a("p",[e._v("reader is more likely to notice that the intent of the writer (to show higher-priced items first)")]),e._v(" "),a("p",[e._v("contradicts what the code actually does. In effect, the comment acts as a "),a("em",[e._v("redundancy check")]),e._v(".")]),e._v(" "),a("p",[e._v("Ultimately, the best redundancy check is a unit test (see Chapter 14, "),a("em",[e._v("Testing and Readability")]),e._v(" ).")]),e._v(" "),a("p",[e._v("But it’s still worthwhile having comments like these explaining the intent of your program.")]),e._v(" "),a("h3",{attrs:{id:"named-function-parameter-comments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#named-function-parameter-comments"}},[e._v("#")]),e._v(" “Named Function Parameter” Comments")]),e._v(" "),a("p",[e._v("Suppose you saw a function call like this one:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Connect(10, false);\n")])])]),a("p",[e._v("This function call is a bit mysterious because of those integer and boolean literals being")]),e._v(" "),a("p",[e._v("passed in.")]),e._v(" "),a("p",[e._v("In languages like Python, you can assign the arguments by name:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("def Connect(timeout, use_encryption): ...\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# Call the function using named parameters\nConnect( timeout = 10, use_encryption = False)\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("MAKING COMMENTS PRECISE AND COMPACT 63\n")])])]),a("p",[e._v("In languages like C++ and Java, you can’t do this. However, you can use an inline comment")]),e._v(" "),a("p",[e._v("to the same effect:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("void Connect(int timeout, bool use_encryption) { ... }\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Call the function with commented parameters\nConnect( /* timeout_ms = */ 10, /* use_encryption = */ false);\n")])])]),a("p",[e._v("Notice that we “named” the first parameter timeout_ms instead of timeout. Ideally, the function’s")]),e._v(" "),a("p",[e._v("real argument would have been timeout_ms, but if for some reason we can’t make this change,")]),e._v(" "),a("p",[e._v("this is a handy way to “improve” the name.")]),e._v(" "),a("p",[e._v("When it comes to boolean arguments, it’s especially important to put /* name = */ in "),a("em",[e._v("front")]),e._v(" of")]),e._v(" "),a("p",[e._v("the value. Putting the comment "),a("em",[e._v("behind")]),e._v(" the value is very confusing:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Don't do this!\nConnect( ... , false /* use_encryption */ );\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Don't do this either!\nConnect( ... , false /* = use_encryption */ );\n")])])]),a("p",[e._v("In these examples, it’s unclear whether false means “use encryption” or “don’t use")]),e._v(" "),a("p",[e._v("encryption”.")]),e._v(" "),a("p",[e._v("Most function calls don’t need comments like these, but it’s a handy (and compact) way to")]),e._v(" "),a("p",[e._v("explain mysterious-looking arguments.")]),e._v(" "),a("h3",{attrs:{id:"use-information-dense-words"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use-information-dense-words"}},[e._v("#")]),e._v(" Use Information-Dense Words")]),e._v(" "),a("p",[e._v("Once you’ve been programming for a number of years, you notice that the same general")]),e._v(" "),a("p",[e._v("problems and solutions come up repeatedly. Often, there are specific words or phrases that")]),e._v(" "),a("p",[e._v("have been developed to describe these patterns/idioms. Using these words can make your")]),e._v(" "),a("p",[e._v("comments much more compact.")]),e._v(" "),a("p",[e._v("For example, suppose your comment were:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// This class contains a number of members that store the same information as in the\n// database, but are stored here for speed. When this class is read from later, those\n// members are checked first to see if they exist, and if so are returned; otherwise the\n// database is read from and that data stored in those fields for next time.\n")])])]),a("p",[e._v("Instead, you could just say:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// This class acts as a caching layer to the database.\n")])])]),a("p",[e._v("As another example, a comment such as:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// Remove excess whitespace from the street address, and do lots of other cleanup\n// like turn "Avenue" into "Ave." This way, if there are two different street addresses\n// that are typed in slightly differently, they will have the same cleaned-up version and\n// we can detect that these are equal.\n')])])]),a("p",[e._v("could instead be:")]),e._v(" "),a("p",[a("strong",[e._v("64")]),e._v(" CHAPTER SIX")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// Canonicalize the street address (remove extra spaces, "Avenue" -> "Ave.", etc.)\n')])])]),a("p",[e._v("There are lots of words and phrases that pack a lot of meaning, such as “heuristic,” “brute-")]),e._v(" "),a("p",[e._v("force,” “naive solution,” and the like. If you have a comment that feels a bit long-winded, see")]),e._v(" "),a("p",[e._v("if it can be described as a typical programming situation.")]),e._v(" "),a("h3",{attrs:{id:"summary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#summary"}},[e._v("#")]),e._v(" Summary")]),e._v(" "),a("p",[e._v("This chapter is about writing comments that pack as much information into as small a space")]),e._v(" "),a("p",[e._v("as possible. Here are the specific tips:")]),e._v(" "),a("ul",[a("li",[e._v("Avoid pronouns like “it” and “this” when they can refer to multiple things.")]),e._v(" "),a("li",[e._v("Describe a function’s behavior with as much precision as is practical.")]),e._v(" "),a("li",[e._v("Illustrate your comments with carefully chosen input/output examples.")]),e._v(" "),a("li",[e._v("State the high-level intent of your code, rather than the obvious details.")]),e._v(" "),a("li",[e._v("Use inline comments (e.g., Function(/* arg = */ ... ) ) to explain mysterious function\narguments.")]),e._v(" "),a("li",[e._v("Keep your comments brief by using words that pack a lot of meaning.")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("MAKING COMMENTS PRECISE AND COMPACT 65\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);