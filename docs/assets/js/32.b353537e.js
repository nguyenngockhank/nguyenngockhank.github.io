(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{426:function(t,a,s){t.exports=s.p+"assets/img/image--044.582ae702.jpg"},512:function(t,a,s){t.exports=s.p+"assets/img/image--043.d8199a87.jpg"},798:function(t,a,s){"use strict";s.r(a);var e=s(7),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"chapter-11-graph-databases"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chapter-11-graph-databases"}},[t._v("#")]),t._v(" Chapter 11. Graph Databases")]),t._v(" "),e("p",[t._v("Graph databases allow you to store entities and relationships between these entities. Entities are also\nknown as nodes, which have properties. Think of a node as an instance of an object in the application.\nRelations are known as edges that can have properties. Edges have directional significance; nodes\nare organized by relationships which allow you to find interesting patterns between the nodes. The\norganization of the graph lets the data to be stored once and then interpreted in different ways based\non relationships.")]),t._v(" "),e("h2",{attrs:{id:"_11-1-what-is-a-graph-database"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-1-what-is-a-graph-database"}},[t._v("#")]),t._v(" 11.1. What Is a Graph Database?")]),t._v(" "),e("p",[t._v("In the example graph in Figure 11.1, we see a bunch of nodes related to each other. Nodes are entities\nthat have properties, such as name. The node of Martin is actually a "),e("strong",[t._v("node")]),t._v(" that has "),e("strong",[t._v("property")]),t._v(" of name set to Martin.")]),t._v(" "),e("p",[e("img",{attrs:{src:s(512),alt:"img"}})]),t._v(" "),e("p",[e("strong",[t._v("Figure 11.1. An example graph structure")])]),t._v(" "),e("p",[t._v("We also see that edges have types, such as likes, author, and so on. These properties let us\norganize the nodes; for example, the nodes Martin and Pramod have an "),e("strong",[t._v("edge")]),t._v(" connecting them with a\nrelationship type of friend. Edges can have multiple properties. We can assign a property of since\non the friend relationship type between Martin and Pramod. Relationship types have directional\nsignificance; the friend relationship type is bidirectional but likes is not. When Dawn likes")]),t._v(" "),e("p",[t._v("NoSQL Distilled, it does not automatically mean NoSQL Distilled likes Dawn.")]),t._v(" "),e("p",[t._v("Once we have a graph of these nodes and edges created, we can query the graph in many ways,\nsuch as “get all nodes employed by Big Co that like NoSQL Distilled.” A query on the graph is\nalso known as "),e("strong",[t._v("traversing")]),t._v(" the graph. An advantage of the graph databases is that we can change the\ntraversing requirements without having to change the nodes or edges. If we want to “get all nodes that\nlike NoSQL Distilled,” we can do so without having to change the existing data or the model of\nthe database, because we can traverse the graph any way we like.")]),t._v(" "),e("p",[t._v("Usually, when we store a graph-like structure in RDBMS, it’s for a single type of relationship\n(“who is my manager” is a common example). Adding another relationship to the mix usually means a\nlot of schema changes and data movement, which is not the case when we are using graph databases.\nSimilarly, in relational databases we model the graph beforehand based on the Traversal we want;\nif the Traversal changes, the data will have to change.")]),t._v(" "),e("p",[t._v("In graph databases, traversing the joins or relationships is very fast. The relationship between\nnodes is not calculated at query time but is actually persisted as a relationship. Traversing persisted\nrelationships is faster than calculating them for every query.")]),t._v(" "),e("p",[t._v("Nodes can have different types of relationships between them, allowing you to both represent\nrelationships between the domain entities and to have secondary relationships for things like\ncategory, path, time-trees, quad-trees for spatial indexing, or linked lists for sorted access. Since\nthere is no limit to the number and kind of relationships a node can have, all they can be represented\nin the same graph database.")]),t._v(" "),e("h2",{attrs:{id:"_11-2-features"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-features"}},[t._v("#")]),t._v(" 11.2. Features")]),t._v(" "),e("p",[t._v("There are many graph databases available, such as Neo4J [Neo4J], Infinite Graph [Infinite Graph],\nOrientDB [OrientDB], or FlockDB [FlockDB] (which is a special case: a graph database that only\nsupports single-depth relationships or adjacency lists, where you cannot traverse more than one level\ndeep for relationships). We will take Neo4J as a representative of the graph database solutions to\ndiscuss how they work and how they can be used to solve application problems.")]),t._v(" "),e("p",[t._v("In Neo4J, creating a graph is as simple as creating two nodes and then creating a relationship. Let’s\ncreate two nodes, Martin and Pramod:")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" martin "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" graphDb"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createNode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmartin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setProperty")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Martin"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" pramod "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" graphDb"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createNode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\npramod"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setProperty")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Pramod"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("We have assigned the name property of the two nodes the values of Martin and Pramod. Once we\nhave more than one node, we can create a relationship:")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[t._v("martin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createRelationshipTo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pramod"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" FRIEND"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\npramod"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createRelationshipTo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("martin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" FRIEND"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("We have to create relationship between the nodes in both directions, for the direction of the\nrelationship matters: For example, a product node can be liked by user but the product cannot like")]),t._v(" "),e("p",[t._v("the user. This directionality helps in designing a rich domain model (Figure 11.2). Nodes know\nabout INCOMING and OUTGOING relationships that are traversable both ways.")]),t._v(" "),e("p",[e("img",{attrs:{src:s(426),alt:"img"}})]),t._v(" "),e("p",[e("strong",[t._v("Figure 11.2. Relationships with properties")])]),t._v(" "),e("p",[t._v("Relationships are first-class citizens in graph databases; most of the value of graph databases is\nderived from the relationships. Relationships don’t only have a type, a start node, and an end node,\nbut can have properties of their own. Using these properties on the relationships, we can add\nintelligence to the relationship—for example, since when did they become friends, what is the\ndistance between the nodes, or what aspects are shared between the nodes. These properties on the\nrelationships can be used to query the graph.")]),t._v(" "),e("p",[t._v("Since most of the power from the graph databases comes from the relationships and their\nproperties, a lot of thought and design work is needed to model the relationships in the domain that\nwe are trying to work with. Adding new relationship types is easy; changing existing nodes and their\nrelationships is similar to data migration (“Migrations in Graph Databases,” p. 131 ), because these\nchanges will have to be done on each node and each relationship in the existing data.")]),t._v(" "),e("h3",{attrs:{id:"_11-2-1-consistency"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-1-consistency"}},[t._v("#")]),t._v(" "),e("strong",[t._v("11.2.1. Consistency")])]),t._v(" "),e("p",[t._v("Since graph databases are operating on connected nodes, most graph database solutions usually do\nnot support distributing the nodes on different servers. There are some solutions, however, that\nsupport node distribution across a cluster of servers, such as Infinite Graph. Within a single server,\ndata is always consistent, especially in Neo4J which is fully ACID-compliant. When running Neo4J\nin a cluster, a write to the master is eventually synchronized to the slaves, while slaves are always\navailable for read. Writes to slaves are allowed and are immediately synchronized to the master;")]),t._v(" "),e("p",[t._v("other slaves will not be synchronized immediately, though—they will have to wait for the data to\npropagate from the master.")]),t._v(" "),e("p",[t._v("Graph databases ensure consistency through transactions. They do not allow dangling\nrelationships: The start node and end node always have to exist, and nodes can only be deleted if they\ndon’t have any relationships attached to them.")]),t._v(" "),e("h3",{attrs:{id:"_11-2-2-transactions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-2-transactions"}},[t._v("#")]),t._v(" "),e("strong",[t._v("11.2.2. Transactions")])]),t._v(" "),e("p",[t._v("Neo4J is ACID-compliant. Before changing any nodes or adding any relationships to existing nodes,\nwe have to start a transaction. Without wrapping operations in transactions, we will get a\nNotInTransactionException. Read operations can be done without initiating a transaction.")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Transaction")]),t._v(" transaction "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" database"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("beginTx")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" node "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" database"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createNode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    node"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setProperty")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"NoSQL Distilled"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    node"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setProperty")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"published"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2012"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    transaction"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("success")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    transaction"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("finish")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("In the above code, we started a transaction on the database, then created a node and set properties\non it. We marked the transaction as success and finally completed it by finish. A transaction has to\nbe marked as success, otherwise Neo4J assumes that it was a failure and rolls it back when finish\nis issued. Setting success without issuing finish also does not commit the data to the database. This\nway of managing transactions has to be remembered when developing, as it differs from the standard\nway of doing transactions in an RDBMS.")]),t._v(" "),e("h3",{attrs:{id:"_11-2-3-availability"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-3-availability"}},[t._v("#")]),t._v(" "),e("strong",[t._v("11.2.3. Availability")])]),t._v(" "),e("p",[t._v("Neo4J, as of version 1.8, achieves high availability by providing for replicated slaves. These slaves\ncan also handle writes: When they are written to, they synchronize the write to the current master, and\nthe write is committed first at the master and then at the slave. Other slaves will eventually get the\nupdate. Other graph databases, such as Infinite Graph and FlockDB, provide for distributed storage of\nthe nodes.")]),t._v(" "),e("p",[t._v("Neo4J uses the Apache ZooKeeper [ZooKeeper] to keep track of the last transaction IDs persisted\non each slave node and the current master node. Once a server starts up, it communicates with\nZooKeeper and finds out which server is the master. If the server is the first one to join the cluster, it\nbecomes the master; when a master goes down, the cluster elects a master from the available nodes,\nthus providing high availability.")]),t._v(" "),e("h3",{attrs:{id:"_11-2-4-query-features"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-4-query-features"}},[t._v("#")]),t._v(" "),e("strong",[t._v("11.2.4. Query Features")])]),t._v(" "),e("p",[t._v("Graph databases are supported by query languages such as Gremlin [Gremlin]. Gremlin is a domain-\nspecific language for traversing graphs; it can traverse all graph databases that implement the\nBlueprints [Blueprints] property graph. Neo4J also has the Cypher [Cypher] query language for\nquerying the graph. Outside these query languages, Neo4J allows you to query the graph for\nproperties of the nodes, traverse the graph, or navigate the nodes relationships using language\nbindings.")]),t._v(" "),e("p",[t._v("Properties of a node can be indexed using the indexing service. Similarly, properties of\nrelationships or edges can be indexed, so a node or edge can be found by the value. Indexes should be\nqueried to find the starting node to begin a traversal. Let’s look at searching for the node using node\nindexing.")]),t._v(" "),e("p",[t._v("If we have the graph shown in Figure 11.1, we can index the nodes as they are added to the\ndatabase, or we can index all the nodes later by iterating over them. We first need to create an index\nfor the nodes using the "),e("strong",[t._v("IndexManager")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Index")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" nodeIndex "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" graphDb"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("index")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("forNodes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nodes"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("We are indexing the nodes for the name property. Neo4J uses Lucene [Lucene] as its indexing\nservice. We will see later that we can also use the full-text search capability of Lucene. When new\nnodes are created, they can be added to the index.")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Transaction")]),t._v(" transaction "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" graphDb"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("beginTx")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Index")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" nodeIndex "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" graphDb"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("index")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("forNodes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nodes"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    nodeIndex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("martin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" martin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getProperty")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    nodeIndex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pramod"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pramod"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getProperty")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    transaction"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("success")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    transaction"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("finish")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("Adding nodes to the index is done inside the context of a transaction. Once the nodes are indexed,\nwe can search them using the indexed property. If we search for the node with the name of Barbara,\nwe would query the index for the property of name to have a value of Barbara.")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" node "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nodeIndex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Barbara"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSingle")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("We get the node whose name is Martin; given the node, we can get all its relationships.")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" martin "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nodeIndex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Martin"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSingle")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nallRelationships "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" martin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRelationships")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("We can get both INCOMING or OUTGOING relationships.")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[t._v("incomingRelations "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" martin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRelationships")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Direction")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("INCOMING"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("We can also apply directional filters on the queries when querying for a relationship. With the\ngraph in Figure 11.1, if we want to find all people who like NoSQL Distilled, we can find the\nNoSQL Distilled node and then get its relationships with Direction.INCOMING. At this point we\ncan also add the type of relationship to the query filter, since we are looking only for nodes that LIKE\nNoSQL Distilled.")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" nosqlDistilled "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nodeIndex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"NoSQL Distilled"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSingle")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nrelationships "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nosqlDistilled"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRelationships")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("INCOMING"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" LIKES"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Relationship")]),t._v(" relationship "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" relationships"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    likesNoSQLDistilled"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("relationship"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getStartNode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("Finding nodes and their immediate relations is easy, but this can also be achieved in RDBMS\ndatabases. Graph databases are really powerful when you want to traverse the graphs at any depth\nand specify a starting node for the traversal. This is especially useful when you are trying to find\nnodes that are related to the starting node at more than one level down. As the depth of the graph\nincreases, it makes more sense to traverse the relationships by using a Traverser where you can\nspecify that you are looking for INCOMING, OUTGOING, or BOTH types of relationships. You can also\nmake the traverser go top-down or sideways on the graph by using Order values of BREADTH_FIRST\nor DEPTH_FIRST. The traversal has to start at some node—in this example, we try to find all the\nnodes at any depth that are related as a FRIEND with Barbara:")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" barbara "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nodeIndex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Barbara"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSingle")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Traverser")]),t._v(" friendsTraverser "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" barbara"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("traverse")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("BREADTH_FIRST"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StopEvaluator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("END_OF_GRAPH"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReturnableEvaluator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ALL_BUT_START_NODE"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EdgeType")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FRIEND"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Direction")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OUTGOING\n                            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("The friendsTraverser provides us a way to find all the nodes that are related to Barbara where\nthe relationship type is FRIEND. The nodes can be at any depth—friend of a friend at any level—\nallowing you to explore tree structures.")]),t._v(" "),e("p",[t._v("One of the good features of graph databases is finding paths between two nodes—determining if\nthere are multiple paths, finding all of the paths or the shortest path. In the graph in Figure 11.1, we\nknow that Barbara is connected to Jill by two distinct paths; to find all these paths and the distance\nbetween Barbara and Jill along those different paths, we can use")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" barbara "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nodeIndex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Barbara"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSingle")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" jill "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nodeIndex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Jill"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSingle")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PathFinder")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Path")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" finder "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GraphAlgoFactory")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("allPaths")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Traversal")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("expanderForTypes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FRIEND"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Direction")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OUTGOING"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n            MAX_DEPTH\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterable")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Path")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" paths "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" finder"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("findAllPaths")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("barbara"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" jill"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("This feature is used in social networks to show relationships between any two nodes. To find all\nthe paths and the distance between the nodes for each path, we first get a list of distinct paths between\nthe two nodes. The length of each path is the "),e("strong",[t._v("number of hops")]),t._v(" on the graph needed to reach the\ndestination node from the start node. Often, you need to get the shortest path between two nodes; of\nthe two paths from Barbara to Jill, the shortest path can be found by using")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PathFinder")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Path")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" finder "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GraphAlgoFactory")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("shortestPath")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Traversal")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("expanderForTypes")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FRIEND"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Direction")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OUTGOING"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n                MAX_DEPTH\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterable")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Path")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" paths "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" finder"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("findAllPaths")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("barbara"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" jill"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("Many other graph algorithms can be applied to the graph at hand, such as Dijkstra’s algorithm")]),t._v(" "),e("p",[t._v("[Dijkstra’s] for finding the shortest or cheapest path between nodes.")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("START")]),t._v(" beginingNode "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beginning node specification"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MATCH")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("relationship"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pattern matches"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("filtering condition: "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("data")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" nodes "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" relationships"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RETURN")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("What "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(": nodes"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" relationships"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" properties"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("properties "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nSKIP "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nodes "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" skip "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("top")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LIMIT")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit")]),t._v(" results"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Neo4J also provides the "),e("strong",[t._v("Cypher")]),t._v(" query language to query the graph. Cypher needs a node to START\nthe query. The start node can be identified by its node ID, a list of node IDs, or index lookups. Cypher\nuses the MATCH keyword for matching patterns in relationships; the WHERE keyword filters the\nproperties on a node or relationship. The RETURN keyword specifies what gets returned by the query\n—nodes, relationships, or fields on the nodes or relationships.")]),t._v(" "),e("p",[t._v("Cypher also provides methods to ORDER, AGGREGATE, SKIP, and LIMIT the data. In Figure 11.2, we\nfind all nodes connected to Barbara, either incoming or outgoing, by using the --.")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("START")]),t._v(" barbara "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node:nodeIndex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Barbara"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MATCH")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("barbara"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--(connected_node)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RETURN")]),t._v(" connected_node\n")])])]),e("p",[t._v("When interested in directional significance, we can use")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MATCH")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("barbara"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--(connected_node)")]),t._v("\n")])])]),e("p",[t._v("for incoming relationships or")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MATCH")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("barbara"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--\x3e(connected_node)")]),t._v("\n")])])]),e("p",[t._v("for outgoing relationships. Match can also be done on specific relationships using the\n"),e("code",[t._v(":RELATIONSHIP_TYPE")]),t._v(" convention and returning the required fields or nodes.")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("START")]),t._v(" barbara "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node:nodeIndex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Barbara"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MATCH")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("barbara"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(":FRIEND"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("friend_node"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RETURN")]),t._v(" friend_node"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("friend_node"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("location\n")])])]),e("p",[t._v("We start with Barbara, find all outgoing relationships with the type of FRIEND, and return the\nfriends’ names. The relationship type query only works for the depth of one level; we can make it\nwork for greater depths and find out the depth of each of the result nodes.")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("START")]),t._v(" barbara"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("node:nodeIndex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Barbara"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MATCH")]),t._v(" path "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" barbara"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(":FRIEND"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v(".3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("end_node\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RETURN")]),t._v(" barbara"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end_node"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Similarly, we can query for relationships where a particular relationship property exists. We can\nalso filter on the properties of relationships and query if a property exists or not.")]),t._v(" "),e("div",{staticClass:"language-sql extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("START")]),t._v(" barbara "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node:nodeIndex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Barbara"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MATCH")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("barbara"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("relation"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("related_node"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("relation"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'FRIEND'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" relation"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("share")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RETURN")]),t._v(" related_node"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" relation"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("since\n")])])]),e("p",[t._v("There are many other query features in the Cypher language that can be used to query database\ngraphs.")]),t._v(" "),e("h3",{attrs:{id:"_11-2-5-scaling"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-5-scaling"}},[t._v("#")]),t._v(" "),e("strong",[t._v("11.2.5. Scaling")])]),t._v(" "),e("p",[t._v("In NoSQL databases, one of the commonly used scaling techniques is sharding, where data is split\nand distributed across different servers. With graph databases, sharding is difficult, as graph\ndatabases are not aggregate-oriented but relationship-oriented. Since any given node can be related to\nany other node, storing related nodes on the same server is better for graph traversal. Traversing a\ngraph when the nodes are on different machines is not good for performance. Knowing this limitation\nof the graph databases, we can still scale them using some common techniques described by Jim\nWebber [Webber Neo4J Scaling].")]),t._v(" "),e("p",[t._v("Generally speaking, there are three ways to scale graph databases. Since machines now can come\nwith lots of RAM, we can add enough RAM to the server so that the working set of nodes and\nrelationships is held entirely in memory. This technique is only helpful if the dataset that we are\nworking with will fit in a realistic amount of RAM.")]),t._v(" "),e("p",[t._v("We can improve the read scaling of the database by adding more slaves with read-only access to\nthe data, with all the writes going to the master. This pattern of writing once and reading from many\nservers is a proven technique in MySQL clusters and is really useful when the dataset is large enough\nto not fit in a single machine’s RAM, but small enough to be replicated across multiple machines.\nSlaves can also contribute to availability and read-scaling, as they can be configured to never become\na master, remaining always read-only.")]),t._v(" "),e("p",[t._v("When the dataset size makes replication impractical, we can shard (see the “Sharding” section on\np. 38 ) the data from the application side using domain-specific knowledge. For example, nodes that\nrelate to the North America can be created on one server while the nodes that relate to Asia on\nanother. This application-level sharding needs to understand that nodes are stored on physically\ndifferent databases (Figure 11.3).")]),t._v(" "),e("p",[e("img",{attrs:{src:s(426),alt:"img"}})]),t._v(" "),e("p",[e("strong",[t._v("Figure 11.3. Application-level sharding of nodes")])]),t._v(" "),e("h2",{attrs:{id:"_11-3-suitable-use-cases"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-3-suitable-use-cases"}},[t._v("#")]),t._v(" 11.3. Suitable Use Cases")]),t._v(" "),e("p",[t._v("Let’s look at some suitable use cases for graph databases.")]),t._v(" "),e("h3",{attrs:{id:"_11-3-1-connected-data"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-3-1-connected-data"}},[t._v("#")]),t._v(" "),e("strong",[t._v("11.3.1. Connected Data")])]),t._v(" "),e("p",[t._v("Social networks are where graph databases can be deployed and used very effectively. These social\ngraphs don’t have to be only of the friend kind; for example, they can represent employees, their\nknowledge, and where they worked with other employees on different projects. Any link-rich domain\nis well suited for graph databases.")]),t._v(" "),e("p",[t._v("If you have relationships between domain entities from different domains (such as social, spatial,\ncommerce) in a single database, you can make these relationships more valuable by providing the\nability to traverse across domains.")]),t._v(" "),e("h3",{attrs:{id:"_11-3-2-routing-dispatch-and-location-based-services"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-3-2-routing-dispatch-and-location-based-services"}},[t._v("#")]),t._v(" "),e("strong",[t._v("11.3.2. Routing, Dispatch, and Location-Based Services")])]),t._v(" "),e("p",[t._v("Every location or address that has a delivery is a node, and all the nodes where the delivery has to be\nmade by the delivery person can be modeled as a graph of nodes. Relationships between nodes can\nhave the property of distance, thus allowing you to deliver the goods in an efficient manner. Distance\nand location properties can also be used in graphs of places of interest, so that your application can\nprovide recommendations of good restaurants or entertainment options nearby. You can also create\nnodes for your points of sales, such as bookstores or restaurants, and notify the users when they are\nclose to any of the nodes to provide location-based services.")]),t._v(" "),e("h3",{attrs:{id:"_11-3-3-recommendation-engines"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-3-3-recommendation-engines"}},[t._v("#")]),t._v(" "),e("strong",[t._v("11.3.3. Recommendation Engines")])]),t._v(" "),e("p",[t._v("As nodes and relationships are created in the system, they can be used to make recommendations like\n“your friends also bought this product” or “when invoicing this item, these other items are usually\ninvoiced.” Or, it can be used to make recommendations to travelers mentioning that when other")]),t._v(" "),e("p",[t._v("visitors come to Barcelona they usually visit Antonio Gaudi’s creations.")]),t._v(" "),e("p",[t._v("An interesting side effect of using the graph databases for recommendations is that as the data size\ngrows, the number of nodes and relationships available to make the recommendations quickly\nincreases. The same data can also be used to mine information—for example, which products are\nalways bought together, or which items are always invoiced together; alerts can be raised when these\nconditions are not met. Like other recommendation engines, graph databases can be used to search for\npatterns in relationships to detect fraud in transactions.")]),t._v(" "),e("h2",{attrs:{id:"_11-4-when-not-to-use"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-4-when-not-to-use"}},[t._v("#")]),t._v(" 11.4. When Not to Use")]),t._v(" "),e("p",[t._v("In some situations, graph databases may not appropriate. When you want to update all or a subset of\nentities—for example, in an analytics solution where all entities may need to be updated with a\nchanged property—graph databases may not be optimal since changing a property on all the nodes is\nnot a straightforward operation. Even if the data model works for the problem domain, some\ndatabases may be unable to handle lots of data, especially in global graph operations (those involving\nthe whole graph).")])])}),[],!1,null,null,null);a.default=n.exports}}]);