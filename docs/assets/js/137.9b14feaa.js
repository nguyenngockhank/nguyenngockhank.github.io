(window.webpackJsonp=window.webpackJsonp||[]).push([[137],{743:function(t,e,a){"use strict";a.r(e);var n=a(7),o=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"code-refactoring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#code-refactoring"}},[t._v("#")]),t._v(" Code Refactoring")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Refactoring")]),t._v(" "),a("p",[t._v("Refactoring is the process of changing a software system in such a way that it does not alter the external behavior of the code yet improves its internal structure. It is a disciplined way to clean up code that minimizes the chances of introducing bugs. In essence when you refactor you are "),a("strong",[t._v("improving the design of the code after it has been written")]),t._v(".")])]),t._v(" "),a("p",[t._v("Refactoring c√≥ th·ªÉ th·ª±c hi·ªán ·ªü nhi·ªÅu m·ª©c ƒë·ªô")]),t._v(" "),a("ul",[a("li",[t._v("H·ªá th·ªëng")]),t._v(" "),a("li",[t._v("Ch·ª©c nƒÉng")]),t._v(" "),a("li",[t._v("File/Class")]),t._v(" "),a("li",[t._v("Method/Functions.")])]),t._v(" "),a("p",[t._v('T√πy theo nh·ªØng m·ª©c ƒë·ªô n√†y th√¨ "c·∫•u tr√∫c b√™n trong" "h√†nh vi b√™n ngo√†i" "h·ªá th·ªëng" s·∫Ω ƒë∆∞·ª£c hi·ªÉu kh√°c nhau.')]),t._v(" "),a("h2",{attrs:{id:"clean-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#clean-code"}},[t._v("#")]),t._v(" Clean Code ???")]),t._v(" "),a("collapse",{attrs:{"title-tag":"h4"},scopedSlots:t._u([{key:"title",fn:function(){return[t._v("\n        üí• Clean code is obvious for other programmers.\n    ")]},proxy:!0}])},[t._v("\n    And I‚Äôm not talking about super sophisticated algorithms. Poor variable naming, bloated classes and methods, magic numbers -you name it- all of that makes code sloppy and difficult to grasp.\n")]),t._v(" "),a("collapse",{attrs:{"title-tag":"h4"},scopedSlots:t._u([{key:"title",fn:function(){return[t._v("\n       üí• Clean code doesn‚Äôt contain duplication.\n    ")]},proxy:!0}])},[t._v("\n    Each time you have to make a change in a duplicate code, you have to remember to make the same change to every instance. This increases the cognitive load and slows down the progress.\n")]),t._v(" "),a("collapse",{attrs:{"title-tag":"h4"},scopedSlots:t._u([{key:"title",fn:function(){return[t._v("\n       üí• Clean code contains a minimal number of classes and other moving parts.\n    ")]},proxy:!0}])},[t._v("\n    Less code is less stuff to keep in your head. Less code is less maintenance. Less code is fewer bugs. Code is liability, keep it short and simple.\n")]),t._v(" "),a("collapse",{attrs:{"title-tag":"h4"},scopedSlots:t._u([{key:"title",fn:function(){return[t._v("\n    üí• Clean code passes all tests.\n    ")]},proxy:!0}])},[t._v("\n    You know your code is dirty when only 95% of your tests passed. You know you‚Äôre screwed when you test coverage is 0%.\n")]),t._v(" "),a("p",[a("strong",[t._v("üí• Clean code is easier and cheaper to maintain!")])]),t._v(" "),a("h2",{attrs:{id:"when-to-refactor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#when-to-refactor"}},[t._v("#")]),t._v(" When to refactor")]),t._v(" "),a("collapse",{attrs:{title:"üí• Rule of Three",show:!1}},[a("ol",[a("li",[t._v("When you‚Äôre doing something for the first time, just get it done.")]),t._v(" "),a("li",[t._v("When you‚Äôre doing something similar for the second time, cringe at having to repeat but do the same thing anyway.")]),t._v(" "),a("li",[t._v("When you‚Äôre doing something for the third time, start refactoring.")])])]),t._v(" "),a("collapse",{attrs:{title:"üí• When adding a feature",show:!1}},[a("ul",[a("li",[t._v("Refactoring helps you understand other people‚Äôs code. If you have to deal with someone else‚Äôs dirty code, try to refactor it first. Clean code is much easier to grasp. You will improve it not only for yourself but also for those who use it after you.")]),t._v(" "),a("li",[t._v("Refactoring makes it easier to add new features. It‚Äôs much easier to make changes in clean code.")])])]),t._v(" "),a("collapse",{attrs:{title:"üí• When fixing a bug",show:!1}},[t._v("\nBugs in code behave just like those in real life: they live in the darkest, dirtiest places in the code. Clean your code and the errors will practically discover themselves.\n"),a("br"),t._v("\nManagers appreciate proactive refactoring as it eliminates the need for special refactoring tasks later. Happy bosses make happy programmers!\n")]),t._v(" "),a("collapse",{attrs:{title:"üí• During a code review",show:!1}},[t._v("\nThe code review may be the last chance to tidy up the code before it becomes available to the public.\n"),a("br"),t._v("\nIt‚Äôs best to perform such reviews in a pair with an author. This way you could fix simple problems quickly and gauge the time for fixing the more difficult ones.\n")]),t._v(" "),a("ul",[a("li",[t._v("khi ch√∫ng ta nh·∫≠n th·ª©c r·∫±ng m√£ v√† / ho·∫∑c m·ª•c ƒë√≠ch c·ªßa n√≥ l√† kh√¥ng r√µ r√†ng")]),t._v(" "),a("li",[t._v("khi ch√∫ng ta ph√°t hi·ªán code smells (1 thu·∫≠t ng·ªØ ƒë·ªÉ ch·ªâ c√°c ƒëo·∫°n m√£ t·ªìi t·ªá), v√† ƒë√≥ xem nh∆∞ r·∫±ng c√≥ m·ªôt v·∫•n ƒë·ªÅ.")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Code smells")]),t._v(" "),a("p",[t._v("l√† b·∫•t k·ª≥ tri·ªáu ch·ª©ng b·∫•t ·ªïn n√†o b√™n trong m√£ ngu·ªìn c·ªßa m·ªôt ch∆∞∆°ng tr√¨nh, m√† v√¨ n√≥ c√≥ th·ªÉ s·∫Ω d·∫´n ƒë·∫øn c√°c v·∫•n ƒë·ªÅ l·ªõn h∆°n.")]),t._v(" "),a("ul",[a("li",[t._v("kh√¥ng ph·∫£i l√† bugs (l·ªói l·∫≠p tr√¨nh), nghƒ©a l√† ch√∫ng kh√¥ng l√†m sai ch·ª© nƒÉng c·ªßa ·ª©ng d·ª•ng.")]),t._v(" "),a("li",[t._v("bi·ªÉu hi·ªán c·ªßa s·ª± y·∫øu k√©m trong thi·∫øt k·∫ø v√† s·∫Ω l√†m cho qu√° tr√¨nh ph√°t tri·ªÉn ·ª©ng d·ª•ng b·ªã ch·∫≠m l·∫°i ho·∫∑c tƒÉng nguy c∆° c·ªßa bugs ho·∫∑c l·ªói trong t∆∞∆°ng lai.")])])]),t._v(" "),a("h2",{attrs:{id:"principles"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#principles"}},[t._v("#")]),t._v(" Principles")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("The Two Hats")]),t._v(" "),a("p",[t._v("When you use refactoring to develop software, you divide your time between two distinct activities: adding function and refactoring. When you add function, you shouldn't be changing existing code; you are just adding\nnew capabilities")])]),t._v(" "),a("h2",{attrs:{id:"ƒëieu-gi-ngan-can-code-refactoring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ƒëieu-gi-ngan-can-code-refactoring"}},[t._v("#")]),t._v(" ƒêi·ªÅu g√¨ ngƒÉn c·∫£n code refactoring?")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("Ki·∫øn th·ª©c")]),t._v(": v√≠ d·ª• ko c√≥ hi·ªÉu bi·∫øt s√¢u s·∫Øc v·ªÅ OOP th√¨ code ban ƒë·∫ßu vi·∫øt ra s·∫Ω r·∫•t ‚Äúd·ªü‚Äù nh∆∞ng quan tr·ªçng l√† h·ªç ho√†n to√†n kh√¥ng bi·∫øt r·∫±ng n√≥ ‚Äúd·ªü‚Äù.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Ch·∫•p nh·∫≠n")]),t._v(": Sau m·ªôt th·ªùi gian d√†i, nh√≥m nh·∫≠n ra c√≥ r·∫•t nhi·ªÅu ƒëo·∫°n code ‚Äúd·ªü‚Äù nh∆∞ng nh√≥m v·∫´n ch·∫•p nh·∫≠n b·ªüi s·ªë l∆∞·ª£ng code ‚Äúd·ªü‚Äù l√† qu√° nhi·ªÅu v√† c√≥ t∆∞ t∆∞·ªüng ch·∫•p nh·∫≠n ‚Äús·ªëng chung v·ªõi l≈©‚Äù, ho·∫∑c nghƒ© t·ªõi vi·ªác vi·∫øt l·∫°i to√†n b·ªô h·ªá th·ªëng.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Kh√¥ng c√≥ th·ªùi gian")]),t._v(":  ƒê√¢y l√† l√Ω do kh√° x√°c ƒë√°ng; kh√°ch h√†ng ho√†n to√†n kh√¥ng nh·∫≠n ƒë∆∞·ª£c l·ª£i √≠ch tr·ª±c ti·∫øp t·ª´ code refactoring, n√™n kh√≥ thuy·∫øt ph·ª•c h·ªç tr·∫£ ti·ªÅn cho nh√≥m ph√°t tri·ªÉn th·ª±c hi·ªán code refactoring.")])]),t._v(" "),a("li",[a("p",[t._v("One problem area for refactoring is "),a("strong",[t._v("databases")]),t._v(". Most business applications are tightly coupled to\nthe database schema that supports them. That's one reason that the database is difficult to\nchange. Another reason is data migration. Even if you have carefully layered your system to\nminimize the dependencies between the database schema and the object model, changing the\ndatabase schema forces you to migrate the data, which can be a long and fraught task.")])])]),t._v(" "),a("h2",{attrs:{id:"checklist-of-refactoring-done-right-way"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#checklist-of-refactoring-done-right-way"}},[t._v("#")]),t._v(" Checklist of refactoring done right way")]),t._v(" "),a("Collapse",{attrs:{title:"‚úîÔ∏è The code should become cleaner."}},[a("p",[t._v("If the code remains just as unclean after refactoring... well, I‚Äôm sorry, but you‚Äôve just wasted an hour of your life. Try to figure out why this happened.")]),t._v(" "),a("p",[t._v("It frequently happens when you move away from refactoring with small changes and mix a whole bunch of refactorings into one big change. So it‚Äôs very easy to lose your mind, especially if you have a time limit.")]),t._v(" "),a("p",[t._v("But it can also happen when working with extremely sloppy code. Whatever you improve, the code as a whole remains a disaster.")]),t._v(" "),a("p",[t._v("In this case, it‚Äôs worthwhile to think about completely rewriting parts of the code. But before that, you should have written tests and set aside a good chunk of time. Otherwise, you‚Äôll end up with the kinds of results we talked about in the first paragraph.")])]),a("Collapse",{attrs:{title:"‚úîÔ∏è New functionality shouldn‚Äôt be created during refactoring."}},[a("p",[t._v("Don‚Äôt mix refactoring and direct development of new features. Try to separate these processes at least within the confines of individual commits.")])]),a("Collapse",{attrs:{title:"‚úîÔ∏è All existing tests must pass after refactoring."}},[a("p",[t._v("There are two cases when tests can break down after refactoring:")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("You made an error during refactoring.")]),t._v(" This one is a no-brainer: go ahead and fix the error.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Your tests were too low-level")]),t._v(". For example, you were testing private methods of classes.")]),t._v(" "),a("p",[t._v("In this case, the tests are to blame. You can either refactor the tests themselves or write an entirely new set of higher-level tests. A great way to avoid this kind of a situation is to write BDD-style tests.")])])])]),a("h2",{attrs:{id:"tips"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tips"}},[t._v("#")]),t._v(" Tips")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("When you find you have to add a feature to a program, and the program's code is not\nstructured in a convenient way to add the feature, first refactor the program to make it\neasy to add the feature, then add the feature.")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v('"The First Step in Refactoring"')]),t._v(" "),a("p",[t._v("Before you start refactoring, check that you have a solid suite of tests. These tests\nmust be self-checking.")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Refactoring changes the programs in small steps. If you make a mistake, it is easy to\nfind the bug.")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Any fool can write code that a computer can understand. Good programmers write code that humans can understand.")])]),t._v(" "),a("h2",{attrs:{id:"refs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#refs"}},[t._v("#")]),t._v(" Refs")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://refactoring.com/catalog/",target:"_blank",rel:"noopener noreferrer"}},[t._v("S√ÅCH GI√ÅO KHOA"),a("OutboundLink")],1),t._v(" x·ªãn s√≤ do anh "),a("code",[t._v("Martin Fowler")]),t._v(" ƒë·∫°i hi·ªáp ch·ªâ gi√°o =))")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://refactoring.guru/refactoring/what-is-refactoring",target:"_blank",rel:"noopener noreferrer"}},[t._v("web s·ªãn s√≤ hay"),a("OutboundLink")],1)])])],1)}),[],!1,null,null,null);e.default=o.exports}}]);