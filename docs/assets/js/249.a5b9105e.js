(window.webpackJsonp=window.webpackJsonp||[]).push([[249],{816:function(e,t,n){"use strict";n.r(t);var a=n(7),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_5-formatting"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-formatting"}},[e._v("#")]),e._v(" 5. Formatting")]),e._v(" "),n("p",[e._v("When people look under the hood, we want them to be impressed with the neatness, con-\nsistency, and attention to detail that they perceive. We want them to be struck by the\norderliness. We want their eyebrows to rise as they scroll through the modules. We want\nthem to perceive that professionals have been at work. If instead they see a scrambled\nmass of code that looks like it was written by a bevy of drunken sailors, then they are\nlikely to conclude that the same inattention to detail pervades every other aspect of the\nproject.")]),e._v(" "),n("p",[e._v("You should take care that your code is nicely formatted. You should choose a set of\nsimple rules that govern the format of your code, and then you should consistently apply\nthose rules. If you are working on a team, then the team should agree to a single set of\nformatting rules and all members should comply. It helps to have an automated tool that\ncan apply those formatting rules for you.")]),e._v(" "),n("h2",{attrs:{id:"the-purpose-of-formatting"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#the-purpose-of-formatting"}},[e._v("#")]),e._v(" The Purpose of Formatting")]),e._v(" "),n("p",[e._v("First of all, let’s be clear. Code formatting is "),n("em",[e._v("important")]),e._v(". It is too important to ignore and\nit is too important to treat religiously. Code formatting is about communication, and\ncommunication is the professional developer’s first order of business.")]),e._v(" "),n("p",[e._v("Perhaps you thought that “getting it working” was the first order of business for a\nprofessional developer. I hope by now, however, that this book has disabused you of that\nidea. The functionality that you create today has a good chance of changing in the next\nrelease, but the readability of your code will have a profound effect on all the changes\nthat will ever be made. The coding style and readability set precedents that continue to\naffect maintainability and extensibility long after the original code has been changed\nbeyond recognition. Your style and discipline survives, even though your code does not.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("So what are the formatting issues that help us to communicate best?\n")])])]),n("h2",{attrs:{id:"vertical-formatting"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vertical-formatting"}},[e._v("#")]),e._v(" Vertical Formatting .")]),e._v(" "),n("p",[e._v("Let’s start with vertical size. How big should a source file be? In Java, file size is closely\nrelated to class size. We’ll talk about class size when we talk about classes. For the\nmoment let’s just consider file size.")]),e._v(" "),n("p",[e._v("How big are most Java source files? It turns out that there is a huge range of sizes and\nsome remarkable differences in style. Figure 5-1 shows some of those differences.")]),e._v(" "),n("p",[e._v("Seven different projects are depicted. Junit, FitNesse, testNG, Time and Money,\nJDepend, Ant, and Tomcat. The lines through the boxes show the minimum and maxi-\nmum file lengths in each project. The box shows approximately one-third (one standard\ndeviation^1 ) of the files. The middle of the box is the mean. So the average file size in the\nFitNesse project is about 65 lines, and about one-third of the files are between 40 and\n100+ lines. The largest file in FitNesse is about 400 lines and the smallest is 6 lines.\nNote that this is a log scale, so the small difference in vertical position implies a very\nlarge difference in absolute size.")]),e._v(" "),n("ol",[n("li",[e._v("The box shows sigma/2 above and below the mean. Yes, I know that the file length distribution is not normal, and so the stan-\ndard deviation is not mathematically precise. But we’re not trying for precision here. We’re just trying to get a feel.")])]),e._v(" "),n("p",[n("strong",[e._v("Vertical Formatting")]),e._v(" 77")]),e._v(" "),n("p",[e._v("Junit, FitNesse, and Time and Money are composed of relatively small files. None\nare over 500 lines and most of those files are less than 200 lines. Tomcat and Ant, on the\nother hand, have some files that are several thousand lines long and close to half are over\n200 lines.")]),e._v(" "),n("p",[e._v("What does that mean to us? It appears to be possible to build significant systems\n(FitNesse is close to 50,000 lines) out of files that are typically 200 lines long, with an\nupper limit of 500. Although this should not be a hard and fast rule, it should be considered\nvery desirable. Small files are usually easier to understand than large files are.")]),e._v(" "),n("h3",{attrs:{id:"the-newspaper-metaphor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#the-newspaper-metaphor"}},[e._v("#")]),e._v(" The Newspaper Metaphor")]),e._v(" "),n("p",[e._v("Think of a well-written newspaper article. You read it vertically. At the top you expect a\nheadline that will tell you what the story is about and allows you to decide whether it is\nsomething you want to read. The first paragraph gives you a synopsis of the whole story,\nhiding all the details while giving you the broad-brush concepts. As you continue down-\nward, the details increase until you have all the dates, names, quotes, claims, and other\nminutia.")]),e._v(" "),n("p",[e._v("We would like a source file to be like a newspaper article. The name should be simple\nbut explanatory. The name, by itself, should be sufficient to tell us whether we are in the\nright module or not. The topmost parts of the source file should provide the high-level")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Figure 5-1\nFile length distributions LOG scale (box height = sigma)\n")])])]),n("p",[e._v("78 "),n("strong",[e._v("Chapter 5: Formatting")])]),e._v(" "),n("p",[e._v("concepts and algorithms. Detail should increase as we move downward, until at the end\nwe find the lowest level functions and details in the source file.")]),e._v(" "),n("p",[e._v("A newspaper is composed of many articles; most are very small. Some are a bit larger.\nVery few contain as much text as a page can hold. This makes the newspaper "),n("em",[e._v("usable")]),e._v(". If the\nnewspaper were just one long story containing a disorganized agglomeration of facts,\ndates, and names, then we simply would not read it.")]),e._v(" "),n("h3",{attrs:{id:"vertical-openness-between-concepts"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vertical-openness-between-concepts"}},[e._v("#")]),e._v(" Vertical Openness Between Concepts ..")]),e._v(" "),n("p",[e._v("Nearly all code is read left to right and top to bottom. Each line represents an expression or\na clause, and each group of lines represents a complete thought. Those thoughts should be\nseparated from each other with blank lines.")]),e._v(" "),n("p",[e._v("Consider, for example, Listing 5-1. There are blank lines that separate the package\ndeclaration, the import(s), and each of the functions. This extremely simple rule has a pro-\nfound effect on the visual layout of the code. Each blank line is a visual cue that identifies\na new and separate concept. As you scan down the listing, your eye is drawn to the first\nline that follows a blank line.")]),e._v(" "),n("p",[e._v("Taking those blank lines out, as in Listing 5-2, has a remarkably obscuring effect on the\nreadability of the code.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing 5-1\nBoldWidget.java\npackage fitnesse.wikitext.widgets;\nimport java.util.regex.*;\npublic class BoldWidget extends ParentWidget {\npublic static final String REGEXP = \"'''.+?'''\";\nprivate static final Pattern pattern = Pattern.compile(\"'''(.+?)'''\",\nPattern.MULTILINE + Pattern.DOTALL\n);\npublic BoldWidget(ParentWidget parent, String text) throws Exception {\nsuper(parent);\nMatcher match = pattern.matcher(text);\nmatch.find();\naddChildWidgets(match.group(1));\n}\npublic String render() throws Exception {\nStringBuffer html = new StringBuffer(\"<b>\");\nhtml.append(childHtml()).append(\"</b>\");\nreturn html.toString();\n}\n}\n")])])]),n("p",[n("strong",[e._v("Vertical Formatting")]),e._v(" 79")]),e._v(" "),n("p",[e._v("This effect is even more pronounced when you unfocus your eyes. In the first example\nthe different groupings of lines pop out at you, whereas the second example looks like a\nmuddle. The difference between these two listings is a bit of vertical openness.")]),e._v(" "),n("h3",{attrs:{id:"vertical-density"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vertical-density"}},[e._v("#")]),e._v(" Vertical Density")]),e._v(" "),n("p",[e._v("If openness separates concepts, then vertical density implies close association. So lines\nof code that are tightly related should appear vertically dense. Notice how the useless\ncomments in Listing 5-3 break the close association of the two instance variables.")]),e._v(" "),n("p",[e._v("Listing 5-4 is much easier to read. It fits in an “eye-full,” or at least it does for me. I\ncan look at it and see that this is a class with two variables and a method, without having to\nmove my head or eyes much. The previous listing forces me to use much more eye and\nhead motion to achieve the same level of comprehension.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing 5-2\nBoldWidget.java\npackage fitnesse.wikitext.widgets;\nimport java.util.regex.*;\npublic class BoldWidget extends ParentWidget {\npublic static final String REGEXP = \"'''.+?'''\";\nprivate static final Pattern pattern = Pattern.compile(\"'''(.+?)'''\",\nPattern.MULTILINE + Pattern.DOTALL);\npublic BoldWidget(ParentWidget parent, String text) throws Exception {\nsuper(parent);\nMatcher match = pattern.matcher(text);\nmatch.find();\naddChildWidgets(match.group(1));}\npublic String render() throws Exception {\nStringBuffer html = new StringBuffer(\"<b>\");\nhtml.append(childHtml()).append(\"</b>\");\nreturn html.toString();\n}\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing 5-3\npublic class ReporterConfig {\n/**\n* The class name of the reporter listener\n*/\nprivate String m_className;\n/**\n* The properties of the reporter listener\n*/\nprivate List<Property> m_properties = new ArrayList<Property>();\npublic void addProperty(Property property) {\nm_properties.add(property);\n}\n")])])]),n("p",[e._v("80 "),n("strong",[e._v("Chapter 5: Formatting")])]),e._v(" "),n("h3",{attrs:{id:"vertical-distance"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vertical-distance"}},[e._v("#")]),e._v(" Vertical Distance ..")]),e._v(" "),n("p",[e._v("Have you ever chased your tail through a class, hopping from one function to the next,\nscrolling up and down the source file, trying to divine how the functions relate and\noperate, only to get lost in a rat’s nest of confusion? Have you ever hunted up the chain of\ninheritance for the definition of a variable or function? This is frustrating because you are\ntrying to understand "),n("em",[e._v("what")]),e._v(" the system does, but you are spending your time and mental\nenergy on trying to locate and remember "),n("em",[e._v("where")]),e._v(" the pieces are.")]),e._v(" "),n("p",[e._v("Concepts that are closely related should be kept vertically close to each other [G10].\nClearly this rule doesn’t work for concepts that belong in separate files. But then closely\nrelated concepts should not be separated into different files unless you have a very good\nreason. Indeed, this is one of the reasons that protected variables should be avoided.")]),e._v(" "),n("p",[e._v("For those concepts that are so closely related that they belong in the same source file,\ntheir vertical separation should be a measure of how important each is to the understand-\nability of the other. We want to avoid forcing our readers to hop around through our source\nfiles and classes.")]),e._v(" "),n("p",[n("strong",[e._v("Variable Declarations.")]),e._v(" Variables should be declared as close to their usage as possi-\nble. Because our functions are very short, local variables should appear a the top of each\nfunction, as in this longish function from Junit4.3.1.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private static void readPreferences() {\nInputStream is= null;\ntry {\nis= new FileInputStream(getPreferencesFile());\nsetPreferences(new Properties(getPreferences()));\ngetPreferences().load(is);\n} catch (IOException e) {\ntry {\nif (is != null)\nis.close();\n} catch (IOException e1) {\n}\n}\n}\n")])])]),n("p",[e._v("Control variables for loops should usually be declared within the loop statement, as in this\ncute little function from the same source.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing 5-4\npublic class ReporterConfig {\nprivate String m_className;\nprivate List<Property> m_properties = new ArrayList<Property>();\npublic void addProperty(Property property) {\nm_properties.add(property);\n}\n")])])]),n("p",[n("strong",[e._v("Vertical Formatting")]),e._v(" 81")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public int countTestCases() {\nint count= 0;\nfor ( Test each : tests)\ncount += each.countTestCases();\nreturn count;\n}\n")])])]),n("p",[e._v("In rare cases a variable might be declared at the top of a block or just before a loop in a\nlong-ish function. You can see such a variable in this snippet from the midst of a very long\nfunction in TestNG.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("...\nfor (XmlTest test : m_suite.getTests()) {\nTestRunner tr = m_runnerFactory.newTestRunner(this, test);\ntr.addListener(m_textReporter);\nm_testRunners.add(tr);\ninvoker = tr.getInvoker();\nfor (ITestNGMethod m : tr.getBeforeSuiteMethods()) {\nbeforeSuiteMethods.put(m.getMethod(), m);\n}\nfor (ITestNGMethod m : tr.getAfterSuiteMethods()) {\nafterSuiteMethods.put(m.getMethod(), m);\n}\n}\n...\n")])])]),n("p",[n("strong",[e._v("Instance variables,")]),e._v(" on the other hand, should be declared at the top of the class. This\nshould not increase the vertical distance of these variables, because in a well-designed\nclass, they are used by many, if not all, of the methods of the class.")]),e._v(" "),n("p",[e._v("There have been many debates over where instance variables should go. In C++ we\ncommonly practiced the so-called "),n("em",[e._v("scissors rule")]),e._v(" , which put all the instance variables at the\nbottom. The common convention in Java, however, is to put them all at the top of the class.\nI see no reason to follow any other convention. The important thing is for the instance vari-\nables to be declared in one well-known place. Everybody should know where to go to see\nthe declarations.")]),e._v(" "),n("p",[e._v("Consider, for example, the strange case of the TestSuiteclass in JUnit 4.3.1. I have\ngreatly attenuated this class to make the point. If you look about halfway down the listing,\nyou will see two instance variables declared there. It would be hard to hide them in a better\nplace. Someone reading this code would have to stumble across the declarations by acci-\ndent (as I did).")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class TestSuite implements Test {\nstatic public Test createTest(Class<? extends TestCase> theClass,\nString name) {\n...\n}\n")])])]),n("p",[e._v("82 "),n("strong",[e._v("Chapter 5: Formatting")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public static Constructor<? extends TestCase>\ngetTestConstructor(Class<? extends TestCase> theClass)\nthrows NoSuchMethodException {\n...\n}\npublic static Test warning(final String message) {\n...\n}\nprivate static String exceptionToString(Throwable t) {\n...\n}\nprivate String fName;\nprivate Vector<Test> fTests= new Vector<Test>(10);\npublic TestSuite() {\n}\npublic TestSuite(final Class<? extends TestCase> theClass) {\n...\n}\npublic TestSuite(Class<? extends TestCase> theClass, String name) {\n...\n}\n... ... ... ... ...\n}\n")])])]),n("p",[n("strong",[e._v("Dependent Functions.")]),e._v(" If one function calls another, they should be vertically close,\nand the caller should be above the callee, if at all possible. This gives the program a natural\nflow. If the convention is followed reliably, readers will be able to trust that function defini-\ntions will follow shortly after their use. Consider, for example, the snippet from FitNesse\nin Listing 5-5. Notice how the topmost function calls those below it and how they in turn\ncall those below them. This makes it easy to find the called functions and greatly enhances\nthe readability of the whole module.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('Listing 5-5\nWikiPageResponder.java\npublic class WikiPageResponder implements SecureResponder {\nprotected WikiPage page;\nprotected PageData pageData;\nprotected String pageTitle;\nprotected Request request;\nprotected PageCrawler crawler;\npublic Response makeResponse(FitNesseContext context, Request request)\nthrows Exception {\nString pageName = getPageNameOrDefault(request, "FrontPage");\n')])])]),n("p",[n("strong",[e._v("Vertical Formatting")]),e._v(" 83")]),e._v(" "),n("p",[e._v('As an aside, this snippet provides a nice example of keeping constants at the appropri-\nate level [G35]. The "FrontPage" constant could have been buried in the\ngetPageNameOrDefaultfunction, but that would have hidden a well-known and expected\nconstant in an inappropriately low-level function. It was better to pass that constant down\nfrom the place where it makes sense to know it to the place that actually uses it.')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("loadPage(pageName, context);\nif (page == null)\nreturn notFoundResponse(context, request);\nelse\nreturn makePageResponse(context);\n}\nprivate String getPageNameOrDefault(Request request, String defaultPageName)\n{\nString pageName = request.getResource();\nif (StringUtil.isBlank(pageName))\npageName = defaultPageName;\nreturn pageName;\n}\nprotected void loadPage(String resource, FitNesseContext context)\nthrows Exception {\nWikiPagePath path = PathParser.parse(resource);\ncrawler = context.root.getPageCrawler();\ncrawler.setDeadEndStrategy(new VirtualEnabledPageCrawler());\npage = crawler.getPage(context.root, path);\nif (page != null)\npageData = page.getData();\n}\nprivate Response notFoundResponse(FitNesseContext context, Request request)\nthrows Exception {\nreturn new NotFoundResponder().makeResponse(context, request);\n}\nprivate SimpleResponse makePageResponse(FitNesseContext context)\nthrows Exception {\npageTitle = PathParser.render(crawler.getFullPath(page));\nString html = makeHtml(context);\nSimpleResponse response = new SimpleResponse();\nresponse.setMaxAge(0);\nresponse.setContent(html);\nreturn response;\n}\n...\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing 5-5 (continued)\nWikiPageResponder.java\n")])])]),n("p",[e._v("84 "),n("strong",[e._v("Chapter 5: Formatting")])]),e._v(" "),n("p",[n("strong",[e._v("Conceptual Affinity.")]),e._v(" Certain bits of code "),n("em",[e._v("want")]),e._v("\nto be near other bits. They have a certain\nconceptual affinity. The stronger that affinity, the\nless vertical distance there should be between\nthem.")]),e._v(" "),n("p",[e._v("As we have seen, this affinity might be based\non a direct dependence, such as one function call-\ning another, or a function using a variable. But\nthere are other possible causes of affinity. Affinity\nmight be caused because a group of functions per-\nform a similar operation. Consider this snippet of\ncode from Junit 4.3.1:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class Assert {\nstatic public void assertTrue(String message, boolean condition) {\nif (!condition)\nfail(message);\n}\nstatic public void assertTrue(boolean condition) {\nassertTrue(null, condition);\n}\nstatic public void assertFalse(String message, boolean condition) {\nassertTrue(message, !condition);\n}\nstatic public void assertFalse(boolean condition) {\nassertFalse(null, condition);\n}\n")])])]),n("p",[e._v("These functions have a strong conceptual affinity because they share a common naming\nscheme and perform variations of the same basic task. The fact that they call each other is\nsecondary. Even if they didn’t, they would still want to be close together.")]),e._v(" "),n("h3",{attrs:{id:"vertical-ordering"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vertical-ordering"}},[e._v("#")]),e._v(" Vertical Ordering ..")]),e._v(" "),n("p",[e._v("In general we want function call dependencies to point in the downward direction. That is,\na function that is called should be below a function that does the calling.^2 This creates a\nnice flow down the source code module from high level to low level.")]),e._v(" "),n("p",[e._v("As in newspaper articles, we expect the most important concepts to come first, and\nwe expect them to be expressed with the least amount of polluting detail. We expect the\nlow-level details to come last. This allows us to skim source files, getting the gist from the")]),e._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[e._v("This is the exact opposite of languages like Pascal, C, and C++ that enforce functions to be defined, or at least declared,\n"),n("em",[e._v("before")]),e._v(" they are used.")])]),e._v(" "),n("p",[n("strong",[e._v("Horizontal Formatting")]),e._v(" 85")]),e._v(" "),n("p",[e._v("first few functions, without having to immerse ourselves in the details. Listing 5-5 is\norganized this way. Perhaps even better examples are Listing 15-5 on page 263, and List-\ning 3-7 on page 50.")]),e._v(" "),n("h2",{attrs:{id:"horizontal-formatting"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#horizontal-formatting"}},[e._v("#")]),e._v(" Horizontal Formatting")]),e._v(" "),n("p",[e._v("How wide should a line be? To answer that, let’s look at how wide lines are in typical pro-\ngrams. Again, we examine the seven different projects. Figure 5-2 shows the distribution\nof line lengths of all seven projects. The regularity is impressive, especially right around\n45 characters. Indeed, every size from 20 to 60 represents about 1 percent of the total\nnumber of lines. That’s 40 percent! Perhaps another 30 percent are less than 10 characters\nwide. Remember this is a log scale, so the linear appearance of the drop-off above 80 char-\nacters is really very significant. Programmers clearly prefer short lines.")]),e._v(" "),n("p",[e._v("This suggests that we should strive to keep our lines short. The old Hollerith limit of\n80 is a bit arbitrary, and I’m not opposed to lines edging out to 100 or even 120. But\nbeyond that is probably just careless.")]),e._v(" "),n("p",[e._v("I used to follow the rule that you should never have to scroll to the right. But monitors\nare too wide for that nowadays, and younger programmers can shrink the font so small")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Figure 5-2\nJava line width distribution\n")])])]),n("p",[e._v("86 "),n("strong",[e._v("Chapter 5: Formatting")])]),e._v(" "),n("p",[e._v("that they can get 200 characters across the screen. Don’t do that. I personally set my limit\nat 120.")]),e._v(" "),n("h3",{attrs:{id:"horizontal-openness-and-density"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#horizontal-openness-and-density"}},[e._v("#")]),e._v(" Horizontal Openness and Density")]),e._v(" "),n("p",[e._v("We use horizontal white space to associate things that are strongly related and disassociate\nthings that are more weakly related. Consider the following function:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private void measureLine(String line) {\nlineCount++;\nint lineSize = line.length();\ntotalChars += lineSize;\nlineWidthHistogram.addLine(lineSize, lineCount);\nrecordWidestLine(lineSize);\n}\n")])])]),n("p",[e._v("I surrounded the assignment operators with white space to accentuate them. Assignment\nstatements have two distinct and major elements: the left side and the right side. The\nspaces make that separation obvious.")]),e._v(" "),n("p",[e._v("On the other hand, I didn’t put spaces between the function names and the opening\nparenthesis. This is because the function and its arguments are closely related. Separat-\ning them makes them appear disjoined instead of conjoined. I separate arguments within\nthe function call parenthesis to accentuate the comma and show that the arguments are\nseparate.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Another use for white space is to accentuate the precedence of operators.\npublic class Quadratic {\npublic static double root1(double a, double b, double c) {\ndouble determinant = determinant(a, b, c);\nreturn (-b + Math.sqrt(determinant)) / (2*a);\n}\npublic static double root2(int a, int b, int c) {\ndouble determinant = determinant(a, b, c);\nreturn (-b - Math.sqrt(determinant)) / (2*a);\n}\nprivate static double determinant(double a, double b, double c) {\nreturn b*b - 4*a*c;\n}\n}\n")])])]),n("p",[e._v("Notice how nicely the equations read. The factors have no white space between them\nbecause they are high precedence. The terms are separated by white space because addi-\ntion and subtraction are lower precedence.")]),e._v(" "),n("p",[e._v("Unfortunately, most tools for reformatting code are blind to the precedence of\noperators and impose the same spacing throughout. So subtle spacings like those\nshown above tend to get lost after you reformat the code.")]),e._v(" "),n("p",[n("strong",[e._v("Horizontal Formatting")]),e._v(" 87")]),e._v(" "),n("h3",{attrs:{id:"horizontal-alignment"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#horizontal-alignment"}},[e._v("#")]),e._v(" Horizontal Alignment ...")]),e._v(" "),n("p",[e._v("When I was an assembly language programmer,^3 I used horizontal alignment to accentuate\ncertain structures. When I started coding in C, C++, and eventually Java, I continued to try\nto line up all the variable names in a set of declarations, or all the rvalues in a set of assign-\nment statements. My code might have looked like this:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class FitNesseExpediter implements ResponseSender\n{\nprivate Socket socket;\nprivate InputStream input;\nprivate OutputStream output;\nprivate Request request;\nprivate Response response;\nprivate FitNesseContext context;\nprotected long requestParsingTimeLimit;\nprivate long requestProgress;\nprivate long requestParsingDeadline;\nprivate boolean hasError;\npublic FitNesseExpediter(Socket s,\nFitNesseContext context) throws Exception\n{\nthis.context = context;\nsocket = s;\ninput = s.getInputStream();\noutput = s.getOutputStream();\nrequestParsingTimeLimit = 10000;\n}\n")])])]),n("p",[e._v("I have found, however, that this kind of alignment is not useful. The alignment seems to\nemphasize the wrong things and leads my eye away from the true intent. For example, in\nthe list of declarations above you are tempted to read down the list of variable names with-\nout looking at their types. Likewise, in the list of assignment statements you are tempted to\nlook down the list of rvalues without ever seeing the assignment operator. To make matters\nworse, automatic reformatting tools usually eliminate this kind of alignment.")]),e._v(" "),n("p",[e._v("So, in the end, I don’t do this kind of thing anymore. Nowadays I prefer unaligned\ndeclarations and assignments, as shown below, because they point out an important defi-\nciency. If I have long lists that need to be aligned, "),n("em",[e._v("the problem is the length of the lists")]),e._v(" , not\nthe lack of alignment. The length of the list of declarations in FitNesseExpediterbelow\nsuggests that this class should be split up.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class FitNesseExpediter implements ResponseSender\n{\nprivate Socket socket;\nprivate InputStream input;\nprivate OutputStream output;\nprivate Request request;\n")])])]),n("ol",{attrs:{start:"3"}},[n("li",[e._v("Who am I kidding? I still am an assembly language programmer. You can take the boy away from the metal, but you can’t\ntake the metal out of the boy!")])]),e._v(" "),n("p",[e._v("88 "),n("strong",[e._v("Chapter 5: Formatting")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("private Response response;\nprivate FitNesseContext context;\nprotected long requestParsingTimeLimit;\nprivate long requestProgress;\nprivate long requestParsingDeadline;\nprivate boolean hasError;\npublic FitNesseExpediter(Socket s, FitNesseContext context) throws Exception\n{\nthis.context = context;\nsocket = s;\ninput = s.getInputStream();\noutput = s.getOutputStream();\nrequestParsingTimeLimit = 10000;\n}\n")])])]),n("h3",{attrs:{id:"indentation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#indentation"}},[e._v("#")]),e._v(" Indentation")]),e._v(" "),n("p",[e._v("A source file is a hierarchy rather like an outline. There is information that pertains to the\nfile as a whole, to the individual classes within the file, to the methods within the classes,\nto the blocks within the methods, and recursively to the blocks within the blocks. Each\nlevel of this hierarchy is a scope into which names can be declared and in which declara-\ntions and executable statements are interpreted.")]),e._v(" "),n("p",[e._v("To make this hierarchy of scopes visible, we indent the lines of source code in pro-\nportion to their position in the hiearchy. Statements at the level of the file, such as most\nclass declarations, are not indented at all. Methods within a class are indented one level\nto the right of the class. Implementations of those methods are implemented one level to\nthe right of the method declaration. Block implementations are implemented one level\nto the right of their containing block, and so on.")]),e._v(" "),n("p",[e._v("Programmers rely heavily on this indentation scheme. They visually line up lines on\nthe left to see what scope they appear in. This allows them to quickly hop over scopes,\nsuch as implementations of iforwhilestatements, that are not relevant to their current\nsituation. They scan the left for new method declarations, new variables, and even new\nclasses. Without indentation, programs would be virtually unreadable by humans.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Consider the following programs that are syntactically and semantically identical:\npublic class FitNesseServer implements SocketServer { private FitNesseContext\ncontext; public FitNesseServer(FitNesseContext context) { this.context =\ncontext; } public void serve(Socket s) { serve(s, 10000); } public void\nserve(Socket s, long requestTimeout) { try { FitNesseExpediter sender = new\nFitNesseExpediter(s, context);\nsender.setRequestParsingTimeLimit(requestTimeout); sender.start(); }\ncatch(Exception e) { e.printStackTrace(); } } }\n-----\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class FitNesseServer implements SocketServer {\nprivate FitNesseContext context;\n")])])]),n("p",[n("strong",[e._v("Horizontal Formatting")]),e._v(" 89")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public FitNesseServer(FitNesseContext context) {\nthis.context = context;\n}\npublic void serve(Socket s) {\nserve(s, 10000);\n}\npublic void serve(Socket s, long requestTimeout) {\ntry {\nFitNesseExpediter sender = new FitNesseExpediter(s, context);\nsender.setRequestParsingTimeLimit(requestTimeout);\nsender.start();\n}\ncatch (Exception e) {\ne.printStackTrace();\n}\n}\n}\n")])])]),n("p",[e._v("Your eye can rapidly discern the structure of the indented file. You can almost instantly\nspot the variables, constructors, accessors, and methods. It takes just a few seconds to real-\nize that this is some kind of simple front end to a socket, with a time-out. The unindented\nversion, however, is virtually impenetrable without intense study.")]),e._v(" "),n("p",[n("strong",[e._v("Breaking Indentation.")]),e._v(" It is sometimes tempting to break the indentation rule for short\nifstatements, short whileloops, or short functions. Whenever I have succumbed to this\ntemptation, I have almost always gone back and put the indentation back in. So I avoid col-\nlapsing scopes down to one line like this:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class CommentWidget extends TextWidget\n{\npublic static final String REGEXP = "^#[^\\r\\n]*(?:(?:\\r\\n)|\\n|\\r)?";\npublic CommentWidget(ParentWidget parent, String text){super(parent, text);}\npublic String render() throws Exception {return ""; }\n}\n')])])]),n("p",[e._v("I prefer to expand and indent the scopes instead, like this:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public class CommentWidget extends TextWidget {\npublic static final String REGEXP = "^#[^\\r\\n]*(?:(?:\\r\\n)|\\n|\\r)?";\npublic CommentWidget(ParentWidget parent, String text) {\nsuper(parent, text);\n}\npublic String render() throws Exception {\nreturn "";\n}\n}\n')])])]),n("p",[e._v("90 "),n("strong",[e._v("Chapter 5: Formatting")])]),e._v(" "),n("h3",{attrs:{id:"dummy-scopes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dummy-scopes"}},[e._v("#")]),e._v(" Dummy Scopes.")]),e._v(" "),n("p",[e._v("Sometimes the body of a whileorforstatement is a dummy, as shown below. I don’t like\nthese kinds of structures and try to avoid them. When I can’t avoid them, I make sure that\nthe dummy body is properly indented and surrounded by braces. I can’t tell you how\nmany times I’ve been fooled by a semicolon silently sitting at the end of a whileloop on\nthe same line. Unless you make that semicolon "),n("em",[e._v("visible")]),e._v(" by indenting it on it’s own line, it’s\njust too hard to see.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("while (dis.read(buf, 0, readBufferSize) != -1)\n;\n")])])]),n("h2",{attrs:{id:"team-rules"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#team-rules"}},[e._v("#")]),e._v(" Team Rules ...")]),e._v(" "),n("p",[e._v("The title of this section is a play on\nwords. Every programmer has his own\nfavorite formatting rules, but if he works\nin a team, then the team rules.")]),e._v(" "),n("p",[e._v("A team of developers should agree\nupon a single formatting style, and then\nevery member of that team should use\nthat style. We want the software to have a\nconsistent style. We don’t want it to appear to have been written by a bunch of disagreeing\nindividuals.")]),e._v(" "),n("p",[e._v("When I started the FitNesse project back in 2002, I sat down with the team to work\nout a coding style. This took about 10 minutes. We decided where we’d put our braces,\nwhat our indent size would be, how we would name classes, variables, and methods, and\nso forth. Then we encoded those rules into the code formatter of our IDE and have stuck\nwith them ever since. These were not the rules that I prefer; they were rules decided by the\nteam. As a member of that team I followed them when writing code in the FitNesse\nproject.")]),e._v(" "),n("p",[e._v("Remember, a good software system is composed of a set of documents that read\nnicely. They need to have a consistent and smooth style. The reader needs to be able to\ntrust that the formatting gestures he or she has seen in one source file will mean the same\nthing in others. The last thing we want to do is add more complexity to the source code by\nwriting it in a jumble of different individual styles.")]),e._v(" "),n("h2",{attrs:{id:"uncle-bob-s-formatting-rules"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#uncle-bob-s-formatting-rules"}},[e._v("#")]),e._v(" Uncle Bob’s Formatting Rules")]),e._v(" "),n("p",[e._v("The rules I use personally are very simple and are illustrated by the code in Listing 5-6.\nConsider this an example of how code makes the best coding standard document.")]),e._v(" "),n("p",[n("strong",[e._v("Uncle Bob’s Formatting Rules")]),e._v(" 91")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('Listing 5-6\nCodeAnalyzer.java\npublic class CodeAnalyzer implements JavaFileAnalysis {\nprivate int lineCount;\nprivate int maxLineWidth;\nprivate int widestLineNumber;\nprivate LineWidthHistogram lineWidthHistogram;\nprivate int totalChars;\npublic CodeAnalyzer() {\nlineWidthHistogram = new LineWidthHistogram();\n}\npublic static List<File> findJavaFiles(File parentDirectory) {\nList<File> files = new ArrayList<File>();\nfindJavaFiles(parentDirectory, files);\nreturn files;\n}\nprivate static void findJavaFiles(File parentDirectory, List<File> files) {\nfor (File file : parentDirectory.listFiles()) {\nif (file.getName().endsWith(".java"))\nfiles.add(file);\nelse if (file.isDirectory())\nfindJavaFiles(file, files);\n}\n}\npublic void analyzeFile(File javaFile) throws Exception {\nBufferedReader br = new BufferedReader(new FileReader(javaFile));\nString line;\nwhile ((line = br.readLine()) != null)\nmeasureLine(line);\n}\nprivate void measureLine(String line) {\nlineCount++;\nint lineSize = line.length();\ntotalChars += lineSize;\nlineWidthHistogram.addLine(lineSize, lineCount);\nrecordWidestLine(lineSize);\n}\nprivate void recordWidestLine(int lineSize) {\nif (lineSize > maxLineWidth) {\nmaxLineWidth = lineSize;\nwidestLineNumber = lineCount;\n}\n}\npublic int getLineCount() {\nreturn lineCount;\n}\npublic int getMaxLineWidth() {\nreturn maxLineWidth;\n}\n')])])]),n("p",[e._v("92 "),n("strong",[e._v("Chapter 5: Formatting")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public int getWidestLineNumber() {\nreturn widestLineNumber;\n}\npublic LineWidthHistogram getLineWidthHistogram() {\nreturn lineWidthHistogram;\n}\npublic double getMeanLineWidth() {\nreturn (double)totalChars/lineCount;\n}\npublic int getMedianLineWidth() {\nInteger[] sortedWidths = getSortedWidths();\nint cumulativeLineCount = 0;\nfor (int width : sortedWidths) {\ncumulativeLineCount += lineCountForWidth(width);\nif (cumulativeLineCount > lineCount/2)\nreturn width;\n}\nthrow new Error("Cannot get here");\n}\nprivate int lineCountForWidth(int width) {\nreturn lineWidthHistogram.getLinesforWidth(width).size();\n}\nprivate Integer[] getSortedWidths() {\nSet<Integer> widths = lineWidthHistogram.getWidths();\nInteger[] sortedWidths = (widths.toArray(new Integer[0]));\nArrays.sort(sortedWidths);\nreturn sortedWidths;\n}\n}\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing 5-6 (continued)\nCodeAnalyzer.java\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);