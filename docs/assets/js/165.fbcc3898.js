(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{740:function(n,t,h){"use strict";h.r(t);var i=h(7),c=Object(i.a)({},(function(){var n=this,t=n.$createElement,h=n._self._c||t;return h("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[h("h1",{attrs:{id:"_41-giao-tiep-giua-cac-tien-trinh-anh-huong-đen-thoi-gian-phan-hoi-cua-ung-dung"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#_41-giao-tiep-giua-cac-tien-trinh-anh-huong-đen-thoi-gian-phan-hoi-cua-ung-dung"}},[n._v("#")]),n._v(" 41: Giao tiếp giữa các tiến trình(*) ảnh hưởng đến thời gian phản hồi của ứng dụng")]),n._v(" "),h("p",[h("strong",[n._v("Thời gian phản hồi")]),n._v(" là một yếu tố quan trọng ảnh hưởng đến khả năng sử dụng phần mềm. Một điều gây khó chịu trong quá trình sử dụng là chờ đợi phản hồi từ hệ thống, đặc biệt là khi sự tương tác với phần mềm liên quan cần lặp đi lặp lại. Chúng tôi cảm thấy phần mềm đang tốn nhiều thời gian và nó gây ảnh hưởng đến năng suất. Tuy vậy, nguyên nhân của thời gian phản hồi kém là không có đủ sự quan tâm từ nhà phát triển, đặc biệt là trong các ứng dụng hiện đại. Nhiều tài liệu về quản lý hiệu suất vẫn tập trung vào cầu trúc dữ liệu và thuật toán, các vấn đề này có thể khác đi trong một số trường hợp nhưng ít có khả năng chi phối hiệu suất trong các ứng dụng doanh nghiệp đa tầng hiện đại ("),h("strong",[n._v("multi-tier enterprise applications")]),n._v(").")]),n._v(" "),h("p",[n._v("Khi hiệu suất là một vấn đề trong nhiều ứng dụng, kinh nghiệm của tôi là việc kiểm tra các cấu trúc dữ liệu và thuật toán không thích hợp để tìm kiếm giải pháp. Thời gian phản hồi phụ thuộc nhiều vào số lượng các giao tiếp từ xa giữa các tiền trình (IPC) để hồi đáp lại một yêu cầu. Mỗi giao tiếp từ xa giữa các tiến trình ảnh hưởng một phần nhỏ vào tổng thời gian phản hồi nhưng sẽ trở nên nghiêm trọng khi các quá trình này phát sinh liên tục.")]),n._v(" "),h("p",[n._v("Một ví dụ điển hình là "),h("strong",[n._v("Ripple Loading")]),n._v(" trong phần mềm có sử dụng object-relational mapping (kỹ thuật chuyển đổi dữ liệu giữa các hệ thống). Ripple Loading mô tả việc thực hiện liên tục các lệnh gọi cơ sở dữ liệu để chọn các dữ liệu cần thiết qua đó xây dựng một biểu đồ cho các đối tượng (như "),h("strong",[n._v("Lazy Load")]),n._v(" trong cuốn sách “Martin Fowler’s Patterns of Enterprise Application Architecture”).")]),n._v(" "),h("p",[n._v("Khi cơ sở dữ liệu của khách hàng là một máy chủ ứng dụng trung cấp để hiển thị một trang web, các yêu cầu từ cơ sở dữ liệu được thực hiện liên tục trong luồng đơn. Độ trễ của mỗi quá trình đơn lẻ sẽ ảnh hưởng đến thời gian phản hồi tổng thể. Ngay cả khi các câu lệnh từ cơ sở dữ liệu chỉ mất 10ms, một trang yêu cầu 1000 câu lệnh (điều này không thật sự phổ biến) sẽ hiển thị mất khoảng 10 giây. Một số ví dụ khác như dịch vụ web, yêu cầu HTTP từ trình duyệt web, dẫn các đối tượng tương phản ("),h("strong",[n._v("distributed object invocation")]),n._v("), yêu cầu trả lời tin nhắn và tương tác bằng lưới dữ liệu ("),h("strong",[n._v("data-grid interaction")]),n._v(") qua các giao thức mạng tùy chỉnh. Cần càng nhiều IPC từ xa để trả lời một yêu cầu, thời gian phản hồi sẽ càng nhiều. Có một số cách hay để giảm số lượng IPC từ xa với mỗi yêu cầu. Một cách trong số đó là áp dụng phân tích cú pháp, tối ưu hóa giao diện giúp thay đổi dữ liệu chính xác cho mục đích hạn chế tối đa các giao tiếp. Một cách khác là song song hóa ("),h("strong",[n._v("parallelize")]),n._v(") các IPC ở bất cứ vị trí nào có thể, nhờ đó thời gian phản hồi tổng thể chủ yếu được tác động bởi IPC có tốc độ xử lí yêu cầu nhanh nhất. Cách thứ ba là lưu trữ kết quả của các IPC trước đó, để có thể tránh được sự ảnh đến cache cục bộ qua tính năng của các IPC.")]),n._v(" "),h("p",[n._v("Khi bạn đang thiết kế một ứng dụng, hãy chú ý đến số lượng IPC trong mỗi yêu cầu. Khi phân tích các ứng dụng có hiệu suất kém, tôi thường nhận ra rằng tỉ lệ giữa các IPC và những yêu cầu là 1/1000. Việc giảm tỉ lệ này, cho dù bằng cách lưu vào cache hoặc song song hóa hay một kỹ thuật nào khác, đều sẽ mang lại nhiều lợi ích hơn so với việc thay đổi cấu trúc dữ liệu hoặc điều chỉnh thuật toán sắp xếp.")]),n._v(" "),h("p",[n._v("(*) Inter-Process Communication (IPC)")])])}),[],!1,null,null,null);t.default=c.exports}}]);