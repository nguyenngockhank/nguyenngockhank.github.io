(window.webpackJsonp=window.webpackJsonp||[]).push([[275],{852:function(t,e,s){"use strict";s.r(e);var a=s(7),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"humble-object-pattern"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#humble-object-pattern"}},[t._v("#")]),t._v(" Humble Object pattern")]),t._v(" "),s("p",[s("code",[t._v("Chapter 23: Clean Architecture")])]),t._v(" "),s("p",[t._v("is a design pattern that was originally identified as a way to help unit testers to separate behaviors that are hard to test from behaviors that\nare easy to test.")]),t._v(" "),s("p",[t._v("The idea is very simple: "),s("em",[t._v("Split the behaviors into two modules or classes.")])]),t._v(" "),s("ul",[s("li",[t._v("One of those modules is humble; it contains "),s("strong",[t._v("all the hard-to-test behaviors")]),t._v(" stripped down to their barest essence.")]),t._v(" "),s("li",[t._v("The other module contains "),s("strong",[t._v("all the testable behaviors")]),t._v(" that were stripped out of the humble object.")])])])}),[],!1,null,null,null);e.default=r.exports}}]);