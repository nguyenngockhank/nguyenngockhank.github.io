(window.webpackJsonp=window.webpackJsonp||[]).push([[241],{763:function(e,t,s){"use strict";s.r(t);var i=s(7),a=Object(i.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"principles"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#principles"}},[e._v("#")]),e._v(" Principles")]),e._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#coding-principles"}},[e._v("Coding Principles")]),s("ul",[s("li",[s("a",{attrs:{href:"#keep-it-simple-stupid-kiss"}},[e._v("Keep It Simple, Stupid (KISS)")])]),s("li",[s("a",{attrs:{href:"#don-t-repeat-yourself-dry"}},[e._v("Don't repeat yourself (DRY)")])]),s("li",[s("a",{attrs:{href:"#separation-of-concerns"}},[e._v("Separation Of Concerns")])]),s("li",[s("a",{attrs:{href:"#you-aren-t-going-to-need-it-yagni"}},[e._v("You Aren't Going To Need It (YAGNI)")])])])]),s("li",[s("a",{attrs:{href:"#solid-principles"}},[e._v("SOLID Principles")]),s("ul",[s("li",[s("a",{attrs:{href:"#single-responsibility-priciple-srp"}},[e._v("Single responsibility priciple (SRP)")])]),s("li",[s("a",{attrs:{href:"#open-closed-principle-ocp"}},[e._v("Open/Closed principle (OCP)")])]),s("li",[s("a",{attrs:{href:"#liskov-substitution-principe-lsp"}},[e._v("Liskov substitution principe (LSP)")])]),s("li",[s("a",{attrs:{href:"#interface-segregation-principle-isp"}},[e._v("Interface segregation principle (ISP)")])]),s("li",[s("a",{attrs:{href:"#dependency-inversion-principle-dip"}},[e._v("Dependency inversion principle (DIP)")])])])]),s("li",[s("a",{attrs:{href:"#component-principles"}},[e._v("Component Principles")]),s("ul",[s("li",[s("a",{attrs:{href:"#component-cohension"}},[e._v("Component Cohension")])]),s("li",[s("a",{attrs:{href:"#component-coupling"}},[e._v("Component Coupling")])])])]),s("li",[s("a",{attrs:{href:"#grasp"}},[e._v("GRASP")]),s("ul",[s("li",[s("a",{attrs:{href:"#information-expert"}},[e._v("Information Expert")])]),s("li",[s("a",{attrs:{href:"#creator"}},[e._v("Creator")])]),s("li",[s("a",{attrs:{href:"#controller"}},[e._v("Controller")])]),s("li",[s("a",{attrs:{href:"#low-coupling"}},[e._v("Low coupling")])]),s("li",[s("a",{attrs:{href:"#high-cohesion"}},[e._v("High cohesion")])]),s("li",[s("a",{attrs:{href:"#polymorphism"}},[e._v("Polymorphism")])]),s("li",[s("a",{attrs:{href:"#indirection"}},[e._v("Indirection")])]),s("li",[s("a",{attrs:{href:"#pure-fabrication"}},[e._v("Pure fabrication")])]),s("li",[s("a",{attrs:{href:"#protected-variations"}},[e._v("Protected variations")])])])]),s("li",[s("a",{attrs:{href:"#references"}},[e._v("References")])])])]),s("p"),e._v(" "),s("h2",{attrs:{id:"coding-principles"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#coding-principles"}},[e._v("#")]),e._v(" Coding Principles")]),e._v(" "),s("h3",{attrs:{id:"keep-it-simple-stupid-kiss"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#keep-it-simple-stupid-kiss"}},[e._v("#")]),e._v(" Keep It Simple, Stupid (KISS)")]),e._v(" "),s("blockquote",{staticClass:"highlight-quote"},[s("p",[e._v("It means you should be writing code as "),s("strong",[e._v("simple as possible")]),e._v(". Don't get caught up in trying to be overly clever or showing off with a paragraph of advanced code. If you can write a script in one line, write it in one line.")])]),s("h3",{attrs:{id:"don-t-repeat-yourself-dry"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#don-t-repeat-yourself-dry"}},[e._v("#")]),e._v(" Don't repeat yourself (DRY)")]),e._v(" "),s("blockquote",{staticClass:"highlight-quote"},[s("p",[s("em",[e._v("Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.")])])]),s("p",[s("RouterLink",{attrs:{to:"/terms/97things4dev.html#_30-✅-nguyen-tac-dry-don-t-repeat-yourself"}},[e._v("Read more")])],1),e._v(" "),s("h3",{attrs:{id:"separation-of-concerns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#separation-of-concerns"}},[e._v("#")]),e._v(" Separation Of Concerns")]),e._v(" "),s("blockquote",{staticClass:"highlight-quote"},[s("p",[e._v("The separation of concerns principle is an "),s("strong",[e._v("abstract version of "),s("a",{attrs:{href:"#single-responsibility-priciple-srp"}},[e._v("the single responsibility principle")])]),e._v(". This idea states that a program should be designed with different containers, and these containers should not have access to each other.")])]),s("h3",{attrs:{id:"you-aren-t-going-to-need-it-yagni"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#you-aren-t-going-to-need-it-yagni"}},[e._v("#")]),e._v(" You Aren't Going To Need It (YAGNI)")]),e._v(" "),s("blockquote",{staticClass:"highlight-quote"},[s("p",[e._v("This principle means you "),s("strong",[e._v("should never code for functionality on the chance that you may need in the future")]),e._v(". Don't try and solve a problem that doesn't exist.")])]),s("h2",{attrs:{id:"solid-principles"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#solid-principles"}},[e._v("#")]),e._v(" SOLID Principles")]),e._v(" "),s("h3",{attrs:{id:"single-responsibility-priciple-srp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#single-responsibility-priciple-srp"}},[e._v("#")]),e._v(" Single responsibility priciple (SRP)")]),e._v(" "),s("p",[e._v("An active corollary to Conway's law:")]),e._v(" "),s("blockquote",{staticClass:"highlight-quote"},[s("p",[s("em",[e._v("The best structure for a software system is heavily influenced by the social structure of the organization that uses it so that "),s("strong",[e._v("each software module has one, and only one, reason to change")]),e._v(".")])])]),s("h3",{attrs:{id:"open-closed-principle-ocp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#open-closed-principle-ocp"}},[e._v("#")]),e._v(" Open/Closed principle (OCP)")]),e._v(" "),s("p",[e._v("Bertrand Meyer made this principle famous in the 1980s.")]),e._v(" "),s("blockquote",{staticClass:"highlight-quote"},[s("p",[s("em",[e._v("Open for extension but closed for modification.")])])]),s("h3",{attrs:{id:"liskov-substitution-principe-lsp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#liskov-substitution-principe-lsp"}},[e._v("#")]),e._v(" Liskov substitution principe (LSP)")]),e._v(" "),s("p",[e._v("Barbara Liskov’s famous definition of subtypes, from 1988.")]),e._v(" "),s("blockquote",{staticClass:"highlight-quote"},[s("p",[s("em",[e._v("In short, this principle says that to build software systems from interchangeable parts, those parts must adhere to a contract that allows those parts to be substituted one for another.")])])]),s("h3",{attrs:{id:"interface-segregation-principle-isp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#interface-segregation-principle-isp"}},[e._v("#")]),e._v(" Interface segregation principle (ISP)")]),e._v(" "),s("blockquote",{staticClass:"highlight-quote"},[s("p",[s("em",[e._v("This principle advises software designers to avoid depending on things that they don’t use.")])])]),s("h3",{attrs:{id:"dependency-inversion-principle-dip"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dependency-inversion-principle-dip"}},[e._v("#")]),e._v(" Dependency inversion principle (DIP)")]),e._v(" "),s("blockquote",{staticClass:"highlight-quote"},[s("p",[s("em",[e._v("The code that implements high-level policy should not depend on the code that implements low-level details. Rather, details should depend on policies.")])])]),s("h2",{attrs:{id:"component-principles"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#component-principles"}},[e._v("#")]),e._v(" Component Principles")]),e._v(" "),s("p",[e._v("From "),s("strong",[e._v("Clean Architecture")])]),e._v(" "),s("h3",{attrs:{id:"component-cohension"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#component-cohension"}},[e._v("#")]),e._v(" Component Cohension")]),e._v(" "),s("h4",{attrs:{id:"the-reuse-release-equivalence-principle"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-reuse-release-equivalence-principle"}},[e._v("#")]),e._v(" The Reuse/Release Equivalence Principle")]),e._v(" "),s("blockquote",{staticClass:"highlight-quote"},[s("p",[s("em",[e._v("The granular of reuse is the granular of release.")])])]),s("h4",{attrs:{id:"the-common-closure-principle"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-common-closure-principle"}},[e._v("#")]),e._v(" The Common Closure Principle")]),e._v(" "),s("blockquote",{staticClass:"highlight-quote"},[s("p",[s("em",[e._v("The classes in a component should be closed together against the same kinds of changes. A change that affects a component affects all the classes in that component and no other components.")])])]),s("h4",{attrs:{id:"the-common-reuse-principle"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-common-reuse-principle"}},[e._v("#")]),e._v(" The Common Reuse Principle")]),e._v(" "),s("blockquote",{staticClass:"highlight-quote"},[s("p",[s("em",[e._v("The classes in a component are reused together. If you reuse one of the classes in a component, you reuse them all.")])])]),s("h3",{attrs:{id:"component-coupling"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#component-coupling"}},[e._v("#")]),e._v(" Component Coupling")]),e._v(" "),s("h4",{attrs:{id:"the-acyclic-dependencies-principle"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-acyclic-dependencies-principle"}},[e._v("#")]),e._v(" The Acyclic Dependencies Principle")]),e._v(" "),s("blockquote",{staticClass:"highlight-quote"},[s("p",[s("em",[e._v("Allow no cycles in the component dependency graph.")])])]),s("h4",{attrs:{id:"the-stable-dependencies-principle"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-stable-dependencies-principle"}},[e._v("#")]),e._v(" The Stable Dependencies Principle")]),e._v(" "),s("blockquote",{staticClass:"highlight-quote"},[s("p",[s("em",[e._v("Depend in the direction of stability.")])])]),s("p",[s("strong",[e._v("Stability Metrics")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("I = Fan-out / (Fan-in + Fan-out)\n")])])]),s("ul",[s("li",[s("em",[e._v("I")]),e._v(": Instability")]),e._v(" "),s("li",[s("em",[e._v("Fan-in")]),e._v(": Incomming dependencies")]),e._v(" "),s("li",[s("em",[e._v("Fan-out")]),e._v(": Outgoing dependencies")])]),e._v(" "),s("p",[e._v("The "),s("em",[e._v("I")]),e._v(" metric ranges from 0 to 1.")]),e._v(" "),s("ul",[s("li",[s("em",[e._v("I")]),e._v(" = 0 indicates a maximally stable component.")]),e._v(" "),s("li",[s("em",[e._v("I")]),e._v(" = 1 indicates a maximally unstable component.")])]),e._v(" "),s("h4",{attrs:{id:"the-stable-abstractions-principle"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-stable-abstractions-principle"}},[e._v("#")]),e._v(" The Stable Abstractions Principle")]),e._v(" "),s("blockquote",{staticClass:"highlight-quote"},[s("p",[s("em",[e._v("A component should be as abstract as it is stable.")])])]),s("p",[s("strong",[e._v("Measuring Abstraction")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("A = Na / Nc\n")])])]),s("ul",[s("li",[s("em",[e._v("A")]),e._v(": Abstractness")]),e._v(" "),s("li",[s("em",[e._v("Nc")]),e._v(": The number of classes in the component")]),e._v(" "),s("li",[s("em",[e._v("Na")]),e._v(": The number of abstract classes and interfaces in the component")])]),e._v(" "),s("p",[e._v("The "),s("em",[e._v("A")]),e._v(" metric ranges from 0 to 1.")]),e._v(" "),s("ul",[s("li",[s("em",[e._v("A")]),e._v(" = 0 implies that the component has no abstract classes at all.")]),e._v(" "),s("li",[s("em",[e._v("A")]),e._v(" = 1 implies that the component contains nothing but abstract classes.")])]),e._v(" "),s("h2",{attrs:{id:"grasp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#grasp"}},[e._v("#")]),e._v(" GRASP")]),e._v(" "),s("p",[s("strong",[e._v("GRASP")]),e._v(" stands for General Responsibility Assignment Software Principles")]),e._v(" "),s("h3",{attrs:{id:"information-expert"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#information-expert"}},[e._v("#")]),e._v(" Information Expert")]),e._v(" "),s("p",[s("strong",[e._v("Problem")]),e._v(": "),s("em",[e._v("What is a general principle of assigning responsibilities to objects?")])]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("Advice")]),e._v(" "),s("p",[e._v("Assign responsibility to the class that has the information needed to fulfill it.")])]),e._v(" "),s("p",[s("strong",[e._v("Information expert")]),e._v(" (the expert principle) is a principle used to determine where to delegate responsibilities such as methods, computed fields, and so on.")]),e._v(" "),s("h3",{attrs:{id:"creator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#creator"}},[e._v("#")]),e._v(" Creator")]),e._v(" "),s("p",[s("strong",[e._v("Problem")]),e._v(": "),s("em",[e._v("Who creates object A?")])]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("Advice")]),e._v(" "),s("p",[e._v("Assign class B the responsibility to create object A if one of these is true (the more the better):")]),e._v(" "),s("ul",[s("li",[e._v("B "),s("strong",[e._v("contains or compositely aggregates")]),e._v(" A")]),e._v(" "),s("li",[e._v("B "),s("strong",[e._v("records")]),e._v("  A")]),e._v(" "),s("li",[e._v("B "),s("strong",[e._v("closely uses")]),e._v(" A")]),e._v(" "),s("li",[e._v("B "),s("strong",[e._v("has the initialising data for")]),e._v(" A")])])]),e._v(" "),s("h3",{attrs:{id:"controller"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#controller"}},[e._v("#")]),e._v(" Controller")]),e._v(" "),s("p",[s("strong",[e._v("Problem")]),e._v(": "),s("em",[e._v("What first object beyond the UI layer "),s("strong",[e._v("receives and coordinates")]),e._v(" (“controls”) a system operation?")])]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("Advice")]),e._v(" "),s("p",[e._v("Assign the responsibility to an object representing one of these choices:")]),e._v(" "),s("ul",[s("li",[e._v("Represents the overall “system”, a “root object”, a device that the software is running within, or a major subsystem (these are all variations of a facade controller).")]),e._v(" "),s("li",[e._v("Represents a use case scenario within which the system operation.\nAvoid bloated controllers.")])])]),e._v(" "),s("h3",{attrs:{id:"low-coupling"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#low-coupling"}},[e._v("#")]),e._v(" Low coupling")]),e._v(" "),s("p",[s("strong",[e._v("Problem")]),e._v(": "),s("em",[e._v("How to reduce the impact of change?")])]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("Advice")]),e._v(" "),s("p",[e._v("Assign responsibilities so that (unnecessary) "),s("strong",[e._v("coupling remains low")]),e._v(". Use this principle to evaluate alternatives. Focus on points of realistic instability or evolution.")])]),e._v(" "),s("p",[s("strong",[e._v("Drawback")]),e._v(": may add additional layers of indirection.")]),e._v(" "),s("h3",{attrs:{id:"high-cohesion"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#high-cohesion"}},[e._v("#")]),e._v(" High cohesion")]),e._v(" "),s("p",[s("strong",[e._v("Problem")]),e._v(": "),s("em",[e._v("How to keep objects focussed, understandable, and manageable, and as a side effect, support Low Coupling?")])]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("Advice")]),e._v(" "),s("p",[e._v("Assign responsibilities so that "),s("strong",[e._v("cohesion remains high")]),e._v(". Use this to evaluate alternatives.")])]),e._v(" "),s("p",[e._v("Read more: "),s("a",{attrs:{href:"https://www.thenewagesite.com/index.php/articles/the-laws-of-alice-a-bailey/law-of-cohesion/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Law of Cohesion"),s("OutboundLink")],1)]),e._v(" "),s("h3",{attrs:{id:"polymorphism"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#polymorphism"}},[e._v("#")]),e._v(" Polymorphism")]),e._v(" "),s("p",[s("strong",[e._v("Problem")]),e._v(": "),s("em",[e._v("How to handle alternatives based on type? How to create pluggable software components?")])]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("Advice")]),e._v(" "),s("p",[e._v("When "),s("strong",[e._v("related alternatives")]),e._v(" or "),s("strong",[e._v("behaviours vary by type")]),e._v(" (class), assign responsibility for the behaviour — using polymorphic operations— to the types for which the behaviour varies.")])]),e._v(" "),s("blockquote",{staticClass:"highlight-quote"},[s("p",[s("em",[e._v("Avoid adding flexibility just because you can.")])])]),s("h3",{attrs:{id:"indirection"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#indirection"}},[e._v("#")]),e._v(" Indirection")]),e._v(" "),s("p",[s("strong",[e._v("Problem")]),e._v(": "),s("em",[e._v("Where to assign a responsibility, to "),s("strong",[s("code",[e._v("avoid direct coupling")])]),e._v(" between two (or more) classes? How to decouple objects so that low coupling is supported and reuse potential remains higher?")])]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("Advice")]),e._v(" "),s("p",[e._v("Assign the responsibility to an "),s("strong",[e._v("intermediate object")]),e._v(" to mediate between other components or services so that they are not directly coupled.")])]),e._v(" "),s("h3",{attrs:{id:"pure-fabrication"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pure-fabrication"}},[e._v("#")]),e._v(" Pure fabrication")]),e._v(" "),s("p",[s("strong",[e._v("Problem")]),e._v(": "),s("em",[e._v("What object should have the responsibility, when you do not want to violate High Cohesion and Low Coupling, or other goals, but solutions offered by Information Expert (for example) are not appropriate?")])]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("Advice")]),e._v(" "),s("p",[e._v("Assign a highly cohesive set of responsibilities to an artificial or convenience class that does not represent a domain concept—sometimes invented to support high cohesion, low coupling, and reuse.")])]),e._v(" "),s("h3",{attrs:{id:"protected-variations"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#protected-variations"}},[e._v("#")]),e._v(" Protected variations")]),e._v(" "),s("p",[s("strong",[e._v("Problem")]),e._v(": "),s("em",[e._v("How to design objects, subsystems, and systems so that the variations or instability in these elements does not have an undesirable impact on other elements?")])]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("Advice")]),e._v(" "),s("p",[e._v("Identify points of predicted variation or instability; assign responsibilities to create a "),s("strong",[e._v("stable interface")]),e._v(" around them.")])]),e._v(" "),s("p",[s("em",[e._v("Interface is used in broadest sense – not just Java interfaces.")])]),e._v(" "),s("h2",{attrs:{id:"references"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.makeuseof.com/tag/basic-programming-principles/",target:"_blank",rel:"noopener noreferrer"}},[e._v("10 Basic Programming Principles Every Programmer Must Know"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://dzone.com/articles/10-coding-principles-every-programmer-should-learn",target:"_blank",rel:"noopener noreferrer"}},[e._v("10 Coding Principles Every Programmer Should Learn"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://en.wikipedia.org/wiki/GRASP_(object-oriented_design)#:~:text=General%20Responsibility%20Assignment%20Software%20Patterns,to%20the%20SOLID%20design%20principle.",target:"_blank",rel:"noopener noreferrer"}},[e._v("GRASP (object-oriented design)"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://gist.github.com/dimabory/56e36474a1bb5573c08f26805a978fb5",target:"_blank",rel:"noopener noreferrer"}},[e._v("General Responsibility Assignment Software Patterns"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://www.cs.cmu.edu/~aldrich/214/slides/design-grasp.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Design: GRASP and Refinement"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://krzysztof-kwiecinski.medium.com/grasp-design-principles-de98cae2196c",target:"_blank",rel:"noopener noreferrer"}},[e._v("GRASP Design Principles"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://blog.avenuecode.com/principles-of-package-and-component-design",target:"_blank",rel:"noopener noreferrer"}},[e._v("Principles of Package and Component Design"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=a.exports}}]);