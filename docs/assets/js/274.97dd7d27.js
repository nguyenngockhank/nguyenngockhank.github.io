(window.webpackJsonp=window.webpackJsonp||[]).push([[274],{910:function(n,h,c){"use strict";c.r(h);var t=c(7),i=Object(t.a)({},(function(){var n=this,h=n.$createElement,c=n._self._c||h;return c("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[c("h1",{attrs:{id:"_62-chi-co-code-moi-noi-len-su-that"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#_62-chi-co-code-moi-noi-len-su-that"}},[n._v("#")]),n._v(" 62: Chỉ Có Code Mới Nói Lên Sự Thật")]),n._v(" "),c("p",[n._v("Các dòng code hoạt động chính là ý nghĩa cuối cùng của một chương trình. Sẽ rất khó đọc khi chúng chỉ ở dạng nhị phân. Nếu đây là chương trình của bạn, của bất kì nhà phát triển phần mềm thương mại điển hình hay dự án nguồn mở, hoặc là viết code bằng ngôn ngữ thông dịch linh hoạt thì nên cần có mã nguồn. Khi nhìn vào mã nguồn,ý nghĩa của chương trình sẽ được thể hiện rõ ràng. Nội dung trong mã nguồn là toàn bộ những gì bạn có thể chắc chắn về công dụng của chương trình. Thậm chí hầu hết các tài liệu yêu cầu tính chính xác cũng không nói lên tất cả: nó không chứa nội dung chi tiết về những gì mà chương trình thật sự làm, nó chỉ thể hiện những ý định tổng quát của nhà phân tích requirements. Tài liệu thiết kế có thể thu nạp bản thiết kế theo kế hoạch, nhưng sẽ thiếu sót các chi tiết thực hiện cần thiết. Những tài liệu ấy có thể sẽ không đồng bộ hóa được với công việc hiện tại… hoặc có thể bị mất, hoặc không thể được tìm thấy ở nguồn đầu tiên. Khi đó, mã nguồn chính là nơi lưu trữ cuối cùng.")]),n._v(" "),c("p",[n._v("Với ý tưởng này, hãy tự hỏi rằng mã code của bạn có thể thể hiện cụ thể với bạn hay những lập trình viên khác vai trò của nó hay không ?")]),n._v(" "),c("p",[n._v("Có thể bạn sẽ nói rằng, "),c("em",[n._v("“Oh, những chú thích của tôi sẽ cho bạn biết tất cả những thứ cần thiết.")]),n._v("” Nhưng hãy nhớ rằng những chú thích ấy chẳng làm cho code của bạn hoạt động. Chúng có thể mắc phải sai lầm như các dạng tài liệu khác. Có một truyền thống cho rằng việc có thêm các chú thích đó sẽ tốt hơn, vì thế không ngạc nhiên lắm khi các lập trình viên viết chúng ngày càng nhiều, thậm chí họ còn trình bày và giải thích lại những thứ hiển nhiên trong mã code. Điều này thật không đúng để làm rõ code của bạn. Nếu code của bạn cần những chú thích đó, thì hãy tái cấu trúc để nó không cần nữa. Những chú thích dài dòng sẽ làm cho không gian màn hình bị xáo trộn và có thể IDE của bạn sẽ tự động ẩn chúng đi. Nếu bạn muốn giải thích về một sự thay đổi nào đó, hãy làm điều này trong thông báo đăng kí hệ thống kiểm soát phiên bản thay vì trong code.")]),n._v(" "),c("p",[n._v("Bạn làm gì để có thể khiến cho code của bạn tự nói lên sự thật càng cụ thể càng tốt? Hãy đặt tên đơn giản, dễ nhớ và sắp xếp cấu trúc code của bạn để chúng thể hiện được chức năng của mình. Hãy tách rời các đoạn code để được giao diện rõ ràng. Viết những bài kiểm tra tự động để giải thích các hành vi dự định và kiểm tra các giao diện. Hãy mạnh dạn sửa lại cấu trúc khi bạn học cách viết code đơn giản với những phương pháp tốt hơn. Hãy làm cho code của bạn càng đơn giản càng tốt để dễ đọc và dễ hiểu.")]),n._v(" "),c("p",[n._v("Hãy chăm chút cho code của bạn như thể đang biên soạn một bài thơ, bài diễn văn, một bài blog, hoặc là một tin email 📮 quan trọng. Hãy thể hiện sự khéo léo của bạn, nó sẽ thể hiện công dụng của nó và nói lên chính xác những gì nó đang làm, như thế nó vẫn biểu hiện được mục đích dự định của bạn ngay cả khi bạn không ở bên cạnh. Hãy nhớ rằng những mã code hữu dụng đều được sử dụng lâu dài hơn dự định. Những lập trình viên bảo trì sẽ cảm ơn bạn. Và, nếu bạn là một lập trình viên bảo trì và code của bạn không dễ dàng thể hiện những gì bạn muốn, hãy chủ động áp dụng những hướng dẫn ở phía trên. Hãy giữ sự tỉnh táo trong khi thiết lập code của bạn.")])])}),[],!1,null,null,null);h.default=i.exports}}]);