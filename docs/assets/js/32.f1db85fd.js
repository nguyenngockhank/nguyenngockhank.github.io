(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{620:function(e,t,n){e.exports=n.p+"assets/img/image--020.b0b0a3c5.png"},621:function(e,t,n){e.exports=n.p+"assets/img/image--021.a0bc49c0.png"},622:function(e,t,n){e.exports=n.p+"assets/img/image--024.48936cd0.jpg"},997:function(e,t,n){"use strict";n.r(t);var s=n(7),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"_9-better-together-or-better-apart"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-better-together-or-better-apart"}},[e._v("#")]),e._v(" 9.  Better Together Or Better Apart?")]),e._v(" "),s("p",[e._v("One of the most fundamental questions in software design is this: given\ntwo pieces of functionality, should they be implemented together in the\nsame place, or should their implementations be separated? This question\napplies at all levels in a system, such as functions, methods, classes, and\nservices. For example, should buffering be included in the class that\nprovides stream-oriented file I/O, or should it be in a separate class?\nShould the parsing of an HTTP request be implemented entirely in one\nmethod, or should it be divided among multiple methods (or even multiple\nclasses)? This chapter discusses the factors to consider when making these\ndecisions. Some of these factors have already been discussed in previous\nchapters, but they will be revisited here for completeness.")]),e._v(" "),s("p",[e._v("When deciding whether to combine or separate, the goal is to reduce\nthe complexity of the system as a whole and improve its modularity. It\nmight appear that the best way to achieve this goal is to divide the system\ninto a large number of small components: the smaller the components, the\nsimpler each individual component is likely to be. However, the act of\nsubdividing creates additional complexity that was not present before\nsubdivision:\nSome complexity comes just from the number of components: the\nmore components, the harder to keep track of them all and the harder\nto find a desired component within the large collection. Subdivision\nusually results in more interfaces, and every new interface adds\ncomplexity.\nSubdivision can result in additional code to manage the components.\nFor example, a piece of code that used a single object before\nsubdivision might now have to manage multiple objects.")]),e._v(" "),s("p",[e._v("Subdivision creates separation: the subdivided components will be\nfarther apart than they were before subdivision. For example,\nmethods that were together in a single class before subdivision may\nbe in different classes after subdivision, and possibly in different\nfiles. Separation makes it harder for developers to see the components\nat the same time, or even to be aware of their existence. If the\ncomponents are truly independent, then separation is good: it allows\nthe developer to focus on a single component at a time, without being\ndistracted by the other components. On the other hand, if there are\ndependencies between the components, then separation is bad:\ndevelopers will end up flipping back and forth between the\ncomponents. Even worse, they may not be aware of the dependencies,\nwhich can lead to bugs.\nSubdivision can result in duplication: code that was present in a\nsingle instance before subdivision may need to be present in each of\nthe subdivided components.\nBringing pieces of code together is most beneficial if they are closely\nrelated. If the pieces are unrelated, they are probably better off apart. Here\nare a few indications that two pieces of code are related:\nThey share information; for example, both pieces of code might\ndepend on the syntax of a particular type of document.\nThey are used together: anyone using one of the pieces of code is\nlikely to use the other as well. This form of relationship is only\ncompelling if it is bidirectional. As a counter-example, a disk block\ncache will almost always involve a hash table, but hash tables can be\nused in many situations that don’t involve block caches; thus, these\nmodules should be separate.\nThey overlap conceptually, in that there is a simple higher-level\ncategory that includes both of the pieces of code. For example,\nsearching for a substring and case conversion both fall under the\ncategory of string manipulation; flow control and reliable delivery\nboth fall under the category of network communication.\nIt is hard to understand one of the pieces of code without looking at\nthe other.")]),e._v(" "),s("p",[e._v("The rest of this chapter uses more specific rules as well as examples to\nshow when it makes sense to bring pieces of code together and when it\nmakes sense to separate them.")]),e._v(" "),s("h2",{attrs:{id:"_9-1-bring-together-if-information-is-shared"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-bring-together-if-information-is-shared"}},[e._v("#")]),e._v(" 9.1    Bring together if information is shared")]),e._v(" "),s("p",[e._v("Section 5.4 introduced this principle in the context of a project\nimplementing an HTTP server. In its first implementation, the project\nused two different methods in different classes to read in and parse HTTP\nrequests. The first method read the text of an incoming request from a\nnetwork socket and placed it in a string object. The second method parsed\nthe string to extract the various components of the request. With this\ndecomposition, both of the methods ended up with considerable\nknowledge of the format of HTTP requests: the first method was only\ntrying to read the request, not parse it, but it couldn’t identify the end of\nthe request without doing most of the work of parsing it (for example, it\nhad to parse header lines in order to identify the header containing the\noverall request length). Because of this shared information, it is better to\nboth read and parse the request in the same place; when the two classes\nwere combined into one, the code got shorter and simpler.")]),e._v(" "),s("h2",{attrs:{id:"_9-2-bring-together-if-it-will-simplify-the-interface"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-bring-together-if-it-will-simplify-the-interface"}},[e._v("#")]),e._v(" 9.2    Bring together if it will simplify the interface")]),e._v(" "),s("p",[e._v("When two or more modules are combined into a single module, it may be\npossible to define an interface for the new module that is simpler or easier\nto use than the original interfaces. This often happens when the original\nmodules each implement part of the solution to a problem. In the HTTP\nserver example from the preceding section, the original methods required\nan interface to return the HTTP request string from the first method and\npass it to the second. When the methods were combined, these interfaces\nwere eliminated.")]),e._v(" "),s("p",[e._v("In addition, when the functionality of two or more classes is combined,\nit may be possible to perform some functions automatically, so that most\nusers need not be aware of them. The Java I/O library illustrates this\nopportunity. If the FileInputStream and BufferedInputStream classes were\ncombined and buffering were provided by default, the vast majority of")]),e._v(" "),s("p",[e._v("users would never even need to be aware of the existence of buffering. A\ncombined FileInputStream class might provide methods to disable or")]),e._v(" "),s("p",[e._v("replace the default buffering mechanism, but most users would not need to\nlearn about them.")]),e._v(" "),s("h2",{attrs:{id:"_9-3-bring-together-to-eliminate-duplication"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-3-bring-together-to-eliminate-duplication"}},[e._v("#")]),e._v(" 9.3    Bring together to eliminate duplication")]),e._v(" "),s("p",[e._v("If you find the same pattern of code repeated over and over, see if you can\nreorganize the code to eliminate the repetition. One approach is to factor\nthe repeated code out into a separate method and replace the repeated code\nsnippets with calls to the method. This approach is most effective if the\nrepeated code snippet is long and the replacement method has a simple\nsignature. If the snippet is only one or two lines long, there may not be\nmuch benefit in replacing it with a method call. If the snippet interacts in\ncomplex ways with its environment (such as by accessing numerous local\nvariables), then the replacement method might require a complex\nsignature (such as many pass-by-reference arguments), which would\nreduce its value.")]),e._v(" "),s("p",[e._v("Another way to eliminate duplication is to refactor the code so that the\nsnippet in question only needs to be executed in one place. Suppose you\nare writing a method that needs to return errors at several different points,\nand the same cleanup actions need to be performed at each of these points\nbefore returning (see Figure 9.1 for an example). If the programming\nlanguage supports goto, you can move the cleanup code to the very end of\nthe method and then goto that snippet at each of the points where an error")]),e._v(" "),s("p",[e._v("return is required, as in Figure 9.2. Goto statements are generally\nconsidered a bad idea, and they can result in indecipherable code if used\nindiscriminately, but they are useful in situations like this where they are\nused to escape from nested code.")]),e._v(" "),s("h2",{attrs:{id:"_9-4-separate-general-purpose-and-special-purpose-code"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-4-separate-general-purpose-and-special-purpose-code"}},[e._v("#")]),e._v(" 9.4 Separate general-purpose and special-purpose code")]),e._v(" "),s("p",[e._v("If a module contains a mechanism that can be used for several different purposes, then it should provide just that one general-purpose mechanism.\nIt should not include code that specializes the mechanism for a particular use, nor should it contain other general-purpose mechanisms. Special-purpose code associated with a general-purpose mechanism should\nnormally go in a different module (typically one associated with the particular purpose). The GUI editor discussion in Chapter 6 illustrated this principle: the best design was one where the text class provided general-\npurpose text operations, while operations particular to the user interface (such as deleting the selection) were implemented in the user interface module. This approach eliminated information leakage and additional interfaces that were present in an earlier design where the specialized user interface operations were implemented in the text class.")]),e._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[e._v("Repetition")]),e._v(" "),s("p",[e._v("If the same piece of code (or code that is almost the same) appears over and over again, that’s a red flag that you haven’t found the right abstractions.")])]),e._v(" "),s("p",[s("img",{attrs:{src:n(620),alt:"Image"}})]),e._v(" "),s("p",[s("strong",[e._v("Figure 9.1")]),e._v(": "),s("em",[e._v("This code processes incoming network packets of different types; for each type, if the packet is too short for that type, a message gets logged. In this version of the code, the LOG statement is duplicated for several different packet types.")])]),e._v(" "),s("p",[s("img",{attrs:{src:n(621),alt:"Image"}})]),e._v(" "),s("p",[s("strong",[e._v("Figure 9.2")]),e._v(": "),s("em",[e._v("A reorganization of the code from Figure 9.1 so that there is only one copy of the LOG statement.")])]),e._v(" "),s("p",[e._v("In general, the lower layers of a system tend to be more general-\npurpose and the upper layers more special-purpose. For example, the\ntopmost layer of an application consists of features totally specific to that\napplication. The way to separate special-purpose code from general-\npurpose code is to pull the special-purpose code upwards, into the higher\nlayers, leaving the lower layers general-purpose. When you encounter a\nclass that includes both general-purpose and special-purpose features for\nthe same abstraction, see if the class can be separated into two classes, one\ncontaining the general-purpose features, and the other layered on top of it\nto provide the special-purpose features.")]),e._v(" "),s("h2",{attrs:{id:"_9-5-example-insertion-cursor-and-selection"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-5-example-insertion-cursor-and-selection"}},[e._v("#")]),e._v(" 9.5    Example: insertion cursor and selection")]),e._v(" "),s("p",[e._v("The next sections work through three examples that illustrate the\nprinciples discussed above. In two of the examples the best approach is to\nseparate the relevant pieces of code; in the third example it is better to join\nthem together.")]),e._v(" "),s("p",[e._v("The first example consists of the insertion cursor and the selection in\nthe GUI editor project from Chapter 6. The editor displayed a blinking\nvertical line indicating where text typed by the user would appear in the\ndocument. It also displayed a highlighted range of characters called the\nselection, which was used for copying or deleting text. The insertion\ncursor was always visible, but there could be times when no text was\nselected. If the selection existed, the insertion cursor was always\npositioned at one end of it.")]),e._v(" "),s("p",[e._v("The selection and insertion cursor are related in some ways. For\nexample, the cursor is always positioned at one end of the selection, and\nthe cursor and selection tend to be manipulated together: clicking and\ndragging the mouse sets both of them, and text insertion first deletes the\nselected text, if there is any, and then inserts new text at the cursor\nposition. Thus, it might seem logical to use a single object to manage both\nthe selection and the cursor, and one project team took this approach. The object stored two positions in the file, along with booleans indicating which end was the cursor and whether the selection existed.")]),e._v(" "),s("p",[e._v("However, the combined object was awkward. It provided no benefit for higher-level code, since the higher-level code still needed to be aware of the selection and cursor as distinct entities, and it manipulated them\nseparately (during text insertion, it first invoked a method on the combined object to delete the selected text; then it invoked another method to retrieve the cursor position in order to insert new text). The\ncombined object was actually more complex to implement than separate objects. It avoided storing the cursor position as a separate entity, but instead had to store a boolean indicating which end of the selection was\nthe cursor. In order to retrieve the cursor position, the combined object had to first test the boolean and then choose the appropriate end of the selection.")]),e._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[e._v("Special-General Mixture")]),e._v(" "),s("p",[e._v("This red flag occurs when a general-purpose mechanism also contains code specialized for a particular use of that mechanism. This makes the mechanism more complicated and creates information leakage between the mechanism and the particular use case: future modifications to the use case are likely to require changes to the underlying mechanism as well.")])]),e._v(" "),s("p",[e._v("In this case, the selection and cursor were not closely enough related to\ncombine them. When the code was revised to separate the selection and\nthe cursor, both the usage and the implementation became simpler.\nSeparate objects provided a simpler interface than a combined object from\nwhich selection and cursor information had to be extracted. The cursor\nimplementation also got simpler because the cursor position was\nrepresented directly, rather than indirectly through a selection and a\nboolean. In fact, in the revised version no special classes were used for\neither the selection or the cursor. Instead, a new Position class was introduced to represent a location in the file (a line number and character within line). The selection was represented with two Positions and the cursor with one. Positions also found other uses in the project. This example also demonstrates the benefits of a lower-level but more general-purpose interface, which were discussed in Chapter 6.")]),e._v(" "),s("h2",{attrs:{id:"_9-6-example-separate-class-for-logging"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-6-example-separate-class-for-logging"}},[e._v("#")]),e._v(" 9.6    Example: separate class for logging")]),e._v(" "),s("p",[e._v("The second example involved error logging in a student project. A class\ncontained several code sequences like the following:")]),e._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("try")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    rpcConn "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" connectionPool"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("getConnection")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("dest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("catch")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("IOException")]),e._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("NetworkErrorLogger")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("logRpcOpenError")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("req"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" dest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("p",[e._v("Rather than logging the error at the point where it was detected, a separate\nmethod in a special error logging class was invoked. The error logging\nclass was defined at the end of the same source file:")]),e._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("static")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("NetworkErrorLogger")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n    *  Output information relevant to an error that occurs when trying\n    *  to open a connection to send an RPC.\n    *\n    *  @param req\n    *       The RPC request that would have been sent through the connection\n    *  @param dest\n    *       The destination of the RPC\n    *  @param e\n    *       The caught error\n    */")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("static")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("logRpcOpenError")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("RpcRequest req"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" AddrPortTuple dest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" Exception e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        logger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("Level"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("WARNING"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Cannot send message: "')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" req "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(' "'),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n        \\n"),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('" + "')]),e._v("Unable to find "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("or")]),e._v(' open connection to " '),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" dest "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('" :"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("p",[e._v("The "),s("code",[e._v("NetworkErrorLogger")]),e._v(" class contained several methods such as "),s("code",[e._v("logRpcSendError")]),e._v(" and "),s("code",[e._v("logRpcReceiveError")]),e._v(", each of which logged a different kind of error.")]),e._v(" "),s("p",[e._v("This separation added complexity with no benefit. The logging\nmethods were shallow: most consisted of a single line of code, but they\nrequired a considerable amount of documentation. Each method was only\ninvoked in a single place. The logging methods were highly dependent on\ntheir invocations: someone reading the invocation would most likely flip\nover to the logging method to make sure that the right information was\nbeing logged; similarly, someone reading the logging method would\nprobably flip over to the invocation site to understand the purpose of the\nmethod.")]),e._v(" "),s("p",[e._v("In this example, it would be better to eliminate the logging methods\nand place the logging statements at the locations where the errors were\ndetected. This would make the code easier to read and eliminate the\ninterfaces required for the logging methods.")]),e._v(" "),s("h2",{attrs:{id:"_9-7-example-editor-undo-mechanism"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-7-example-editor-undo-mechanism"}},[e._v("#")]),e._v(" 9.7    Example: editor undo mechanism")]),e._v(" "),s("p",[e._v("In the GUI editor project from Section 6.2, one of the requirements was to\nsupport multi-level undo/redo, not just for changes to the text itself, but\nalso for changes in the selection, insertion cursor, and view. For example,\nif a user selected some text, deleted it, scrolled to a different place in the\nfile, and then invoked undo, the editor had to restore its state to what it\nwas just before the deletion. This included restoring the deleted text,\nselecting it again, and also making the selected text visible in the window.")]),e._v(" "),s("p",[e._v("Some of the student projects implemented the entire undo mechanism\nas part of the text class. The text class maintained a list of all the undoable\nchanges. It automatically added entries to this list whenever the text was")]),e._v(" "),s("p",[e._v("changed. For changes to the selection, insertion cursor, and view, the user\ninterface code invoked additional methods in the text class, which then\nadded entries for those changes to the undo list. When undo or redo was\nrequested by the user, the user interface code invoked a method in the text\nclass, which then processed the entries in the undo list. For entries related\nto text, it updated the internals of the text class; for entries related to other\nthings, such as the selection, the text class called back to the user interface\ncode to carry out the undo or redo.")]),e._v(" "),s("p",[e._v("This approach resulted in an awkward set of features in the text class.\nThe core of undo/redo consists of a general-purpose mechanism for\nmanaging a list of actions that have been executed and stepping through\nthem during undo and redo operations. The core was located in the text\nclass along with special-purpose handlers that implemented undo and redo\nfor specific things such as text and the selection. The special-purpose undo\nhandlers for the selection and the cursor had nothing to do with anything\nelse in the text class; they resulted in information leakage between the text\nclass and the user interface, as well as extra methods in each module to\npass undo information back and forth. If a new sort of undoable entity\nwere added to the system in the future, it would require changes to the text\nclass, including new methods specific to that entity. In addition, the\ngeneral-purpose undo core had little to do with the general-purpose text\nfacilities in the class.")]),e._v(" "),s("p",[e._v("These problems can be solved by extracting the general-purpose core\nof the undo/redo mechanism and placing it in a separate class:")]),e._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("History")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("interface")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Action")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("redo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("undo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("History")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("addAction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Action")]),e._v(" action"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("addFence")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("undo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("redo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("p",[e._v("In this design, the History class manages a collection of objects that")]),e._v(" "),s("p",[e._v("implement the interface History.Action. Each History.Action describes a\nsingle operation, such as a text insertion or a change in the cursor location,\nand it provides methods that can undo or redo the operation. The History")]),e._v(" "),s("p",[e._v("class knows nothing about the information stored in the actions or how\nthey implement their undo and redo methods. History maintains a history\nlist describing all of the actions executed over the lifetime of an\napplication, and it provides undo and redo methods that walk backwards")]),e._v(" "),s("p",[e._v("and forwards through the list in response to user-requested undos and\nredos, calling undo and redo methods in the "),s("code",[e._v("History.Actions")]),e._v(".")]),e._v(" "),s("p",[s("code",[e._v("History.Actions")]),e._v(" are special-purpose objects: each one understands a\nparticular kind of undoable operation. They are implemented outside the\nHistory class, in modules that understand particular kinds of undoable\nactions. The text class might implement "),s("code",[e._v("UndoableInsert")]),e._v(" and")]),e._v(" "),s("p",[e._v("UndoableDelete objects to describe text insertions and deletions. Whenever\nit inserts text, the text class creates a new "),s("code",[e._v("UndoableInsert")]),e._v(" object describing the insertion and invokes History.addAction to add it to the history list. The editor’s user interface code might create "),s("code",[e._v("UndoableSelection")]),e._v(" and "),s("code",[e._v("UndoableCursor")]),e._v(" objects that describe changes to the selection and insertion cursor.")]),e._v(" "),s("p",[e._v("The History class also allows actions to be grouped so that, for example, a single undo request from the user can restore deleted text, reselect the deleted text, and reposition the insertion cursor. There are a number of ways to group actions; the History class uses fences, which are markers placed in the history list to separate groups of related actions.")]),e._v(" "),s("p",[e._v("Each call to "),s("code",[e._v("History.redo")]),e._v(" walks backwards through the history list, undoing actions until it reaches the next fence. The placement of fences is determined by higher-level code by invoking History.addFence.")]),e._v(" "),s("p",[e._v("This approach divides the functionality of undo into three categories, each of which is implemented in a different place:")]),e._v(" "),s("p",[e._v("A general-purpose mechanism for managing and grouping actions\nand invoking undo/redo operations (implemented by the History\nclass).")]),e._v(" "),s("p",[e._v("The specifics of particular actions (implemented by a variety of\nclasses, each of which understands a small number of action types).\nThe policy for grouping actions (implemented by high-level user\ninterface code to provide the right overall application behavior).")]),e._v(" "),s("p",[e._v("Each of these categories can be implemented without any understanding of\nthe other categories. The History class does not know what kind of actions")]),e._v(" "),s("p",[e._v("are being undone; it could be used in a variety of applications. Each action\nclass understands only a single kind of action, and neither the History\nclass nor the action classes needs to be aware of the policy for grouping\nactions.")]),e._v(" "),s("p",[e._v("The key design decision was the one that separated the general-purpose\npart of the undo mechanism from the special-purpose parts and put the\ngeneral-purpose part in a class by itself. Once that was done, the rest of the\ndesign fell out naturally.")]),e._v(" "),s("p",[e._v("Note: the suggestion to separate general-purpose code from special-\npurpose code refers to code related to a particular mechanism. For\nexample, special-purpose undo code (such as code to undo a text insertion)\nshould be separated from general-purpose undo code (such as code to\nmanage the history list). However, it often makes sense to combine\nspecial-purpose code for one mechanism with general-purpose code for\nanother. The text class is an example of this: it implements a general-\npurpose mechanism for managing text, but it includes special-purpose\ncode related to undoing. The undo code is special-purpose because it only\nhandles undo operations for text modifications. It doesn’t make sense to\ncombine this code with the general-purpose undo infrastructure in the\nHistory class, but it does make sense to put it in the text class, since it is closely related to other text functions.")]),e._v(" "),s("h2",{attrs:{id:"_9-8-splitting-and-joining-methods"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-8-splitting-and-joining-methods"}},[e._v("#")]),e._v(" 9.8    Splitting and joining methods")]),e._v(" "),s("p",[e._v("The issue of when to subdivide applies not just to classes, but also to\nmethods: are there times when it is better to divide an existing method")]),e._v(" "),s("p",[e._v("into multiple smaller methods? Or, should two smaller methods be\ncombined into one larger one? Long methods tend to be more difficult to\nunderstand than shorter ones, so many people argue that length alone is a\ngood justification for breaking up a method. Students in classes are often\ngiven rigid criteria, such as “Split up any method longer than 20 lines!”")]),e._v(" "),s("p",[e._v("However, length by itself is rarely a good reason for splitting up a\nmethod. In general, developers tend to break up methods too much.\nSplitting up a method introduces additional interfaces, which add to\ncomplexity. It also separates the pieces of the original method, which\nmakes the code harder to read if the pieces are actually related. You\nshouldn’t break up a method unless it makes the overall system simpler;\nI’ll discuss how this might happen below.")]),e._v(" "),s("p",[e._v("Long methods aren’t always bad. For example, suppose a method\ncontains five 20-line blocks of code that are executed in order. If the\nblocks are relatively independent, then the method can be read and\nunderstood one block at a time; there’s not much benefit in moving each\nof the blocks into a separate method. If the blocks have complex\ninteractions, it’s even more important to keep them together so readers can\nsee all of the code at once; if each block is in a separate method, readers\nwill have to flip back and forth between these spread-out methods in order\nto understand how they work together. Methods containing hundreds of\nlines of code are fine if they have a simple signature and are easy to read.\nThese methods are deep (lots of functionality, simple interface), which is\ngood.")]),e._v(" "),s("p",[s("img",{attrs:{src:n(622),alt:"Image"}})]),e._v(" "),s("p",[s("strong",[e._v("Figure 9.3")]),e._v(": "),s("em",[e._v("A method (a) can be split either by by extracting a subtask (b) or by dividing its functionality into two separate methods (c). A method should not be split if it results in shallow methods, as in (d).")])]),e._v(" "),s("p",[e._v("When designing methods, the most important goal is to provide clean\nand simple abstractions. Each method should do one thing and do it\ncompletely. The method should have a clean and simple interface, so that\nusers don’t need to have much information in their heads in order to use it\ncorrectly. The method should be deep: its interface should be much\nsimpler than its implementation. If a method has all of these properties,\nthen it probably doesn’t matter whether it is long or not.")]),e._v(" "),s("p",[e._v("Splitting up a method only makes sense if it results in cleaner\nabstractions, overall. There are two ways to do this, which are diagrammed\nin Figure 9.3. The best way is by factoring out a subtask into a separate\nmethod, as shown in Figure 9.3(b). The subdivision results in a child\nmethod containing the subtask and a parent method containing the\nremainder of the original method; the parent invokes the child. The\ninterface of the new parent method is the same as the original method.\nThis form of subdivision makes sense if there is a subtask that is cleanly\nseparable from the rest of the original method, which means (a) someone\nreading the child method doesn’t need to know anything about the parent\nmethod and (b) someone reading the parent method doesn’t need to\nunderstand the implementation of the child method. Typically this means\nthat the child method is relatively general-purpose: it could conceivably\nbe used by other methods besides the parent. If you make a split of this\nform and then find yourself flipping back and forth between the parent and\nchild to understand how they work together, that is a red flag (“Conjoined\nMethods”) indicating that the split was probably a bad idea.")]),e._v(" "),s("p",[e._v("The second way to break up a method is to split it into two separate\nmethods, each visible to callers of the original method, as in Figure 9.3(c).\nThis makes sense if the original method had an overly complex interface\nbecause it tried to do multiple things that were not closely related. If this\nis the case, it may be possible to divide the method’s functionality into\ntwo or more smaller methods, each of which has only a part of the original\nmethod’s functionality. If you make a split like this, the interface for each\nof the resulting methods should be simpler than the interface of the\noriginal method. Ideally, most callers should only need to invoke one of\nthe two new methods; if callers must invoke both of the new methods, then\nthat adds complexity, which makes it less likely that the split is a good idea. The new methods will be more focused in what they do. It is a good sign if the new methods are more general-purpose than the original\nmethod (i.e., you can imagine using them separately in other situations).")]),e._v(" "),s("p",[e._v("Splits of the form shown in Figure 9.3(c) don’t make sense very often, because they result in callers having to deal with multiple methods instead of one. When you split this way, you run the risk of ending up with several\nshallow methods, as in Figure 9.3(d). If the caller has to invoke each of the separate methods, passing state back and forth between them, then splitting is not a good idea. If you’re considering a split like the one in\nFigure 9.3(c), you should judge it based on whether it simplifies things for callers.")]),e._v(" "),s("p",[e._v("There are also situations where a system can be made simpler by\njoining methods together. For example, joining methods might replace two\nshallow methods with one deeper method; it might eliminate duplication\nof code; it might eliminate dependencies between the original methods, or\nintermediate data structures; it might result in better encapsulation, so that\nknowledge that was previously present in multiple places is now isolated\nin a single place; or it might result in a simpler interface, as discussed in\nSection 9.2.")]),e._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[e._v("Conjoined Methods")]),e._v(" "),s("p",[e._v("It should be possible to understand each method independently. If you\ncan’t understand the implementation of one method without also\nunderstanding the implementation of another, that’s a red flag. This red\nflag can occur in other contexts as well: if two pieces of code are\nphysically separated, but each can only be understood by looking at the\nother, that is a red flag.")])]),e._v(" "),s("h2",{attrs:{id:"_9-9-conclusion"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-9-conclusion"}},[e._v("#")]),e._v(" 9.9    Conclusion")]),e._v(" "),s("p",[e._v("The decision to split or join modules should be based on complexity. Pick\nthe structure that results in the best information hiding, the fewest\ndependencies, and the deepest interfaces.")])])}),[],!1,null,null,null);t.default=a.exports}}]);