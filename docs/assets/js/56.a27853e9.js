(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{1221:function(e,a,t){"use strict";t.r(a);var s=t(7),o=Object(s.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"choose-a-data-storage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#choose-a-data-storage"}},[e._v("#")]),e._v(" Choose a data storage")]),e._v(" "),s("TagLinks"),e._v(" "),s("p",[e._v("There is no super storage for all cases. Here is a few of my notes about it:")]),e._v(" "),s("h2",{attrs:{id:"based-on-cap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#based-on-cap"}},[e._v("#")]),e._v(" Based on CAP")]),e._v(" "),s("p",[s("img",{attrs:{src:t(564),alt:"Based on CAP"}})]),e._v(" "),s("h2",{attrs:{id:"database-select-process"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#database-select-process"}},[e._v("#")]),e._v(" Database Select process")]),e._v(" "),s("p",[s("img",{attrs:{src:t(565),alt:"choose-db-process"}})]),e._v(" "),s("p",[s("a",{attrs:{href:"https://twitter.com/alexxubyte/status/1653785124474064897/photo/1",target:"_blank",rel:"noopener noreferrer"}},[e._v("Original Tweet"),s("OutboundLink")],1)]),e._v(" "),s("h2",{attrs:{id:"polygot-persistence"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#polygot-persistence"}},[e._v("#")]),e._v(" Polygot Persistence")]),e._v(" "),s("p",[s("img",{attrs:{src:t(566),alt:"Polygot Database"}})]),e._v(" "),s("p",[e._v("Polyglot persistence is about using different data storage technologies to handle varying data storage needs.")]),e._v(" "),s("p",[e._v("Polyglot persistence can apply across an enterprise or within a single application.")]),e._v(" "),s("p",[e._v("Encapsulating data access into services reduces the impact of data storage choices on other parts of a system.")]),e._v(" "),s("p",[e._v("Adding more data storage technologies increases complexity in programming and operations, so the advantages of a good data storage fit need to be weighed against this complexity.")]),e._v(" "),s("h2",{attrs:{id:"relational-database"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#relational-database"}},[e._v("#")]),e._v(" Relational Database")]),e._v(" "),s("p",[e._v("Examples: MySQL, Postgres.")]),e._v(" "),s("h3",{attrs:{id:"when-to-use"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#when-to-use"}},[e._v("#")]),e._v(" "),s("em",[e._v("When to Use?")])]),e._v(" "),s("p",[e._v("In relational databases, it is "),s("strong",[e._v("easy to represent the entities as tables and define the relationship between them")]),e._v(". It "),s("strong",[e._v("supports transactions to write to one or many entities")]),e._v(" and supports simple to complex read queries. You’re able to add in an ad-hoc index to improve the read performance at the\nexpense of write performance. Also, if you have multiple entities with\nshared attributes, you can fetch results with a joined or unioned table. Also,\nit supports updates for a record well. Some databases are append-only.")]),e._v(" "),s("p",[e._v("However, it doesn’t mean a relational database is efficient at all the queries.\nSo you need to think about the query you’re making and have some\nintuition on whether it’ll be efficient for the relational database.")]),e._v(" "),s("p",[e._v("In a system design interview, you can consider using a relational database\nunless you find a better reason to use another database choice.")]),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("Reminder")]),e._v(" "),s("p",[e._v("Don’t fall into the trap of saying relational databases don’t scale.\nRelational databases do scale, and all big companies use them. However,\nrelational databases may not scale for particular use cases, and there are\nbetter options, and you should be clear about why. For example, if the use\ncase is metrics collection where there’s a high write ingestion without the\nneed to join tables and is append-only, a relational database probably\n“doesn’t scale” for that use case.")])]),e._v(" "),s("h3",{attrs:{id:"advanced-concepts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#advanced-concepts"}},[e._v("#")]),e._v(" "),s("em",[e._v("Advanced Concepts")])]),e._v(" "),s("p",[e._v("Most traditional relational databases use B-Tree based indexing, which is\nbetter for reads and less good for writes.")]),e._v(" "),s("p",[e._v("Relational databases can provide stronger data integrity through transaction\nguarantee by enforcing constraint through entities through foreign keys. For\nexample, if you’re designing a file system with a table folder and a table\nfile. If the folder table has a column called number_of_files, you may have\na transaction to add a file in that folder and increase number_of_files by 1.\nRDBMS does this well by providing transactions to this operation. If the\ndatabase increases number_of_files by 1 first and the operation to add a row\nto the file table fails, number_of_files will get rolled back.")]),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("Reminder")]),e._v(" "),s("p",[e._v("Many resources will claim that relational databases have good ACID\nproperties, so it’s worth looking into it quickly. However, ACID is a very\nhigh-level term that isn’t necessarily unique to relational databases. For\nexample, it’s possible to have transactions on a row or document level in a\nNoSQL database. NoSQL also provides strong durability with\nreplications. So, in an interview, don’t argue for relational databases by\nsaying it’s ACID compliant and other databases are not.")]),e._v(" "),s("p",[s("strong",[e._v("Atomicity")]),e._v(": The transaction is all-or-none. If the transaction fails, the\ndatabase will roll back the transaction.")]),e._v(" "),s("p",[s("strong",[e._v("Consistency")]),e._v(": The transaction doesn’t leave part of the data committed if\nthe transaction fails.")]),e._v(" "),s("p",[s("strong",[e._v("Isolation")]),e._v(": The transaction keeps other transactions from accessing or\nwriting to the same data until finished.\nDurability: Guarantees the data will not be lost.")])]),e._v(" "),s("h3",{attrs:{id:"mysql"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql"}},[e._v("#")]),e._v(" MySql")]),e._v(" "),s("p",[e._v("A unique design characteristic of MySQL is the seperation of query processing and other server tasks from storage engine. This seperation of concerns let you to trade of various features without changing your data model")]),e._v(" "),s("h4",{attrs:{id:"innodb"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#innodb"}},[e._v("#")]),e._v(" InnoDB")]),e._v(" "),s("ul",[s("li",[e._v("The default transactional storage engine for MySQL and the most important/widely used.")]),e._v(" "),s("li",[e._v("InnoDB uses "),s("strong",[e._v("Multiversion Concurrency Control (MVCC)")]),e._v(" to archive high concurrency.")]),e._v(" "),s("li",[e._v("The advantages of MVCC is the increased concurrency. The drawback is the additional storage and maintenance work.")])]),e._v(" "),s("h4",{attrs:{id:"myisam"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#myisam"}},[e._v("#")]),e._v(" MyISAM")]),e._v(" "),s("ul",[s("li",[e._v("This is the original, and oldest.")]),e._v(" "),s("li",[s("strong",[e._v("It doesn't support transaction")]),e._v(".")]),e._v(" "),s("li",[e._v("Its design is optimized more for speed and compact data storage.")])]),e._v(" "),s("h4",{attrs:{id:"the-archive-engine"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-archive-engine"}},[e._v("#")]),e._v(" The Archive Engine")]),e._v(" "),s("ul",[s("li",[e._v("Not a transactional storage engine")]),e._v(" "),s("li",[e._v("simply optimmized for high-speed inserting and compressed storage.")]),e._v(" "),s("li",[e._v("The best for "),s("strong",[e._v("Logging")]),e._v(" and "),s("strong",[e._v("Data acquisition")]),e._v(" (e.g: crawl data)")])]),e._v(" "),s("h4",{attrs:{id:"the-csv-engine"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-csv-engine"}},[e._v("#")]),e._v(" The CSV Engine")]),e._v(" "),s("ul",[s("li",[e._v("helpful as data interchange format")]),e._v(" "),s("li",[e._v("tables can be constructed from CSV files automatically")]),e._v(" "),s("li",[e._v("allow access to the files from other programs")])]),e._v(" "),s("h4",{attrs:{id:"the-memory-engine"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-memory-engine"}},[e._v("#")]),e._v(" The memory engine")]),e._v(" "),s("ul",[s("li",[e._v("formerly called "),s("em",[e._v("HEAP")]),e._v(" tables stores in memory")])]),e._v(" "),s("h2",{attrs:{id:"document-store"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#document-store"}},[e._v("#")]),e._v(" Document Store")]),e._v(" "),s("p",[e._v("Examples: MongoDB, Amazon DocumentDB")]),e._v(" "),s("h3",{attrs:{id:"when-to-use-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#when-to-use-2"}},[e._v("#")]),e._v(" "),s("em",[e._v("When to Use?")])]),e._v(" "),s("p",[e._v("You should use a document database if the data you are storing is\nunstructured and doesn’t fit well in a relational database. For example, if\nyou’re storing a product catalog where the schema between each product\ncatalog could differ significantly, creating a relational table with all the\nknown columns may be wasteful, since the storage will be sparse.\nDocuments can use formats such as JSON and XML, and if your data fits\nnaturally to those representations, then it’s a good fit.")]),e._v(" "),s("p",[e._v("In an interview setting, the data is usually structured unless the interviewer\nintentionally sets it up in a way that they’re looking for a document store.\nWhen in doubt, favor relational over document since it’s just easier to deal\nwith the flexibility of different queries by having tables.")]),e._v(" "),s("p",[e._v("When in doubt, favor relational over document since it’s just easier to deal\nwith the flexibility of different queries by having tables.")]),e._v(" "),s("h2",{attrs:{id:"columnar-store"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#columnar-store"}},[e._v("#")]),e._v(" Columnar Store")]),e._v(" "),s("p",[e._v("Examples: InfluxDB, Pinot")]),e._v(" "),s("h3",{attrs:{id:"when-to-use-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#when-to-use-3"}},[e._v("#")]),e._v(" "),s("em",[e._v("When to Use?")])]),e._v(" "),s("p",[e._v("The columnar store has a schema that looks the same as a traditional\nrelational database. However, columnar stores are more optimized for\nOLAP queries to fetch data in a column fashion. For example, assume you\nhave a table for "),s("code",[e._v("time_stamp | metrics_value")]),e._v(". Then, you might query for all\nthe metrics_value from time_0 to time_1. This query pattern is good for\nanalytics databases and time-series databases which have a lot of overlaps.")]),e._v(" "),s("p",[e._v("For a time-series database that stores its data in a columnar fashion, writes\nhappen more frequently than read. Update to any record is rare since most\nare append-only. When deletion happens, the deletions happen in batches\ninstead of an ad-hoc operation like in a relational database.")]),e._v(" "),s("p",[e._v("In a system design interview, a good candidate for a columnar store would\nbe an analytics dashboard. Most analytics dashboards show some sort of\ngraph with an x-axis and y-axis. And for each graph, you will want to fetch\na series of data to be displayed on the dashboard. However, this\nsignificantly depends on the dashboard query, so make sure you understand\nthe datas on the dashboard graphs before committing to a columnar store.")]),e._v(" "),s("h3",{attrs:{id:"advanced-concepts-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#advanced-concepts-2"}},[e._v("#")]),e._v(" "),s("em",[e._v("Advanced Concepts")])]),e._v(" "),s("p",[e._v("Pretend you have a database table that looks like this:")]),e._v(" "),s("p",[e._v("In a normal row oriented relational database, each row is physically stored together:")]),e._v(" "),s("p",[e._v("1, 1/1, 5, 6500"),s("br"),e._v("\n2, 1/2, 6, 700"),s("br"),e._v("\n3, 1/3, 3, 500")]),e._v(" "),s("p",[e._v("So to get all the data for a given row is efficient. If you want to provide a time series of “date” and “total score,” you will need to access multiple rows, which is inefficient. In a columnar store, data is stored in a columnar fashion:")]),e._v(" "),s("p",[e._v("1, 2, 3"),s("br"),e._v("\n1/1, 1/2, 1/3"),s("br"),e._v("\n5, 6, 3"),s("br"),e._v("\n6500, 700, 500")]),e._v(" "),s("p",[e._v("If you want to provide a time series of “date” and “total score,” you can\nfetch the date and total score columns. This difference becomes more\napparent when there are more rows, like in time series and analytics\nqueries.")]),e._v(" "),s("p",[e._v("Another advantage is the ability to compress the data for more efficient\nstorage. As a simplified example, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 2, 2, 2, 2,\n2, 2 can be compressed to 1:8, 3:5, 2:6 and more apparent when the number\nof rows becomes longer.")]),e._v(" "),s("h2",{attrs:{id:"object-store"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-store"}},[e._v("#")]),e._v(" Object Store")]),e._v(" "),s("p",[e._v("Examples: Amazon S3.")]),e._v(" "),s("h3",{attrs:{id:"when-to-use-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#when-to-use-4"}},[e._v("#")]),e._v(" When to Use?")]),e._v(" "),s("p",[e._v("When you’re designing to store objects like photos, videos, file documents,\netc. You need to handle objects differently due to the potential amount of\ndata taking up the bandwidth and storage. Blob stores are immutable. Once stored, you can not change the file. You can change by inserting or\nappending new data.")]),e._v(" "),s("p",[e._v("If you try to store a blob in a relational database, you will take up a lot of\nmemory on the table and worsen the performance of the regular OLTP\ntransactions.")]),e._v(" "),s("p",[e._v("In a system design interview, good candidates for a blob store would be:")]),e._v(" "),s("p",[e._v("Design Instagram: For Instagram, assuming you’re storing videos and\nimages for each post, you will want to store the videos and images in a blob\nstore.")]),e._v(" "),s("p",[e._v("Log Storage: When you need to store logs, you can consider using an object\nstore to store the log dump.")]),e._v(" "),s("p",[e._v("File Storage: For any files that you need to store, you can use object\nstorage. For example, if the interviewer asks you to design a system that\ntakes in a pdf of CSV and has a data pipeline to process the files, you may\nwant to store the pdf or CSV in the object store and have some pipeline pull\nfrom the object store to be processed.")]),e._v(" "),s("h2",{attrs:{id:"wide-column-store"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#wide-column-store"}},[e._v("#")]),e._v(" Wide Column Store")]),e._v(" "),s("p",[e._v("Examples: Big Table, HBase, Cassandra.")]),e._v(" "),s("h3",{attrs:{id:"when-to-use-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#when-to-use-5"}},[e._v("#")]),e._v(" When to Use?")]),e._v(" "),s("p",[e._v("Wide column store works well when there’s a lot of data collected at a very\nhigh write speed. The read performance is also great when the read targets a\nrow key that is defined.")]),e._v(" "),s("p",[e._v("A wide column store isn’t good when you need to do joins across tables.\nAlthough a wide column store doesn’t support ad-hoc modifications to a\npersisted value, the read query does well when it is append-only.")]),e._v(" "),s("p",[e._v("In an interview, a wide column store can be a good candidate for questions like:")]),e._v(" "),s("p",[e._v("Design Facebook Chat: The chat messages usually come into the system\nwith a high write throughput and typically appends only. On read, it’s\nusually reading a list of messages for a chat_id.")]),e._v(" "),s("p",[e._v("Design Metrics Collection: For the metrics collection type of question, the\nwrite throughput is usually very high because metrics are generally\nassumed to omit data constantly. Your system has to deal with the high rate\nof data collection. The read query targets a group of specific device_id’s\nthat omit the metrics without a complex query.")]),e._v(" "),s("h3",{attrs:{id:"advanced-discussion"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#advanced-discussion"}},[e._v("#")]),e._v(" Advanced Discussion")]),e._v(" "),s("p",[e._v("Here’s a brief explanation of a wide column store followed by an example\nfor a chat application.")]),e._v(" "),s("p",[e._v("Row: Collection of column families")]),e._v(" "),s("p",[e._v("Column Family: Collection of columns. Column families are loaded together and stored together.")]),e._v(" "),s("p",[e._v("Column: Consists of name, value, and timestamp. When the database creates a value, it also creates a new version timestamp.")]),e._v(" "),s("p",[e._v("In a system design interview, it’s unlikely you’ll need more than one\ncolumn family. For a chat application, one possible schema design would be:")]),e._v(" "),s("p",[e._v("Row: chat_id\nColumn Family: message\nColumns: message_id, message_text, author_id, created_time")]),e._v(" "),s("p",[e._v("And you cluster order by created_time which means the columns are sorted\nby created_time since the typical access pattern of chat is to fetch by\ntimestamp intervals.")]),e._v(" "),s("p",[e._v("From the outside, the term “wide column” is just the schema. However, it’s\ncoupled with some popular databases like Big Table, HBase, and Cassandra. Internally, those wide column databases use LSM indexing\nstrategy, which is more optimized for writes. Also, within a column family,\ndata are stored together physically next to each other for a given row. For\nexample, for a chat application mentioned above, the data might look like\nthe following for a chat_id:")]),e._v(" "),s("p",[e._v("message_id: 1, message_text: “hello” author_id: 1, created_time: t1"),s("br"),e._v("\nmessage_id: 2, message_text: “sup” author_id: 2, created_time: t2"),s("br"),e._v("\nmessage_id: 3, message_text: “nm” author_id: 1, created_time: t3")]),e._v(" "),s("p",[e._v("Since these records are physically next to each other, it’s much faster to query.")]),e._v(" "),s("h3",{attrs:{id:"replication-strategy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#replication-strategy"}},[e._v("#")]),e._v(" Replication Strategy")]),e._v(" "),s("p",[e._v("Even within the wide column database type, there are different replication\nstrategies. HBase uses a leader-follower replication, whereas Cassandra\nuses a leaderless replication. Because of the leaderless replication,\nCassandra has to deal with conflicting writes with lower consistency than\nHBase. In an interview, you can pick one of the two based on your design\nrequirement, and it’s worth talking about your strategy on conflict\nresolution if you decide to use a leaderless solution like Cassandra.")]),e._v(" "),s("h3",{attrs:{id:"cassandra"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cassandra"}},[e._v("#")]),e._v(" Cassandra")]),e._v(" "),s("p",[e._v("Cassandra is a distributed database designed to provide extremely "),s("strong",[e._v("high levels of availability")]),e._v(" and "),s("strong",[e._v("virtually unlimited scalability")]),e._v(".")]),e._v(" "),s("ul",[s("li",[e._v("Messaging - many companies use Cassandra for Messaging. More: "),s("a",{attrs:{href:"https://www.youtube.com/watch?v=86olupkuLlU&ab_channel=HusseinNasser",target:"_blank",rel:"noopener noreferrer"}},[e._v("Why Discord Moved from MongoDB to Apache Cassandra"),s("OutboundLink")],1)]),e._v(" "),s("li",[e._v("Internet of things")]),e._v(" "),s("li",[e._v("Social Media Analytics and Recommendation Engine")])]),e._v(" "),s("h2",{attrs:{id:"reverse-index-store"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reverse-index-store"}},[e._v("#")]),e._v(" Reverse Index Store")]),e._v(" "),s("p",[e._v("Examples: Elastic Search, Lucene.")]),e._v(" "),s("h3",{attrs:{id:"when-to-use-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#when-to-use-6"}},[e._v("#")]),e._v(" When to Use?")]),e._v(" "),s("p",[e._v("When designing for a search-related problem where you need to build\nreverse indexes, you can consider a reverse index store.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("search(search_query) → [item]\nsearch(term) → [item]\n")])])]),s("p",[e._v("Internally a reverse index is just a key-value store where the key is the term\ntoken, and the value is a posting list. A posting list is an abstract term for the item you’re searching for. Here’s a canonical example of a search\nproblem. Imagine you have two documents:")]),e._v(" "),s("p",[e._v("Document 1: “my dog house”\nDocument 2: “their dog”")]),e._v(" "),s("p",[e._v("The reverse index is going to be:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("“dog” → [doc1, doc2]\n“house” → [doc1]\n“my” → [doc1]\n“their” → [doc2]\n")])])]),s("p",[e._v("When a search query “dog OR house” comes in, we can take the union of “dog” and “house” and combine the result, which is doc1 and doc2. When a\nsearch query “dog AND house” comes in, we can take the intersection of “dog” and “house” and combine the result, which is just doc1.")]),e._v(" "),s("h3",{attrs:{id:"elasticsearch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#elasticsearch"}},[e._v("#")]),e._v(" Elasticsearch")]),e._v(" "),s("ul",[s("li",[e._v("Indexing & full text search.")]),e._v(" "),s("li",[e._v("Logging & Logs Analysis. Elasticsearch is a popular log and log analysis tool.")]),e._v(" "),s("li",[e._v("Search & Query. Elasticsearch's basic full-text search and analytics engine can integrate a wide range of queries, including structured, unstructured, geographical, and metric searches.")]),e._v(" "),s("li",[e._v("Metrics Analysis.")])]),e._v(" "),s("h2",{attrs:{id:"in-memory-store"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#in-memory-store"}},[e._v("#")]),e._v(" In-Memory Store")]),e._v(" "),s("p",[e._v("Examples: Redis, Memcache.")]),e._v(" "),s("h3",{attrs:{id:"when-to-use-7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#when-to-use-7"}},[e._v("#")]),e._v(" When to Use?")]),e._v(" "),s("p",[e._v("Sometimes you may not need to go to disk if the requirement is to achieve\nbetter performance at the cost of worsened durability.")]),e._v(" "),s("p",[e._v("For example, if you need to store the driver locations for a ride-matching\nservice, it’s not critical to have durability since the location changes\nfrequently. If you need the locations for analytics, you can write back to\nanother database. If analytics isn’t a core use case, you don’t need a database here.")]),e._v(" "),s("p",[e._v("For more information on caching strategies, visit the caching chapter.")]),e._v(" "),s("h3",{attrs:{id:"redis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis"}},[e._v("#")]),e._v(" Redis")]),e._v(" "),s("p",[e._v("Here are few use cases when we should use Redis:")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("Session cache")]),e._v(": stores as hashes. Because user sessions generally have a lot of I/O.")]),e._v(" "),s("li",[s("strong",[e._v("User Profiles, Preferences")])]),e._v(" "),s("li",[s("strong",[e._v("Shopping Cart Data")])]),e._v(" "),s("li",[s("strong",[e._v("Application cache")]),e._v(": few data applications store/access frequently or rarely change.")]),e._v(" "),s("li",[s("strong",[e._v("Distributed lists")]),e._v(": some things could be "),s("em",[e._v("top 100 newest list")]),e._v(", "),s("em",[e._v("top 100 hottest list")]),e._v(",...")]),e._v(" "),s("li",[s("strong",[e._v("Keep stats")]),e._v(": works with counters")]),e._v(" "),s("li",[s("strong",[e._v("Queues and Pub/Sub")]),e._v(": Redis queues and pub/sub channels can use to exchange massages, enabling features such as background workers.")])]),e._v(" "),s("h2",{attrs:{id:"geo-spatial-databases"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#geo-spatial-databases"}},[e._v("#")]),e._v(" Geo-Spatial Databases")]),e._v(" "),s("p",[e._v("Examples: Google S2, MongoDB Geo Queries.")]),e._v(" "),s("h3",{attrs:{id:"when-to-use-8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#when-to-use-8"}},[e._v("#")]),e._v(" When to Use?")]),e._v(" "),s("p",[e._v("Geospatial databases are great to use for location-based queries. For\nexample, given a coordinator longitude and latitude, give me all the points\nwithin a radius, polygon, or custom shape supported by the database.")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("find_point_of_interest(coordinate) → [point_of_interest]\ncreate_point_of_interest(point_of_interest) → status\n")])])]),s("p",[e._v("Geo-spatial database is helpful for questions like the following:")]),e._v(" "),s("p",[e._v("Design Yelp: For a given point on the map, give me all the interesting points of interest within a particular region.")]),e._v(" "),s("p",[e._v("Design Find My Friend: For a given point on the map, give me all the friends near me.")]),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("Reminder")]),e._v(" "),s("p",[e._v("Sometimes candidates mention Quadtree as if it is a database. A Quadtree is technically an in-memory data structure, not a database.")])]),e._v(" "),s("h3",{attrs:{id:"advanced-discussion-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#advanced-discussion-2"}},[e._v("#")]),e._v(" Advanced Discussion")]),e._v(" "),s("p",[e._v("A geodatabase is a very niche database, so it’s doubtful the interviewer will\ngo too deep into this. Don’t overly index on geospatial knowledge if you’re\njust studying for the interview.")]),e._v(" "),s("p",[e._v("If you want to self-learn to go deeper, in that case, you can go into the\n2dsphere index, which essentially divides up the world into multiple levels\nof granularity of grids and stores them into B-Tree. Another option is\nGoogle S2, which uses Hilbert Curve to enumerate the cells.")]),e._v(" "),s("h2",{attrs:{id:"zookeeper"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper"}},[e._v("#")]),e._v(" ZooKeeper")]),e._v(" "),s("p",[e._v("Examples: Chubby, ZooKeeper")]),e._v(" "),s("p",[e._v("ZooKeeper is more than just a store. But it’s worth talking about storage\nsince ZooKeeper is commonly used to store configurations and name\nregistries. In addition, you can use ZooKeeper because it provides strong\nconsistency with good fault tolerance to the end-user.")]),e._v(" "),s("p",[e._v("In a system design interview, here are some places where A ZooKeeper\nmay be used:")]),e._v(" "),s("h3",{attrs:{id:"shard-manager"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shard-manager"}},[e._v("#")]),e._v(" Shard Manager")]),e._v(" "),s("p",[e._v("You will have a list of physical nodes you need to call for a given logical\nshard. You can store this information in ZooKeeper. Knowing this might\ncome in handy if the interviewer asks you for more detail about your\nsharding architecture.")]),e._v(" "),s("h3",{attrs:{id:"configuration-manager"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configuration-manager"}},[e._v("#")]),e._v(" Configuration Manager")]),e._v(" "),s("p",[e._v("If you have an application that needs to read a global configuration service\nthat needs to be strongly consistent, you can consider ZooKeeper.")]),e._v(" "),s("h3",{attrs:{id:"leader-election"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#leader-election"}},[e._v("#")]),e._v(" Leader Election")]),e._v(" "),s("p",[e._v("When you have a chosen leader-follower replication for your database when\nyou’re discussing the fault tolerance of your database, you can mention that\nZooKeeper will monitor the health of your leader and follower nodes and\nperform an election to elect a new leader.")]),e._v(" "),s("h3",{attrs:{id:"advanced-discussion-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#advanced-discussion-3"}},[e._v("#")]),e._v(" Advanced Discussion")]),e._v(" "),s("p",[e._v("The intuition is that ZooKeeper uses a consensus protocol to ensure the\ncluster is fault-tolerant by selecting a leader when it is down. It also uses a\nconsensus protocol to ensure the writes are strongly consistent. Strong\nconsistency means that multiple clients read the data as if there is just a\nsingle object. In reality, multiple machines are powering this strongly\nconsistent property. This property is also known as linearizable. Since the\nconfiguration and name registries have low write-to-read ratios, writes are\nusually strongly consistent. To scale for reads, you can scale by\nasynchronously replicating read replicas at the expense of less consistency")]),e._v(" "),s("p",[e._v("Consensus protocols like Zab, Paxos, and Raft is a very deep and\ncomplicated topic. It is unlikely an interviewer will ask you about the nittygritty of a consensus protocol unless you have deep experience in that area.")]),e._v(" "),s("p",[e._v("There are videos online about Raft to build a good feel of the consensus\nprotocol, but to ask you to prove a consensus protocol will be outside the\nrealm of a generalist interview.")]),e._v(" "),s("h2",{attrs:{id:"neo4j"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#neo4j"}},[e._v("#")]),e._v(" Neo4j")]),e._v(" "),s("ul",[s("li",[e._v("Connected Data")]),e._v(" "),s("li",[e._v("Routing, Dispatch, and location-based services")]),e._v(" "),s("li",[e._v("Recommendation Engines\n"),s("ul",[s("li",[e._v("Collaborative Filtering based Recommendation")]),e._v(" "),s("li",[e._v("Personalized Recommendation")])])])]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("RDBMS")]),e._v(" "),s("th",[e._v("GraphDB")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("Tabular form")]),e._v(" "),s("td",[e._v("Graph form")])]),e._v(" "),s("tr",[s("td",[e._v("Stores highly structured data")]),e._v(" "),s("td",[e._v("Maintains semi structured data")])]),e._v(" "),s("tr",[s("td",[e._v("Depends on key contraints")]),e._v(" "),s("td",[e._v("Relationships are first-class citizends. Constraints can be represents using relationships")])]),e._v(" "),s("tr",[s("td",[e._v("Data is normalized, meaning lots of joins, affecting speed")]),e._v(" "),s("td",[e._v("Better performance (?)")])]),e._v(" "),s("tr",[s("td",[e._v("Expensive with join operations")]),e._v(" "),s("td",[e._v("Eliminates the need for an expensive search / match computation")])])])]),e._v(" "),s("p",[s("a",{attrs:{href:"https://www.ucssolutions.com/blog/connecting-the-dots-with-neo4j/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Read more"),s("OutboundLink")],1)]),e._v(" "),s("ul",[s("li",[e._v("OLAP: Online Analytical Processing")])]),e._v(" "),s("p",[e._v("https://www.guru99.com/nosql-tutorial.html")]),e._v(" "),s("p",[e._v("https://blog.bytebytego.com/p/understanding-database-types")])],1)}),[],!1,null,null,null);a.default=o.exports},564:function(e,a,t){e.exports=t.p+"assets/img/db-cap.dc9d277f.png"},565:function(e,a,t){e.exports=t.p+"assets/img/choose-db.07a9b05d.jpeg"},566:function(e,a,t){e.exports=t.p+"assets/img/polyglot.cdb5e015.png"}}]);