(window.webpackJsonp=window.webpackJsonp||[]).push([[324],{952:function(e,t,s){"use strict";s.r(t);var o=s(7),i=Object(o.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"_21-conclusion"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_21-conclusion"}},[e._v("#")]),e._v(" 21. Conclusion")]),e._v(" "),s("p",[e._v("This book is about one thing: complexity. Dealing with complexity is the\nmost important challenge in software design. It is what makes systems\nhard to build and maintain, and it often makes them slow as well. Over the\ncourse of the book I have tried to describe the root causes that lead to\ncomplexity, such as dependencies and obscurity. I have discussed red flags\nthat can help you identify unnecessary complexity, such as information\nleakage, unneeded error conditions, or names that are too generic. I have\npresented some general ideas you can use to create simpler software\nsystems, such as striving for classes that are deep and generic, defining\nerrors out of existence, and separating interface documentation from\nimplementation documentation. And, finally, I have discussed the\ninvestment mindset needed to produce simple designs.")]),e._v(" "),s("p",[e._v("The downside of all these suggestions is that they create extra work in\nthe early stages of a project. Furthermore, if you arenâ€™t used to thinking\nabout design issues, then you will slow down even more while you learn\ngood design techniques. If the only thing that matters to you is making\nyour current code work as soon as possible, then thinking about design\nwill seem like drudge work that is getting in the way of your real goal.")]),e._v(" "),s("p",[e._v("On the other hand, if good design is an important goal for you, then the\nideas in this book should make programming more fun. Design is a\nfascinating puzzle: how can a particular problem be solved with the\nsimplest possible structure? Itâ€™s fun to explore different approaches, and\nitâ€™s a great feeling to discover a solution that is both simple and powerful.\nA clean, simple, and obvious design is a beautiful thing.")]),e._v(" "),s("p",[e._v("Furthermore, the investments you make in good design will pay off\nquickly. The modules you defined carefully at the beginning of a project")]),e._v(" "),s("p",[e._v("will save you time later as you reuse them over and over. The clear\ndocumentation that you wrote six months ago will save you time when you\nreturn to the code to add a new feature. The time you spent honing your\ndesign skills will also pay for itself: as your skills and experience grow,\nyou will find that you can produce good designs more and more quickly.\nGood design doesnâ€™t really take much longer than quick-and-dirty design,\nonce you know how.")]),e._v(" "),s("p",[e._v("The reward for being a good designer is that you get to spend a larger\nfraction of your time in the design phase, which is fun. Poor designers\nspend most of their time chasing bugs in complicated and brittle code. If\nyou improve your design skills, not only will you produce higher quality\nsoftware more quickly, but the software development process will be more\nenjoyable.")]),e._v(" "),s("h2",{attrs:{id:"summary-of-design-principles"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#summary-of-design-principles"}},[e._v("#")]),e._v(" Summary of Design Principles")]),e._v(" "),s("p",[e._v("Here are the most important software design principles discussed in this\nbook:")]),e._v(" "),s("ol",[s("li",[e._v("Complexity is incremental: you have to sweat the small stuff ("),s("RouterLink",{attrs:{to:"/kungfu/philosophy/c2.html#_2-4-complexity-is-incremental"}},[e._v("see")]),e._v(").")],1),e._v(" "),s("li",[e._v("Working code isnâ€™t enough ("),s("RouterLink",{attrs:{to:"/kungfu/philosophy/c3.html"}},[e._v("see")]),e._v(").")],1),e._v(" "),s("li",[e._v("Make continual small investments to improve system design (see p.15 ).")]),e._v(" "),s("li",[e._v("Modules should be deep ("),s("RouterLink",{attrs:{to:"/kungfu/philosophy/c4.html"}},[e._v("see")]),e._v(").")],1),e._v(" "),s("li",[e._v("Interfaces should be designed to make the most common usage as simple as possible (see p. 27).")]),e._v(" "),s("li",[e._v("Itâ€™s more important for a module to have a simple interface than a simple implementation (see pp. 55, 71 ).")]),e._v(" "),s("li",[e._v("General-purpose modules are deeper (see p. 39).")]),e._v(" "),s("li",[e._v("Separate general-purpose and special-purpose code (see p. 62).")]),e._v(" "),s("li",[e._v("Different layers should have different abstractions (see p. 45).")]),e._v(" "),s("li",[e._v("Pull complexity downward (see p. 55).")]),e._v(" "),s("li",[e._v("Define errors (and special cases) out of existence (see p. 79).")]),e._v(" "),s("li",[e._v("Design it twice ("),s("RouterLink",{attrs:{to:"/kungfu/philosophy/c11.html"}},[e._v("see")]),e._v(").")],1),e._v(" "),s("li",[e._v("Comments should describe things that are not obvious from the code (("),s("RouterLink",{attrs:{to:"/kungfu/philosophy/c13.html"}},[e._v("see")]),e._v(").).")],1),e._v(" "),s("li",[e._v("Software should be designed for ease of reading, not ease of writing (see p. 149).")]),e._v(" "),s("li",[e._v("The increments of software development should be abstractions, not features (see p. 154).")])]),e._v(" "),s("h2",{attrs:{id:"summary-of-red-flags"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#summary-of-red-flags"}},[e._v("#")]),e._v(" Summary of Red Flags")]),e._v(" "),s("p",[e._v("Here are a few of of the most important red flags discussed in this book.\nThe presence of any of these symptoms in a system suggests that there is a\nproblem with the systemâ€™s design:")]),e._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[e._v("ðŸš© Shallow Module ðŸš©")]),e._v(" "),s("p",[e._v("the interface for a class or method isnâ€™t much simpler than its implementation")])]),e._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[e._v("ðŸš© Shallow Module ðŸš©")]),e._v(" "),s("p",[e._v("Information Leakage: a design decision is reflected in multiple modules")])]),e._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[e._v("ðŸš© Temporal Decomposition ðŸš©")]),e._v(" "),s("p",[e._v("the code structure is based on the order in which operations are executed, not on information hiding")])]),e._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[e._v("ðŸš© Overexposure ðŸš©")]),e._v(" "),s("p",[e._v("An API forces callers to be aware of rarely used features in order to use commonly used features")])]),e._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[e._v("ðŸš© Pass-Through Method ðŸš©")]),e._v(" "),s("p",[e._v("a method does almost nothing except pass its arguments to another method with a similar signature")])]),e._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[e._v("ðŸš© Repetition ðŸš©")]),e._v(" "),s("p",[e._v("a nontrivial piece of code is repeated over and over")])]),e._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[e._v("ðŸš© Special-General Mixture ðŸš©")]),e._v(" "),s("p",[e._v("special-purpose code is not cleanly separated from general purpose code")])]),e._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[e._v("ðŸš© Conjoined Methods ðŸš©")]),e._v(" "),s("p",[e._v("two methods have so many dependencies that its hard to understand the implementation of one without understanding the implementation of the other")])]),e._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[e._v("ðŸš© Comment Repeats Code ðŸš©")]),e._v(" "),s("p",[e._v("all of the information in a comment is immediately obvious from the code next to the comment")])]),e._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[e._v("ðŸš© Implementation Documentation Contaminates Interface ðŸš©")]),e._v(" "),s("p",[e._v("an interface comment describes implementation details not needed by users of the thing being documented")])]),e._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[e._v("ðŸš© Vague Name ðŸš©")]),e._v(" "),s("p",[e._v("the name of a variable or method is so imprecise that it doesnâ€™t convey much useful information")])]),e._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[e._v("ðŸš© Hard to Pick Name ðŸš©")]),e._v(" "),s("p",[e._v("it is difficult to come up with a precise and intuitive name for an entity")])]),e._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[e._v("ðŸš© Hard to Describe ðŸš©")]),e._v(" "),s("p",[e._v("in order to be complete, the documentation for a variable or method must be long.")])]),e._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[e._v("ðŸš© Nonobvious Code ðŸš©")]),e._v(" "),s("p",[e._v("the behavior or meaning of a piece of code cannot be understood easily.")])]),e._v(" "),s("h2",{attrs:{id:"about-the-author"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#about-the-author"}},[e._v("#")]),e._v(" About the Author")]),e._v(" "),s("p",[e._v("John Ousterhout is the Bosack Lerner Professor of Computer Science at Stanford University. He is the creator of the Tcl scripting language and is also well known for his work in distributed operating systems and storage systems. Ousterhout received a BS degree in Physics from Yale University and a PhD in Computer Science from Carnegie Mellon University. He is a member of the National Academy of Engineering and has received numerous awards, including the ACM Software System Award, the ACM Grace Murray Hopper Award, the National Science Foundation Presidential Young Investigator Award, and the U.C. Berkeley Distinguished Teaching Award.")])])}),[],!1,null,null,null);t.default=i.exports}}]);