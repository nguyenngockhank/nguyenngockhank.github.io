(window.webpackJsonp=window.webpackJsonp||[]).push([[238],{805:function(e,t,n){"use strict";n.r(t);var a=n(7),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_10-classes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-classes"}},[e._v("#")]),e._v(" 10. Classes")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("with Jeff Langr\n")])])]),n("p",[e._v("So far in this book we have focused on how to write lines and blocks of code well. We have\ndelved into proper composition of functions and how they interrelate. But for all the atten-\ntion to the expressiveness of code statements and the functions they comprise, we still\ndon’t have clean code until we’ve paid attention to higher levels of code organization. Let’s\ntalk about clean classes.")]),e._v(" "),n("p",[e._v("136 "),n("strong",[e._v("Chapter 10: Classes")])]),e._v(" "),n("h2",{attrs:{id:"class-organization"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#class-organization"}},[e._v("#")]),e._v(" Class Organization")]),e._v(" "),n("p",[e._v("Following the standard Java convention, a class should begin with a list of variables. Pub-\nlic static constants, if any, should come first. Then private static variables, followed by pri-\nvate instance variables. There is seldom a good reason to have a public variable.")]),e._v(" "),n("p",[e._v("Public functions should follow the list of variables. We like to put the private utilities\ncalled by a public function right after the public function itself. This follows the stepdown\nrule and helps the program read like a newspaper article.")]),e._v(" "),n("h3",{attrs:{id:"encapsulation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#encapsulation"}},[e._v("#")]),e._v(" Encapsulation .")]),e._v(" "),n("p",[e._v("We like to keep our variables and utility functions private, but we’re not fanatic about it.\nSometimes we need to make a variable or utility function protected so that it can be\naccessed by a test. For us, tests rule. If a test in the same package needs to call a function\nor access a variable, we’ll make it protected or package scope. However, we’ll first look for\na way to maintain privacy. Loosening encapsulation is always a last resort.")]),e._v(" "),n("h2",{attrs:{id:"classes-should-be-small"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#classes-should-be-small"}},[e._v("#")]),e._v(" Classes Should Be Small!")]),e._v(" "),n("p",[e._v("The first rule of classes is that they should be small. The second rule of classes is that they\nshould be smaller than that. No, we’re not going to repeat the exact same text from the\n"),n("em",[e._v("Functions")]),e._v(" chapter. But as with functions, smaller is the primary rule when it comes to\ndesigning classes. As with functions, our immediate question is always “How small?”")]),e._v(" "),n("p",[e._v("With functions we measured size by counting physical lines. With classes we use a\ndifferent measure. We count "),n("em",[e._v("responsibilities.")]),e._v("^1")]),e._v(" "),n("p",[e._v("Listing 10-1 outlines a class, SuperDashboard, that exposes about 70 public methods.\nMost developers would agree that it’s a bit too super in size. Some developers might refer\ntoSuperDashboard as a “God class.”")]),e._v(" "),n("ol",[n("li",[e._v("[RDD].")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing 10-1\nToo Many Responsibilities\npublic class SuperDashboard extends JFrame implements MetaDataUser\npublic String getCustomizerLanguagePath()\npublic void setSystemConfigPath(String systemConfigPath)\npublic String getSystemConfigDocument()\npublic void setSystemConfigDocument(String systemConfigDocument)\npublic boolean getGuruState()\npublic boolean getNoviceState()\npublic boolean getOpenSourceState()\npublic void showObject(MetaObject object)\npublic void showProgress(String s)\n")])])]),n("p",[n("strong",[e._v("Classes Should Be Small!")]),e._v(" 137")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public boolean isMetadataDirty()\npublic void setIsMetadataDirty(boolean isMetadataDirty)\npublic Component getLastFocusedComponent()\npublic void setLastFocused(Component lastFocused)\npublic void setMouseSelectState(boolean isMouseSelected)\npublic boolean isMouseSelected()\npublic LanguageManager getLanguageManager()\npublic Project getProject()\npublic Project getFirstProject()\npublic Project getLastProject()\npublic String getNewProjectName()\npublic void setComponentSizes(Dimension dim)\npublic String getCurrentDir()\npublic void setCurrentDir(String newDir)\npublic void updateStatus(int dotPos, int markPos)\npublic Class[] getDataBaseClasses()\npublic MetadataFeeder getMetadataFeeder()\npublic void addProject(Project project)\npublic boolean setCurrentProject(Project project)\npublic boolean removeProject(Project project)\npublic MetaProjectHeader getProgramMetadata()\npublic void resetDashboard()\npublic Project loadProject(String fileName, String projectName)\npublic void setCanSaveMetadata(boolean canSave)\npublic MetaObject getSelectedObject()\npublic void deselectObjects()\npublic void setProject(Project project)\npublic void editorAction(String actionName, ActionEvent event)\npublic void setMode(int mode)\npublic FileManager getFileManager()\npublic void setFileManager(FileManager fileManager)\npublic ConfigManager getConfigManager()\npublic void setConfigManager(ConfigManager configManager)\npublic ClassLoader getClassLoader()\npublic void setClassLoader(ClassLoader classLoader)\npublic Properties getProps()\npublic String getUserHome()\npublic String getBaseDir()\npublic int getMajorVersionNumber()\npublic int getMinorVersionNumber()\npublic int getBuildNumber()\npublic MetaObject pasting(\nMetaObject target, MetaObject pasted, MetaProject project)\npublic void processMenuItems(MetaObject metaObject)\npublic void processMenuSeparators(MetaObject metaObject)\npublic void processTabPages(MetaObject metaObject)\npublic void processPlacement(MetaObject object)\npublic void processCreateLayout(MetaObject object)\npublic void updateDisplayLayer(MetaObject object, int layerIndex)\npublic void propertyEditedRepaint(MetaObject object)\npublic void processDeleteObject(MetaObject object)\npublic boolean getAttachedToDesigner()\npublic void processProjectChangedState(boolean hasProjectChanged)\npublic void processObjectNameChanged(MetaObject object)\npublic void runProject()\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing 10-1 (continued)\nToo Many Responsibilities\n")])])]),n("p",[e._v("138 "),n("strong",[e._v("Chapter 10: Classes")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("But what if SuperDashboard contained only the methods shown in Listing 10-2?\n")])])]),n("p",[e._v("Five methods isn’t too much, is it? In this case it is because despite its small number\nof methods, SuperDashboard has too many "),n("em",[e._v("responsibilities")]),e._v(".")]),e._v(" "),n("p",[e._v("The name of a class should describe what responsibilities it fulfills. In fact, naming\nis probably the first way of helping determine class size. If we cannot derive a concise\nname for a class, then it’s likely too large. The more ambiguous the class name, the more\nlikely it has too many responsibilities. For example, class names including weasel words\nlike Processor or Manager or Super often hint at unfortunate aggregation of\nresponsibilities.")]),e._v(" "),n("p",[e._v("We should also be able to write a brief description of the class in about 25 words,\nwithout using the words “if,” “and,” “or,” or “but.” How would we describe the\nSuperDashboard? “The SuperDashboardprovides access to the component that last held the\nfocus, and it also allows us to track the version and build numbers.” The first “and” is a\nhint that SuperDashboard has too many responsibilities.")]),e._v(" "),n("h3",{attrs:{id:"the-single-responsibility-principle"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#the-single-responsibility-principle"}},[e._v("#")]),e._v(" The Single Responsibility Principle ...")]),e._v(" "),n("p",[e._v("The Single Responsibility Principle (SRP)^2 states that a class or module should have one,\nand only one, "),n("em",[e._v("reason to change")]),e._v(". This principle gives us both a definition of responsibility,\nand a guidelines for class size. Classes should have one responsibility—one reason to\nchange.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public void setAçowDragging(boolean allowDragging)\npublic boolean allowDragging()\npublic boolean isCustomizing()\npublic void setTitle(String title)\npublic IdeMenuBar getIdeMenuBar()\npublic void showHelper(MetaObject metaObject, String propertyName)\n// ... many non-public methods follow ...\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing 10-2\nSmall Enough?\npublic class SuperDashboard extends JFrame implements MetaDataUser\npublic Component getLastFocusedComponent()\npublic void setLastFocused(Component lastFocused)\npublic int getMajorVersionNumber()\npublic int getMinorVersionNumber()\npublic int getBuildNumber()\n}\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[e._v("You can read much more about this principle in [PPP].")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing 10-1 (continued)\nToo Many Responsibilities\n")])])]),n("p",[n("strong",[e._v("Classes Should Be Small!")]),e._v(" 139")]),e._v(" "),n("p",[e._v("The seemingly small SuperDashboardclass in Listing 10-2 has two reasons to change.\nFirst, it tracks version information that would seemingly need to be updated every time the\nsoftware gets shipped. Second, it manages Java Swing components (it is a derivative of\nJFrame, the Swing representation of a top-level GUI window). No doubt we’ll want to\nupdate the version number if we change any of the Swing code, but the converse isn’t nec-\nessarily true: We might change the version information based on changes to other code in\nthe system.")]),e._v(" "),n("p",[e._v("Trying to identify responsibilities (reasons to change) often helps us recognize and\ncreate better abstractions in our code. We can easily extract all three SuperDashboard\nmethods that deal with version information into a separate class named Version.(See\nListing 10-3.) The Versionclass is a construct that has a high potential for reuse in other\napplications!")]),e._v(" "),n("p",[e._v("SRP is one of the more important concept in OO design. It’s also one of the simpler\nconcepts to understand and adhere to. Yet oddly, SRP is often the most abused class design\nprinciple. We regularly encounter classes that do far too many things. Why?")]),e._v(" "),n("p",[e._v("Getting software to work and making software clean are two very different activities.\nMost of us have limited room in our heads, so we focus on getting our code to work more\nthan organization and cleanliness. This is wholly appropriate. Maintaining a separation of\nconcerns is just as important in our programming "),n("em",[e._v("activities")]),e._v(" as it is in our programs.")]),e._v(" "),n("p",[e._v("The problem is that too many of us think that we are done once the program works.\nWe fail to switch to the "),n("em",[e._v("other")]),e._v(" concern of organization and cleanliness. We move on to the\nnext problem rather than going back and breaking the overstuffed classes into decoupled\nunits with single responsibilities.")]),e._v(" "),n("p",[e._v("At the same time, many developers fear that a large number of small, single-purpose\nclasses makes it more difficult to understand the bigger picture. They are concerned that\nthey must navigate from class to class in order to figure out how a larger piece of work gets\naccomplished.")]),e._v(" "),n("p",[e._v("However, a system with many small classes has no more moving parts than a system\nwith a few large classes. There is just as much to learn in the system with a few large\nclasses. So the question is: Do you want your tools organized into toolboxes with many\nsmall drawers each containing well-defined and well-labeled components? Or do you want\na few drawers that you just toss everything into?")]),e._v(" "),n("p",[e._v("Every sizable system will contain a large amount of logic and complexity. The pri-\nmary goal in managing such complexity is to "),n("em",[e._v("organize")]),e._v(" it so that a developer knows where")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing 10-3\nA single-responsibility class\npublic class Version {\npublic int getMajorVersionNumber()\npublic int getMinorVersionNumber()\npublic int getBuildNumber()\n}\n")])])]),n("p",[e._v("140 "),n("strong",[e._v("Chapter 10: Classes")])]),e._v(" "),n("p",[e._v("to look to find things and need only understand the directly affected complexity at any\ngiven time. In contrast, a system with larger, multipurpose classes always hampers us by\ninsisting we wade through lots of things we don’t need to know right now.")]),e._v(" "),n("p",[e._v("To restate the former points for emphasis: We want our systems to be composed of\nmany small classes, not a few large ones. Each small class encapsulates a single responsi-\nbility, has a single reason to change, and collaborates with a few others to achieve the\ndesired system behaviors.")]),e._v(" "),n("h3",{attrs:{id:"cohesion"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cohesion"}},[e._v("#")]),e._v(" Cohesion.")]),e._v(" "),n("p",[e._v("Classes should have a small number of instance variables. Each of the methods of a class\nshould manipulate one or more of those variables. In general the more variables a method\nmanipulates the more cohesive that method is to its class. A class in which each variable is\nused by each method is maximally cohesive.")]),e._v(" "),n("p",[e._v("In general it is neither advisable nor possible to create such maximally cohesive\nclasses; on the other hand, we would like cohesion to be high. When cohesion is high, it\nmeans that the methods and variables of the class are co-dependent and hang together as a\nlogical whole.")]),e._v(" "),n("p",[e._v("Consider the implementation of a Stackin Listing 10-4. This is a very cohesive class.\nOf the three methods only size() fails to use both the variables.")]),e._v(" "),n("p",[e._v("The strategy of keeping functions small and keeping parameter lists short can some-\ntimes lead to a proliferation of instance variables that are used by a subset of methods.\nWhen this happens, it almost always means that there is at least one other class trying to")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing 10-4\nStack.java A cohesive class.\npublic class Stack {\nprivate int topOfStack = 0;\nList<Integer> elements = new LinkedList<Integer>();\npublic int size() {\nreturn topOfStack;\n}\npublic void push(int element) {\ntopOfStack++;\nelements.add(element);\n}\npublic int pop() throws PoppedWhenEmpty {\nif (topOfStack == 0)\nthrow new PoppedWhenEmpty();\nint element = elements.get(--topOfStack);\nelements.remove(topOfStack);\nreturn element;\n}\n}\n")])])]),n("p",[n("strong",[e._v("Classes Should Be Small!")]),e._v(" 141")]),e._v(" "),n("p",[e._v("get out of the larger class. You should try to separate the variables and methods into two or\nmore classes such that the new classes are more cohesive.")]),e._v(" "),n("h3",{attrs:{id:"maintaining-cohesion-results-in-many-small-classes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#maintaining-cohesion-results-in-many-small-classes"}},[e._v("#")]),e._v(" Maintaining Cohesion Results in Many Small Classes..")]),e._v(" "),n("p",[e._v("Just the act of breaking large functions into smaller functions causes a proliferation of\nclasses. Consider a large function with many variables declared within it. Let’s say you\nwant to extract one small part of that function into a separate function. However, the code\nyou want to extract uses four of the variables declared in the function. Must you pass all\nfour of those variables into the new function as arguments?")]),e._v(" "),n("p",[e._v("Not at all! If we promoted those four variables to instance variables of the class, then\nwe could extract the code without passing "),n("em",[e._v("any")]),e._v(" variables at all. It would be "),n("em",[e._v("easy")]),e._v(" to break\nthe function up into small pieces.")]),e._v(" "),n("p",[e._v("Unfortunately, this also means that our classes lose cohesion because they accumulate\nmore and more instance variables that exist solely to allow a few functions to share them.\nBut wait! If there are a few functions that want to share certain variables, doesn’t that\nmake them a class in their own right? Of course it does. When classes lose cohesion, split\nthem!")]),e._v(" "),n("p",[e._v("So breaking a large function into many smaller functions often gives us the opportu-\nnity to split several smaller classes out as well. This gives our program a much better orga-\nnization and a more transparent structure.")]),e._v(" "),n("p",[e._v("As a demonstration of what I mean, let’s use a time-honored example taken from\nKnuth’s wonderful book "),n("em",[e._v("Literate Programming.")]),e._v("^3 Listing 10-5 shows a translation into Java\nof Knuth’s PrintPrimes program. To be fair to Knuth, this is not the program as he wrote it\nbut rather as it was output by his WEB tool. I’m using it because it makes a great starting\nplace for breaking up a big function into many smaller functions and classes.")]),e._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[e._v("[Knuth92].")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing 10-5\nPrintPrimes.java\npackage literatePrimes;\npublic class PrintPrimes {\npublic static void main(String[] args) {\nfinal int M = 1000;\nfinal int RR = 50;\nfinal int CC = 4;\nfinal int WW = 10;\nfinal int ORDMAX = 30;\nint P[] = new int[M + 1];\nint PAGENUMBER;\nint PAGEOFFSET;\nint ROWOFFSET;\nint C;\n")])])]),n("p",[e._v("142 "),n("strong",[e._v("Chapter 10: Classes")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('int J;\nint K;\nboolean JPRIME;\nint ORD;\nint SQUARE;\nint N;\nint MULT[] = new int[ORDMAX + 1];\nJ = 1;\nK = 1;\nP[1] = 2;\nORD = 2;\nSQUARE = 9;\nwhile (K < M) {\ndo {\nJ = J + 2;\nif (J == SQUARE) {\nORD = ORD + 1;\nSQUARE = P[ORD] * P[ORD];\nMULT[ORD - 1] = J;\n}\nN = 2;\nJPRIME = true;\nwhile (N < ORD && JPRIME) {\nwhile (MULT[N] < J)\nMULT[N] = MULT[N] + P[N] + P[N];\nif (MULT[N] == J)\nJPRIME = false;\nN = N + 1;\n}\n} while (!JPRIME);\nK = K + 1;\nP[K] = J;\n}\n{\nPAGENUMBER = 1;\nPAGEOFFSET = 1;\nwhile (PAGEOFFSET <= M) {\nSystem.out.println("The First " + M +\n" Prime Numbers --- Page " + PAGENUMBER);\nSystem.out.println("");\nfor (ROWOFFSET = PAGEOFFSET; ROWOFFSET < PAGEOFFSET + RR; ROWOFFSET++){\nfor (C = 0; C < CC;C++)\nif (ROWOFFSET + C * RR <= M)\nSystem.out.format("%10d", P[ROWOFFSET + C * RR]);\nSystem.out.println("");\n}\nSystem.out.println("\\f");\nPAGENUMBER = PAGENUMBER + 1;\nPAGEOFFSET = PAGEOFFSET + RR * CC;\n}\n}\n}\n}\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing 10-5 (continued)\nPrintPrimes.java\n")])])]),n("p",[n("strong",[e._v("Classes Should Be Small!")]),e._v(" 143")]),e._v(" "),n("p",[e._v("This program, written as a single function, is a mess. It has a deeply indented struc-\nture, a plethora of odd variables, and a tightly coupled structure. At the very least, the one\nbig function should be split up into a few smaller functions.")]),e._v(" "),n("p",[e._v("Listing 10-6 through Listing 10-8 show the result of splitting the code in Listing 10-5\ninto smaller classes and functions, and choosing meaningful names for those classes, func-\ntions, and variables.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('Listing 10-6\nPrimePrinter.java (refactored)\npackage literatePrimes;\npublic class PrimePrinter {\npublic static void main(String[] args) {\nfinal int NUMBER_OF_PRIMES = 1000;\nint[] primes = PrimeGenerator.generate(NUMBER_OF_PRIMES);\nfinal int ROWS_PER_PAGE = 50;\nfinal int COLUMNS_PER_PAGE = 4;\nRowColumnPagePrinter tablePrinter =\nnew RowColumnPagePrinter(ROWS_PER_PAGE,\nCOLUMNS_PER_PAGE,\n"The First " + NUMBER_OF_PRIMES +\n" Prime Numbers");\ntablePrinter.print(primes);\n}\n}\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing 10-7\nRowColumnPagePrinter.java\npackage literatePrimes;\nimport java.io.PrintStream;\npublic class RowColumnPagePrinter {\nprivate int rowsPerPage;\nprivate int columnsPerPage;\nprivate int numbersPerPage;\nprivate String pageHeader;\nprivate PrintStream printStream;\npublic RowColumnPagePrinter(int rowsPerPage,\nint columnsPerPage,\nString pageHeader) {\nthis.rowsPerPage = rowsPerPage;\nthis.columnsPerPage = columnsPerPage;\nthis.pageHeader = pageHeader;\nnumbersPerPage = rowsPerPage * columnsPerPage;\nprintStream = System.out;\n}\n")])])]),n("p",[e._v("144 "),n("strong",[e._v("Chapter 10: Classes")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public void print(int data[]) {\nint pageNumber = 1;\nfor (int firstIndexOnPage = 0;\nfirstIndexOnPage < data.length;\nfirstIndexOnPage += numbersPerPage) {\nint lastIndexOnPage =\nMath.min(firstIndexOnPage + numbersPerPage - 1,\ndata.length - 1);\nprintPageHeader(pageHeader, pageNumber);\nprintPage(firstIndexOnPage, lastIndexOnPage, data);\nprintStream.println("\\f");\npageNumber++;\n}\n}\nprivate void printPage(int firstIndexOnPage,\nint lastIndexOnPage,\nint[] data) {\nint firstIndexOfLastRowOnPage =\nfirstIndexOnPage + rowsPerPage - 1;\nfor (int firstIndexInRow = firstIndexOnPage;\nfirstIndexInRow <= firstIndexOfLastRowOnPage;\nfirstIndexInRow++) {\nprintRow(firstIndexInRow, lastIndexOnPage, data);\nprintStream.println("");\n}\n}\nprivate void printRow(int firstIndexInRow,\nint lastIndexOnPage,\nint[] data) {\nfor (int column = 0; column < columnsPerPage; column++) {\nint index = firstIndexInRow + column * rowsPerPage;\nif (index <= lastIndexOnPage)\nprintStream.format("%10d", data[index]);\n}\n}\nprivate void printPageHeader(String pageHeader,\nint pageNumber) {\nprintStream.println(pageHeader + " --- Page " + pageNumber);\nprintStream.println("");\n}\npublic void setOutput(PrintStream printStream) {\nthis.printStream = printStream;\n}\n}\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing 10-7 (continued)\nRowColumnPagePrinter.java\n")])])]),n("p",[n("strong",[e._v("Classes Should Be Small!")]),e._v(" 145")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing 10-8\nPrimeGenerator.java\npackage literatePrimes;\nimport java.util.ArrayList;\npublic class PrimeGenerator {\nprivate static int[] primes;\nprivate static ArrayList<Integer> multiplesOfPrimeFactors;\nprotected static int[] generate(int n) {\nprimes = new int[n];\nmultiplesOfPrimeFactors = new ArrayList<Integer>();\nset2AsFirstPrime();\ncheckOddNumbersForSubsequentPrimes();\nreturn primes;\n}\nprivate static void set2AsFirstPrime() {\nprimes[0] = 2;\nmultiplesOfPrimeFactors.add(2);\n}\nprivate static void checkOddNumbersForSubsequentPrimes() {\nint primeIndex = 1;\nfor (int candidate = 3;\nprimeIndex < primes.length;\ncandidate += 2) {\nif (isPrime(candidate))\nprimes[primeIndex++] = candidate;\n}\n}\nprivate static boolean isPrime(int candidate) {\nif (isLeastRelevantMultipleOfNextLargerPrimeFactor(candidate)) {\nmultiplesOfPrimeFactors.add(candidate);\nreturn false;\n}\nreturn isNotMultipleOfAnyPreviousPrimeFactor(candidate);\n}\nprivate static boolean\nisLeastRelevantMultipleOfNextLargerPrimeFactor(int candidate) {\nint nextLargerPrimeFactor = primes[multiplesOfPrimeFactors.size()];\nint leastRelevantMultiple = nextLargerPrimeFactor * nextLargerPrimeFactor;\nreturn candidate == leastRelevantMultiple;\n}\nprivate static boolean\nisNotMultipleOfAnyPreviousPrimeFactor(int candidate) {\nfor (int n = 1; n < multiplesOfPrimeFactors.size(); n++) {\nif (isMultipleOfNthPrimeFactor(candidate, n))\nreturn false;\n}\n")])])]),n("p",[e._v("146 "),n("strong",[e._v("Chapter 10: Classes")])]),e._v(" "),n("p",[e._v("The first thing you might notice is that the program got a lot longer. It went from a\nlittle over one page to nearly three pages in length. There are several reasons for this\ngrowth. First, the refactored program uses longer, more descriptive variable names.\nSecond, the refactored program uses function and class declarations as a way to add\ncommentary to the code. Third, we used whitespace and formatting techniques to keep\nthe program readable.")]),e._v(" "),n("p",[e._v("Notice how the program has been split into three main responsibilities. The main\nprogram is contained in the PrimePrinterclass all by itself. Its responsibility is to handle\nthe execution environment. It will change if the method of invocation changes. For\nexample, if this program were converted to a SOAP service, this is the class that would\nbe affected.")]),e._v(" "),n("p",[e._v("TheRowColumnPagePrinterknows all about how to format a list of numbers into\npages with a certain number of rows and columns. If the formatting of the output needed\nchanging, then this is the class that would be affected.")]),e._v(" "),n("p",[e._v("ThePrimeGeneratorclass knows how to generate a list prime numbers. Notice that it\nis not meant to be instantiated as an object. The class is just a useful scope in which\nits variables can be declared and kept hidden. This class will change if the algorithm for\ncomputing prime numbers changes.")]),e._v(" "),n("p",[e._v("This was not a rewrite! We did not start over from scratch and write the program over\nagain. Indeed, if you look closely at the two different programs, you’ll see that they use the\nsame algorithm and mechanics to get their work done.")]),e._v(" "),n("p",[e._v("The change was made by writing a test suite that verified the "),n("em",[e._v("precise")]),e._v(" behavior of the\nfirst program. Then a myriad of tiny little changes were made, one at a time. After each\nchange the program was executed to ensure that the behavior had not changed. One tiny\nstep after another, the first program was cleaned up and transformed into the second.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("return true;\n}\nprivate static boolean\nisMultipleOfNthPrimeFactor(int candidate, int n) {\nreturn\ncandidate == smallestOddNthMultipleNotLessThanCandidate(candidate, n);\n}\nprivate static int\nsmallestOddNthMultipleNotLessThanCandidate(int candidate, int n) {\nint multiple = multiplesOfPrimeFactors.get(n);\nwhile (multiple < candidate)\nmultiple += 2 * primes[n];\nmultiplesOfPrimeFactors.set(n, multiple);\nreturn multiple;\n}\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing 10-8 (continued)\nPrimeGenerator.java\n")])])]),n("p",[n("strong",[e._v("Organizing for Change")]),e._v(" 147")]),e._v(" "),n("h2",{attrs:{id:"organizing-for-change"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#organizing-for-change"}},[e._v("#")]),e._v(" Organizing for Change .")]),e._v(" "),n("p",[e._v("For most systems, change is continual. Every change subjects us to the risk that the\nremainder of the system no longer works as intended. In a clean system we organize our\nclasses so as to reduce the risk of change.")]),e._v(" "),n("p",[e._v("TheSqlclass in Listing 10-9 is used to generate properly formed SQL strings given\nappropriate metadata. It’s a work in progress and, as such, doesn’t yet support SQL func-\ntionality like updatestatements. When the time comes for the Sqlclass to support an\nupdatestatement, we’ll have to “open up” this class to make modifications. The problem\nwith opening a class is that it introduces risk. Any modifications to the class have the\npotential of breaking other code in the class. It must be fully retested.")]),e._v(" "),n("p",[e._v("TheSqlclass must change when we add a new type of statement. It also must change\nwhen we alter the details of a single statement type—for example, if we need to modify\ntheselectfunctionality to support subselects. These two reasons to change mean that the\nSql class violates the SRP.")]),e._v(" "),n("p",[e._v("We can spot this SRP violation from a simple organizational standpoint. The method\noutline of Sqlshows that there are private methods, such as selectWithCriteria, that\nappear to relate only to select statements.")]),e._v(" "),n("p",[e._v("Private method behavior that applies only to a small subset of a class can be a useful\nheuristic for spotting potential areas for improvement. However, the primary spur for tak-\ning action should be system change itself. If the Sqlclass is deemed logically complete,\nthen we need not worry about separating the responsibilities. If we won’t need update\nfunctionality for the foreseeable future, then we should leave Sqlalone. But as soon as we\nfind ourselves opening up a class, we should consider fixing our design.")]),e._v(" "),n("p",[e._v("What if we considered a solution like that in Listing 10-10? Each public interface\nmethod defined in the previous Sqlfrom Listing 10-9 is refactored out to its own derivative\nof the Sqlclass. Note that the private methods, such as valuesList, move directly where")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing 10-9\nA class that must be opened for change\npublic class Sql {\npublic Sql(String table, Column[] columns)\npublic String create()\npublic String insert(Object[] fields)\npublic String selectAll()\npublic String findByKey(String keyColumn, String keyValue)\npublic String select(Column column, String pattern)\npublic String select(Criteria criteria)\npublic String preparedInsert()\nprivate String columnList(Column[] columns)\nprivate String valuesList(Object[] fields, final Column[] columns)\nprivate String selectWithCriteria(String criteria)\nprivate String placeholderList(Column[] columns)\n}\n")])])]),n("p",[e._v("148 "),n("strong",[e._v("Chapter 10: Classes")])]),e._v(" "),n("p",[e._v("they are needed. The common private behavior is isolated to a pair of utility classes, Where\nandColumnList.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing 10-10\nA set of closed classes\nabstract public class Sql {\npublic Sql(String table, Column[] columns)\nabstract public String generate();\n}\npublic class CreateSql extends Sql {\npublic CreateSql(String table, Column[] columns)\n@Override public String generate()\n}\npublic class SelectSql extends Sql {\npublic SelectSql(String table, Column[] columns)\n@Override public String generate()\n}\npublic class InsertSql extends Sql {\npublic InsertSql(String table, Column[] columns, Object[] fields)\n@Override public String generate()\nprivate String valuesList(Object[] fields, final Column[] columns)\n}\npublic class SelectWithCriteriaSql extends Sql {\npublic SelectWithCriteriaSql(\nString table, Column[] columns, Criteria criteria)\n@Override public String generate()\n}\npublic class SelectWithMatchSql extends Sql {\npublic SelectWithMatchSql(\nString table, Column[] columns, Column column, String pattern)\n@Override public String generate()\n}\npublic class FindByKeySql extends Sql\npublic FindByKeySql(\nString table, Column[] columns, String keyColumn, String keyValue)\n@Override public String generate()\n}\npublic class PreparedInsertSql extends Sql {\npublic PreparedInsertSql(String table, Column[] columns)\n@Override public String generate() {\nprivate String placeholderList(Column[] columns)\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class Where {\npublic Where(String criteria)\npublic String generate()\n}\n")])])]),n("p",[n("strong",[e._v("Organizing for Change")]),e._v(" 149")]),e._v(" "),n("p",[e._v("The code in each class becomes excruciatingly simple. Our required comprehension\ntime to understand any class decreases to almost nothing. The risk that one function could\nbreak another becomes vanishingly small. From a test standpoint, it becomes an easier\ntask to prove all bits of logic in this solution, as the classes are all isolated from one\nanother.")]),e._v(" "),n("p",[e._v("Equally important, when it’s time to add the updatestatements, none of the existing\nclasses need change! We code the logic to build updatestatements in a new subclass of Sql\nnamedUpdateSql. No other code in the system will break because of this change.")]),e._v(" "),n("p",[e._v("Our restructured Sqllogic represents the best of all worlds. It supports the SRP. It also\nsupports another key OO class design principle known as the Open-Closed Principle, or\nOCP:^4 Classes should be open for extension but closed for modification. Our restructured\nSqlclass is open to allow new functionality via subclassing, but we can make this change\nwhile keeping every other class closed. We simply drop our UpdateSql class in place.")]),e._v(" "),n("p",[e._v("We want to structure our systems so that we muck with as little as possible when we\nupdate them with new or changed features. In an ideal system, we incorporate new fea-\ntures by extending the system, not by making modifications to existing code.")]),e._v(" "),n("h3",{attrs:{id:"isolating-from-change"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#isolating-from-change"}},[e._v("#")]),e._v(" Isolating from Change")]),e._v(" "),n("p",[e._v("Needs will change, therefore code will change. We learned in OO 101 that there are con-\ncrete classes, which contain implementation details (code), and abstract classes, which\nrepresent concepts only. A client class depending upon concrete details is at risk when\nthose details change. We can introduce interfaces and abstract classes to help isolate the\nimpact of those details.")]),e._v(" "),n("p",[e._v("Dependencies upon concrete details create challenges for testing our system. If we’re\nbuilding a Portfolioclass and it depends upon an external TokyoStockExchangeAPI to\nderive the portfolio’s value, our test cases are impacted by the volatility of such a lookup.\nIt’s hard to write a test when we get a different answer every five minutes!")]),e._v(" "),n("p",[e._v("Instead of designing Portfolioso that it directly depends upon TokyoStockExchange,\nwe create an interface, StockExchange, that declares a single method:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public interface StockExchange {\nMoney currentPrice(String symbol);\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class ColumnList {\npublic ColumnList(Column[] columns)\npublic String generate()\n}\n")])])]),n("ol",{attrs:{start:"4"}},[n("li",[e._v("[PPP].")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing 10-10 (continued)\nA set of closed classes\n")])])]),n("p",[e._v("150 "),n("strong",[e._v("Chapter 10: Classes")])]),e._v(" "),n("p",[e._v("We designTokyoStockExchangeto implement this interface. We also make sure that the\nconstructor of Portfolio takes a StockExchange reference as an argument:")]),e._v(" "),n("p",[e._v("public Portfolio {\nprivate StockExchange exchange;\npublic Portfolio(StockExchange exchange) {\nthis.exchange = exchange;\n}\n// ...\n}\nNow our test can create a testable implementation of the StockExchangeinterface that\nemulates the TokyoStockExchange. This test implementation will fix the current value for\nany symbol we use in testing. If our test demonstrates purchasing five shares of Microsoft\nfor our portfolio, we code the test implementation to always return $100 per share of\nMicrosoft. Our test implementation of the StockExchangeinterface reduces to a simple\ntable lookup. We can then write a test that expects $500 for our overall portfolio value.")]),e._v(" "),n("p",[e._v('public class PortfolioTest {\nprivate FixedStockExchangeStub exchange;\nprivate Portfolio portfolio;\n@Before\nprotected void setUp() throws Exception {\nexchange = new FixedStockExchangeStub();\nexchange.fix("MSFT", 100);\nportfolio = new Portfolio(exchange);\n}\n@Test\npublic void GivenFiveMSFTTotalShouldBe500() throws Exception {\nportfolio.add(5, "MSFT");\nAssert.assertEquals(500, portfolio.value());\n}\n}\nIf a system is decoupled enough to be tested in this way, it will also be more flexible\nand promote more reuse. The lack of coupling means that the elements of our system are\nbetter isolated from each other and from change. This isolation makes it easier to under-\nstand each element of the system.')]),e._v(" "),n("p",[e._v("By minimizing coupling in this way, our classes adhere to another class design princi-\nple known as the Dependency Inversion Principle (DIP).^5 In essence, the DIP says that our\nclasses should depend upon abstractions, not on concrete details.")]),e._v(" "),n("p",[e._v("Instead of being dependent upon the implementation details of the TokyoStock-\nExchangeclass, our Portfolioclass is now dependent upon the StockExchangeinterface.\nTheStockExchangeinterface represents the abstract concept of asking for the current price\nof a symbol. This abstraction isolates all of the specific details of obtaining such a price,\nincluding from where that price is obtained.")]),e._v(" "),n("ol",{attrs:{start:"5"}},[n("li",[e._v("[PPP].")])]),e._v(" "),n("p",[n("strong",[e._v("Bibliography")]),e._v(" 151")]),e._v(" "),n("h2",{attrs:{id:"bibliography"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bibliography"}},[e._v("#")]),e._v(" Bibliography ...")]),e._v(" "),n("p",[n("strong",[e._v("[RDD]:")]),e._v(" "),n("em",[e._v("Object Design: Roles, Responsibilities, and Collaborations")]),e._v(" , Rebecca Wirfs-\nBrock et al., Addison-Wesley, 2002.")]),e._v(" "),n("p",[n("strong",[e._v("[PPP]:")]),e._v(" "),n("em",[e._v("Agile Software Development: Principles, Patterns, and Practices")]),e._v(" , Robert C. Martin,\nPrentice Hall, 2002.")]),e._v(" "),n("p",[n("strong",[e._v("[Knuth92]:")]),e._v(" "),n("em",[e._v("Literate Programming,")]),e._v(" Donald E. Knuth, Center for the Study of language\nand Information, Leland Stanford Junior University, 1992.")])])}),[],!1,null,null,null);t.default=s.exports}}]);