(window.webpackJsonp=window.webpackJsonp||[]).push([[158],{1227:function(e,t,o){e.exports=o.p+"assets/img/image--003.ef282791.jpg"},1725:function(e,t,o){"use strict";o.r(t);var a=o(7),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"_3-working-code-isn-t-enough"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-working-code-isn-t-enough"}},[e._v("#")]),e._v(" 3. Working Code Isn’t Enough")]),e._v(" "),a("h2",{attrs:{id:"strategic-vs-tactical-programming"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#strategic-vs-tactical-programming"}},[e._v("#")]),e._v(" (Strategic vs. Tactical Programming)")]),e._v(" "),a("p",[e._v("One of the most important elements of good software design is the\nmindset you adopt when you approach a programming task. Many\norganizations encourage a tactical mindset, focused on getting features\nworking as quickly as possible. However, if you want a good design, you\nmust take a more strategic approach where you invest time to produce\nclean designs and fix problems. This chapter discusses why the strategic\napproach produces better designs and is actually cheaper than the tactical\napproach over the long run.")]),e._v(" "),a("h2",{attrs:{id:"_3-1-tactical-programming"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-tactical-programming"}},[e._v("#")]),e._v(" 3.1 Tactical programming")]),e._v(" "),a("p",[e._v("Most programmers approach software development with a mindset I call "),a("em",[e._v("tactical programming")]),e._v(". In the tactical approach, your main focus is to get something working, such as a new feature or a bug fix. At first glance this seems totally reasonable: what could be more important than writing code that works? However, tactical programming makes it nearly impossible to\nproduce a good system design.")]),e._v(" "),a("p",[e._v("The problem with tactical programming is that it is short-sighted. If\nyou’re programming tactically, you’re trying to finish a task as quickly as\npossible. Perhaps you have a hard deadline. As a result, planning for the\nfuture isn’t a priority. You don’t spend much time looking for the best\ndesign; you just want to get something working soon. You tell yourself\nthat it’s OK to add a bit of complexity or introduce a small kludge or two,\nif that allows the current task to be completed more quickly.")]),e._v(" "),a("p",[e._v("This is how systems become complicated. As discussed in the previous\nchapter, complexity is incremental. It’s not one particular thing that makes\na system complicated, but the accumulation of dozens or hundreds of\nsmall things. If you program tactically, each programming task will\ncontribute a few of these complexities. Each of them probably seems like a\nreasonable compromise in order to finish the current task quickly.\nHowever, the complexities accumulate rapidly, especially if everyone is\nprogramming tactically.")]),e._v(" "),a("p",[e._v("Before long, some of the complexities will start causing problems, and\nyou will begin to wish you hadn’t taken those early shortcuts. But, you will\ntell yourself that it’s more important to get the next feature working than\nto go back and refactor existing code. Refactoring may help out in the long\nrun, but it will definitely slow down the current task. So, you look for\nquick patches to work around any problems you encounter. This just\ncreates more complexity, which then requires more patches. Pretty soon\nthe code is a mess, but by this point things are so bad that it would take\nmonths of work to clean it up. There’s no way your schedule can tolerate\nthat kind of delay, and fixing one or two of the problems doesn’t seem like\nit will make much difference, so you just keep programming tactically.")]),e._v(" "),a("p",[e._v("If you have worked on a large software project for very long, I suspect\nyou have seen tactical programming at work and have experienced the\nproblems that result. Once you start down the tactical path, it’s difficult to\nchange.")]),e._v(" "),a("p",[e._v("Almost every software development organization has at least one\ndeveloper who takes tactical programming to the extreme: a tactical\ntornado. The tactical tornado is a prolific programmer who pumps out\ncode far faster than others but works in a totally tactical fashion. When it\ncomes to implementing a quick feature, nobody gets it done faster than the\ntactical tornado. In some organizations, management treats tactical\ntornadoes as heroes. However, tactical tornadoes leave behind a wake of\ndestruction. They are rarely considered heroes by the engineers who must\nwork with their code in the future. Typically, other engineers must clean up\nthe messes left behind by the tactical tornado, which makes it appear that\nthose engineers (who are the real heroes) are making slower progress than\nthe tactical tornado.")]),e._v(" "),a("h2",{attrs:{id:"_3-2-strategic-programming"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-strategic-programming"}},[e._v("#")]),e._v(" 3.2 Strategic programming")]),e._v(" "),a("p",[e._v("The first step towards becoming a good software designer is to realize that\n"),a("strong",[e._v("working code isn’t enough")]),e._v(". It’s not acceptable to introduce unnecessary\ncomplexities in order to finish your current task faster. The most\nimportant thing is the long-term structure of the system. Most of the code\nin any system is written by extending the existing code base, so your most\nimportant job as a developer is to facilitate those future extensions. Thus,\nyou should not think of “working code” as your primary goal, though of\ncourse your code must work. Your primary goal must be to produce a great\ndesign, which also happens to work. This is strategic programming.")]),e._v(" "),a("p",[e._v("Strategic programming requires an investment mindset. Rather than\ntaking the fastest path to finish your current project, you must invest time\nto improve the design of the system. These investments will slow you\ndown a bit in the short term, but they will speed you up in the long term,\nas illustrated in Figure 3.1.")]),e._v(" "),a("p",[e._v("Some of the investments will be proactive. For example, it’s worth\ntaking a little extra time to find a simple design for each new class; rather\nthan implementing the first idea that comes to mind, try a couple of\nalternative designs and pick the cleanest one. Try to imagine a few ways in\nwhich the system might need to be changed in the future and make sure\nthat will be easy with your design. Writing good documentation is another\nexample of a proactive investment.")]),e._v(" "),a("p",[e._v("Other investments will be reactive. No matter how much you invest up\nfront, there will inevitably be mistakes in your design decisions. Over\ntime, these mistakes will become obvious. When you discover a design\nproblem, don’t just ignore it or patch around it; take a little extra time to\nfix it. If you program strategically, you will continually make small\nimprovements to the system design. This is the opposite of tactical\nprogramming, where you are continually adding small bits of complexity\nthat cause problems in the future.")]),e._v(" "),a("h2",{attrs:{id:"_3-3-how-much-to-invest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-how-much-to-invest"}},[e._v("#")]),e._v(" 3.3 How much to invest?")]),e._v(" "),a("p",[e._v("So, what is the right amount of investment? A huge up-front investment,\nsuch as trying to design the entire system, won’t be effective. This is the\nwaterfall method, and we know it doesn’t work. The ideal design tends to\nemerge in bits and pieces, as you get experience with the system. Thus, the\nbest approach is to make lots of small investments on a continual basis. I\nsuggest spending about 10–20% of your total development time on\ninvestments. This amount is small enough that it won’t impact your\nschedules significantly, but large enough to produce significant benefits\nover time. Your initial projects will thus take 10–20% longer than they\nwould in a purely tactical approach. That extra time will result in a better\nsoftware design, and you will start experiencing the benefits within a few\nmonths. It won’t be long before you’re developing at least 10–20% faster\nthan you would if you had programmed tactically. At this point your\ninvestments become free: the benefits from your past investments will\nsave enough time to cover the cost of future investments. You will quickly\nrecover the cost of the initial investment. Figure 3.1 illustrates this\nphenomenon.")]),e._v(" "),a("p",[a("img",{attrs:{src:o(1227),alt:"Image"}})]),e._v(" "),a("p",[a("strong",[e._v("Figure 3.1")]),e._v(": "),a("em",[e._v("At the beginning, a tactical approach to programming will make progress more quickly than a strategic approach. However, complexity accumulates more rapidly under the tactical approach, which reduces productivity. Over time, the strategic approach results in greater progress. Note: this figure is intended only as a qualitative illustration; I am not aware of any empirical measurements of the precise shapes of the curves.")])]),e._v(" "),a("p",[e._v("Conversely, if you program tactically, you will finish your first projects\n10–20% faster, but over time your development speed will slow as\ncomplexity accumulates. It won’t be long before you’re programming at\nleast 10–20% slower. You will quickly give back all of the time you saved\nat the beginning, and for the rest of system’s lifetime you will be\ndeveloping more slowly than if you had taken the strategic approach. If\nyou haven’t ever worked in a badly degraded code base, talk to someone\nwho has; they will tell you that poor code quality slows development by at\nleast 20%.")]),e._v(" "),a("h2",{attrs:{id:"_3-4-startups-and-investment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-startups-and-investment"}},[e._v("#")]),e._v(" 3.4 Startups and investment")]),e._v(" "),a("p",[e._v("In some environments there are strong forces working against the strategic\napproach. For example, early-stage startups feel tremendous pressure to\nget their early releases out quickly. In these companies, it might seem that\neven a 10–20% investment isn’t affordable. As a result, many startups take\na tactical approach, spending little effort on design and even less on\ncleanup when problems pop up. They rationalize this with the thought that,\nif they are successful, they’ll have enough money to hire extra engineers to\nclean things up.")]),e._v(" "),a("p",[e._v("If you are in a company leaning in this direction, you should realize\nthat once a code base turns to spaghetti, it is nearly impossible to fix. You\nwill probably pay high development costs for the life of the product.\nFurthermore, the payoff for good (or bad) design comes pretty quickly, so\nthere’s a good chance that the tactical approach won’t even speed up your\nfirst product release.")]),e._v(" "),a("p",[e._v("Another thing to consider is that one of the most important factors for\nsuccess of a company is the quality of its engineers. The best way to lower\ndevelopment costs is to hire great engineers: they don’t cost much more\nthan mediocre engineers but have tremendously higher productivity.\nHowever, the best engineers care deeply about good design. If your code\nbase is a wreck, word will get out, and this will make it harder for you to\nrecruit. As a result, you are likely to end up with mediocre engineers. This\nwill increase your future costs and probably cause the system structure to\ndegrade even more.")]),e._v(" "),a("p",[e._v("Facebook is an example of a startup that encouraged tactical\nprogramming. For many years the company’s motto was “Move fast and\nbreak things.” New engineers fresh out of college were encouraged to dive\nimmediately into the company’s code base; it was normal for engineers to\npush commits into production in their first week on the job. On the\npositive side, Facebook developed a reputation as a company that\nempowered its employees. Engineers had tremendous latitude, and there\nwere few rules and restrictions to get in their way.")]),e._v(" "),a("p",[e._v("Facebook has been spectacularly successful as a company, but its code\nbase suffered because of the company’s tactical approach; much of the\ncode was unstable and hard to understand, with few comments or tests, and\npainful to work with. Over time the company realized that its culture was\nunsustainable. Eventually, Facebook changed its motto to “Move fast with\nsolid infrastructure” to encourage its engineers to invest more in good\ndesign. It remains to be seen whether Facebook can successfully clean up\nthe problems that accumulated over years of tactical programming.")]),e._v(" "),a("p",[e._v("In fairness to Facebook, I should point out that Facebook’s code\nprobably isn’t much worse than average among startups. Tactical\nprogramming is commonplace among startups; Facebook just happens to\nbe a particularly visible example.")]),e._v(" "),a("p",[e._v("Fortunately, it is also possible to succeed in Silicon Valley with a\nstrategic approach. Google and VMware grew up around the same time as\nFacebook, but both of these companies embraced a more strategic\napproach. Both companies placed a heavy emphasis on high quality code\nand good design, and both companies built sophisticated products that\nsolved complex problems with reliable software systems. The companies’\nstrong technical cultures became well known in Silicon Valley. Few other\ncompanies could compete with them for hiring the top technical talent.")]),e._v(" "),a("p",[e._v("These examples show that a company can succeed with either\napproach. However, it’s a lot more fun to work in a company that cares\nabout software design and has a clean code base.")]),e._v(" "),a("h2",{attrs:{id:"_3-5-conclusion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-conclusion"}},[e._v("#")]),e._v(" 3.5 Conclusion")]),e._v(" "),a("p",[e._v("Good design doesn’t come for free. It has to be something you invest in\ncontinually, so that small problems don’t accumulate into big ones.\nFortunately, good design eventually pays for itself, and sooner than you\nmight think.")]),e._v(" "),a("p",[e._v("It’s crucial to be consistent in applying the strategic approach and to\nthink of investment as something to do today, not tomorrow. When you get\nin a crunch it will be tempting to put off cleanups until after the crunch is\nover. However, this is a slippery slope; after the current crunch there will\nalmost certainly be another one, and another after that. Once you start\ndelaying design improvements, it’s easy for the delays to become\npermanent and for your culture to slip into the tactical approach. The\nlonger you wait to address design problems, the bigger they become; the\nsolutions become more intimidating, which makes it easy to put them off\neven more. The most effective approach is one where every engineer\nmakes continuous small investments in good design.")])])}),[],!1,null,null,null);t.default=n.exports}}]);