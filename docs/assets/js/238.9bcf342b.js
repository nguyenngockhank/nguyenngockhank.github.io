(window.webpackJsonp=window.webpackJsonp||[]).push([[238],{808:function(e,t,n){"use strict";n.r(t);var a=n(7),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h5",{attrs:{id:"_317"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_317"}},[e._v("#")]),e._v(" 317")]),e._v(" "),n("h1",{attrs:{id:"appendix-a"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#appendix-a"}},[e._v("#")]),e._v(" Appendix A")]),e._v(" "),n("h2",{attrs:{id:"concurrency-ii"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#concurrency-ii"}},[e._v("#")]),e._v(" Concurrency II")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("by Brett L. Schuchert\n")])])]),n("p",[e._v("This appendix supports and amplifies the "),n("em",[e._v("Concurrency")]),e._v(" chapter on page 177. It is written\nas a series of independent topics and you can generally read them in any order. There is\nsome duplication between sections to allow for such reading.")]),e._v(" "),n("h3",{attrs:{id:"client-server-example"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#client-server-example"}},[e._v("#")]),e._v(" Client/Server Example ..")]),e._v(" "),n("p",[e._v("Imagine a simple client/server application. A server sits and waits listening on a socket for\na client to connect. A client connects and sends a request.")]),e._v(" "),n("h4",{attrs:{id:"the-server"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#the-server"}},[e._v("#")]),e._v(" The Server ..")]),e._v(" "),n("p",[e._v("Here is a simplified version of a server application. Full source for this example is avail-\nable starting on page 343, "),n("em",[e._v("Client/Server Nonthreaded")]),e._v(".")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("ServerSocket serverSocket = new ServerSocket(8009);\nwhile (keepProcessing) {\ntry {\nSocket socket = serverSocket.accept();\nprocess(socket);\n} catch (Exception e) {\nhandle(e);\n}\n}\n")])])]),n("p",[e._v("318 "),n("strong",[e._v("Appendix A: Concurrency II")])]),e._v(" "),n("p",[e._v("This simple application waits for a connection, processes an incoming message, and then\nagain waits for the next client request to come in. Here’s client code that connects to this\nserver:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('private void connectSendReceive(int i) {\ntry {\nSocket socket = new Socket("localhost", PORT);\nMessageUtils.sendMessage(socket, Integer.toString(i));\nMessageUtils.getMessage(socket);\nsocket.close();\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n')])])]),n("p",[e._v("How well does this client/server pair perform? How can we formally describe that perfor-\nmance? Here’s a test that asserts that the performance is “acceptable”:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Test(timeout = 10000)\npublic void shouldRunInUnder10Seconds() throws Exception {\nThread[] threads = createThreads();\nstartAllThreadsw(threads);\nwaitForAllThreadsToFinish(threads);\n}\n")])])]),n("p",[e._v("The setup is left out to keep the example simple (see “ClientTest.java” on page 344). This\ntest asserts that it should complete within 10,000 milliseconds.")]),e._v(" "),n("p",[e._v("This is a classic example of validating the throughput of a system. This system should\ncomplete a series of client requests in ten seconds. So long as the server can process each\nindividual client request in time, the test will pass.")]),e._v(" "),n("p",[e._v("What happens if the test fails? Short of developing some kind of event polling loop,\nthere is not much to do within a single thread that will make this code any faster. Will\nusing multiple threads solve the problem? It might, but we need to know where the time is\nbeing spent. There are two possibilities:")]),e._v(" "),n("p",[n("strong",[e._v("-")]),e._v(" I/O—using a socket, connecting to a database, waiting for virtual memory swapping,\nand so on.\n"),n("strong",[e._v("-")]),e._v(" Processor—numerical calculations, regular expression processing, garbage collection,\nand so on.")]),e._v(" "),n("p",[e._v("Systems typically have some of each, but for a given operation one tends to dominate. If\nthe code is processor bound, more processing hardware can improve throughput, making\nour test pass. But there are only so many CPU cycles available, so adding threads to a\nprocessor-bound problem will not make it go faster.")]),e._v(" "),n("p",[e._v("On the other hand, if the process is I/O bound, then concurrency can increase effi-\nciency. When one part of the system is waiting for I/O, another part can use that wait time\nto process something else, making more effective use of the available CPU.")]),e._v(" "),n("p",[n("strong",[e._v("Client/Server Example")]),e._v(" 319")]),e._v(" "),n("h4",{attrs:{id:"adding-threading"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#adding-threading"}},[e._v("#")]),e._v(" Adding Threading...")]),e._v(" "),n("p",[e._v("Assume for the moment that the performance test fails. How can we improve the through-\nput so that the performance test passes? If the process method of the server is I/O bound,\nthen here is one way to make the server use threads (just change the processMessage):")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('void process(final Socket socket) {\nif (socket == null)\nreturn;\nRunnable clientHandler = new Runnable() {\npublic void run() {\ntry {\nString message = MessageUtils.getMessage(socket);\nMessageUtils.sendMessage(socket, "Processed: " + message);\ncloseIgnoringException(socket);\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n};\nThread clientConnection = new Thread(clientHandler);\nclientConnection.start();\n}\n')])])]),n("p",[e._v("Assume that this change causes the test to pass;^1 the code is complete, correct?")]),e._v(" "),n("h4",{attrs:{id:"server-observations"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#server-observations"}},[e._v("#")]),e._v(" Server Observations ...")]),e._v(" "),n("p",[e._v("The updated server completes the test successfully in just over one second. Unfortunately,\nthis solution is a bit naive and introduces some new problems.")]),e._v(" "),n("p",[e._v("How many threads might our server create? The code sets no limit, so the we could\nfeasibly hit the limit imposed by the Java Virtual Machine (JVM). For many simple sys-\ntems this may suffice. But what if the system is meant to support many users on the public\nnet? If too many users connect at the same time, the system might grind to a halt.")]),e._v(" "),n("p",[e._v("But set the behavioral problem aside for the moment. The solution shown has prob-\nlems of cleanliness and structure. How many responsibilities does the server code have?")]),e._v(" "),n("p",[n("strong",[e._v("-")]),e._v(" Socket connection management\n"),n("strong",[e._v("-")]),e._v(" Client processing\n"),n("strong",[e._v("-")]),e._v(" Threading policy\n"),n("strong",[e._v("-")]),e._v(" Server shutdown policy")]),e._v(" "),n("p",[e._v("Unfortunately, all these responsibilities live in the process function. In addition, the\ncode crosses many different levels of abstraction. So, small as the process function is, it\nneeds to be repartitioned.")]),e._v(" "),n("ol",[n("li",[e._v("You can verify that for yourself by trying out the before and after code. Review the nonthreaded code starting on page 343.\nReview the threaded code starting on page 346.")])]),e._v(" "),n("p",[e._v("320 "),n("strong",[e._v("Appendix A: Concurrency II")])]),e._v(" "),n("p",[e._v("The server has several reasons to change; therefore it violates the Single Responsibility\nPrinciple. To keep concurrent systems clean, thread management should be kept to a few,\nwell-controlled places. What’s more, any code that manages threads should do nothing\nother than thread management. Why? If for no other reason than that tracking down con-\ncurrency issues is hard enough without having to unwind other nonconcurrency issues at\nthe same time.")]),e._v(" "),n("p",[e._v("If we create a separate class for each of the responsibilities listed above, including the\nthread management responsibility, then when we change the thread management strategy,\nthe change will impact less overall code and will not pollute the other responsibilities. This\nalso makes it much easier to test all the other responsibilities without having to worry\nabout threading. Here is an updated version that does just that:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public void run() {\nwhile (keepProcessing) {\ntry {\nClientConnection clientConnection = connectionManager.awaitClient();\nClientRequestProcessor requestProcessor\n= new ClientRequestProcessor(clientConnection);\nclientScheduler.schedule(requestProcessor);\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\nconnectionManager.shutdown();\n}\n")])])]),n("p",[e._v("This now focuses all things thread-related into one place, clientScheduler. If there are\nconcurrency problems, there is just one place to look:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public interface ClientScheduler {\nvoid schedule(ClientRequestProcessor requestProcessor);\n}\n")])])]),n("p",[e._v("The current policy is easy to implement:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class ThreadPerRequestScheduler implements ClientScheduler {\npublic void schedule(final ClientRequestProcessor requestProcessor) {\nRunnable runnable = new Runnable() {\npublic void run() {\nrequestProcessor.process();\n}\n};\nThread thread = new Thread(runnable);\nthread.start();\n}\n}\n")])])]),n("p",[e._v("Having isolated all the thread management into a single place, it is much easier to change\nthe way we control threads. For example, moving to the Java 5 Executor framework\ninvolves writing a new class and plugging it in (Listing A-1).")]),e._v(" "),n("p",[n("strong",[e._v("Possible Paths of Execution")]),e._v(" 321")]),e._v(" "),n("h4",{attrs:{id:"conclusion"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[e._v("#")]),e._v(" Conclusion..")]),e._v(" "),n("p",[e._v("Introducing concurrency in this particular example demonstrates a way to improve the\nthroughput of a system and one way of validating that throughput through a testing frame-\nwork. Focusing all concurrency code into a small number of classes is an example of\napplying the Single Responsibility Principle. In the case of concurrent programming, this\nbecomes especially important because of its complexity.")]),e._v(" "),n("h3",{attrs:{id:"possible-paths-of-execution"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#possible-paths-of-execution"}},[e._v("#")]),e._v(" Possible Paths of Execution ..")]),e._v(" "),n("p",[e._v("Review the method incrementValue, a one-line Java method with no looping or branching:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class IdGenerator {\nint lastIdUsed;\npublic int incrementValue() {\nreturn ++lastIdUsed;\n}\n}\n")])])]),n("p",[e._v("Ignore integer overflow and assume that only one thread has access to a single instance\nof IdGenerator. In this case there is a single path of execution and a single guaranteed\nresult:")]),e._v(" "),n("p",[n("strong",[e._v("-")]),e._v(" The value returned is equal to the value of lastIdUsed, both of which are one greater\nthan just before calling the method.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing A-1\nExecutorClientScheduler.java\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\npublic class ExecutorClientScheduler implements ClientScheduler {\nExecutor executor;\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public ExecutorClientScheduler(int availableThreads) {\nexecutor = Executors.newFixedThreadPool(availableThreads);\n}\npublic void schedule(final ClientRequestProcessor requestProcessor) {\nRunnable runnable = new Runnable() {\npublic void run() {\nrequestProcessor.process();\n}\n};\nexecutor.execute(runnable);\n}\n}\n")])])]),n("p",[e._v("322 "),n("strong",[e._v("Appendix A: Concurrency II")])]),e._v(" "),n("p",[e._v("What happens if we use two threads and leave the method unchanged? What are the\npossible outcomes if each thread calls incrementValue once? How many possible paths of\nexecution are there? First, the outcomes (assume lastIdUsed starts with a value of 93):")]),e._v(" "),n("p",[n("strong",[e._v("-")]),e._v(" Thread 1 gets the value of 94, thread 2 gets the value of 95, and lastIdUsed is now 95.\n"),n("strong",[e._v("-")]),e._v(" Thread 1 gets the value of 95, thread 2 gets the value of 94, and lastIdUsed is now 95.\n"),n("strong",[e._v("-")]),e._v(" Thread 1 gets the value of 94, thread 2 gets the value of 94, and lastIdUsed is now 94.")]),e._v(" "),n("p",[e._v("The final result, while surprising, is possible. To see how these different results are possi-\nble, we need to understand the number of possible paths of execution and how the Java\nVirtual Machine executes them.")]),e._v(" "),n("h4",{attrs:{id:"number-of-paths"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#number-of-paths"}},[e._v("#")]),e._v(" Number of Paths .")]),e._v(" "),n("p",[e._v("To calculate the number of possible execution paths, we’ll start with the generated byte-\ncode. The one line of java (return ++lastIdUsed;) becomes eight byte-code instructions. It\nis possible for the two threads to interleave the execution of these eight instructions the\nway a card dealer interleaves cards as he shuffles a deck.^2 Even with only eight cards in\neach hand, there are a remarkable number of shuffled outcomes.")]),e._v(" "),n("p",[e._v("For this simple case of "),n("em",[e._v("N")]),e._v(" instructions in a sequence, no looping or conditionals, and "),n("em",[e._v("T")]),e._v("\nthreads, the total number of possible execution paths is equal to")]),e._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[e._v("This is a bit of a simplification. However, for the purpose of this discussion, we can use this simplifying model.")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Calculating the Possible Orderings\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("This comes from an email from Uncle Bob to Brett:\nWith N steps and T threads there are T * N total steps. Prior to each step\nthere is a context switch that chooses between the T threads. Each path can\nthus be represented as a string of digits denoting the context switches.\nGiven steps A and B and threads 1 and 2, the six possible paths are 1122,\n1212, 1221, 2112, 2121, and 2211. Or, in terms of steps it is A1B1A2B2,\nA1A2B1B2, A1A2B2B1, A2A1B1B2, A2A1B2B1, and A2B2A1B1. For\nthree threads the sequence is 112233, 112323, 113223, 113232, 112233,\n121233, 121323, 121332, 123132, 123123,\nOne characteristic of these strings is that there must always be N\ninstances of each T. So the string 111111 is invalid because it has six\ninstances of 1 and zero instances of 2 and 3.\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("() NT!\nN! T\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("--------------\n")])])]),n("p",[n("strong",[e._v("Possible Paths of Execution")]),e._v(" 323")]),e._v(" "),n("p",[e._v("For our simple case of one line of Java code, which equates to eight lines of byte-code\nand two threads, the total number of possible paths of execution is 12,870. If the type of\nlastIdUsed is a long, then every read/write becomes two operations instead of one, and the\nnumber of possible orderings becomes 2,704,156.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("What happens if we make one change to this method?\npublic synchronized void incrementValue() {\n++lastIdUsed;\n}\n")])])]),n("p",[e._v("The number of possible execution pathways becomes two for two threads and N! in the\ngeneral case.")]),e._v(" "),n("h4",{attrs:{id:"digging-deeper"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#digging-deeper"}},[e._v("#")]),e._v(" Digging Deeper ..")]),e._v(" "),n("p",[e._v("What about the surprising result that two threads could both call the method once (before\nwe added synchronized) and get the same numeric result? How is that possible? First\nthings first.")]),e._v(" "),n("p",[e._v("What is an atomic operation? We can define an atomic operation as any operation that\nis uninterruptable. For example, in the following code, line 5, where 0 is assigned to\nlastid, is atomic because according to the Java Memory model, assignment to a 32-bit\nvalue is uninterruptable.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("So we want the permutations of N 1’s, N 2’s,... and N T’ s. This is\nreally just the permutations of N * T things taken N * T at a time, which is\n( N * T )!, but with all the duplicates removed. So the trick is to count the\nduplicates and subtract that from ( N * T )!.\nGiven two steps and two threads, how many duplicates are there? Each\nfour-digit string has two 1s and two 2s. Each of those pairs could be\nswapped without changing the sense of the string. You could swap the 1s or\nthe 2s both, or neither. So there are four isomorphs for each string, which\nmeans that there are three duplicates. So three out of four of the options are\nduplicates; alternatively one of four of the permutations are NOT dupli-\ncates. 4! * .25 = 6. So this reasoning seems to work.\nHow many duplicates are there? In the case where N = 2 and T = 2, I\ncould swap the 1s, the 2s, or both. In the case where N = 2 and T = 3, I\ncould swap the 1s, the 2s, the 3s, 1s and 2s, 1s and 3s, or 2s and 3s. Swap-\nping is just the permutations of N. Let’s say there are P permutations of N.\nThe number of different ways to arrange those permutations are P ** T.\nSo the number of possible isomorphs is N !** T. And so the number of\npaths is ( T * N )!/( N !** T ). Again, in our T = 2, N = 2 case we get 6 (24/4).\nFor N = 2 and T = 3 we get 720/8 = 90.\nFor N = 3 and T = 3 we get 9!/6^3 = 1680.\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Calculating the Possible Orderings (continued)\n")])])]),n("p",[e._v("324 "),n("strong",[e._v("Appendix A: Concurrency II")])]),e._v(" "),n("p",[e._v("01: public class Example {\n02: int lastId;\n03:\n04: public void resetId() {\n05: value = 0;\n06: }\n07:\n08: public int getNextId() {\n09: ++value;\n10: }\n11:}\nWhat happens if we change type of lastId from int to long? Is line 5 still atomic?\nNot according to the JVM specification. It could be atomic on a particular processor,\nbut according to the JVM specification, assignment to any 64-bit value requires two\n32-bit assignments. This means that between the first 32-bit assignment and the second\n32-bit assignment, some other thread could sneak in and change one of the values.")]),e._v(" "),n("p",[e._v("What about the pre-increment operator, ++, on line 9? The pre-increment operator can\nbe interrupted, so it is not atomic. To understand, let’s review the byte-code of both of these\nmethods in detail.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Before we go any further, here are three definitions that will be important:\n")])])]),n("p",[n("strong",[e._v("-")]),e._v(" Frame—Every method invocation requires a frame. The frame includes the return\naddress, any parameters passed into the method and the local variables defined in the\nmethod. This is a standard technique used to define a call stack, which is used by\nmodern languages to allow for basic function/method invocation and to allow for\nrecursive invocation.\n"),n("strong",[e._v("-")]),e._v(" Local variable—Any variables defined in the scope of the method. All nonstatic meth-\nods have at least one variable, "),n("strong",[e._v("this")]),e._v(" , which represents the current object, the object\nthat received the most recent message (in the current thread), which caused the\nmethod invocation.\n"),n("strong",[e._v("-")]),e._v(" Operand stack—Many of the instructions in the Java Virtual Machine take parame-\nters. The operand stack is where those parameters are put. The stack is a standard\nlast-in, first-out (LIFO) data structure.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Here is the byte-code generated for resetId():\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Mnemonic Description Operand\nStack After\nALOAD 0 Load the 0th variable onto the operand stack.\nWhat is the 0th variable? It is this ., the current\nobject. When the method was called, the\nreceiver of the message, an instance of Example,\nwas pushed into the local variable array of the\nframe created for method invocation. This is\nalways the first variable put in every instance\nmethod.\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("this\n")])])]),n("p",[n("strong",[e._v("Possible Paths of Execution")]),e._v(" 325")]),e._v(" "),n("p",[e._v("These three instructions are guaranteed to be atomic because, although the thread\nexecuting them could be interrupted after any one of them, the information for the\nPUTFIELD instruction (the constant value 0 on the top of the stack and the reference to\nthis one below the top, along with the field value) cannot be touched by another thread.\nSo when the assignment occurs, we are guaranteed that the value 0 will be stored in the\nfield value. The operation is atomic. The operands all deal with information local to the\nmethod, so there is no interference between multiple threads.")]),e._v(" "),n("p",[e._v("So if these three instructions are executed by ten threads, there are 4.38679733629e+24\npossible orderings. However, there is only one possible outcome, so the different orderings\nare irrelevant. It just so happens that the same outcome is guaranteed for longs in this case\nas well. Why? All ten threads are assigning a constant value. Even if they interleave with\neach other, the end result is the same.")]),e._v(" "),n("p",[e._v("With the ++ operation in the getNextId method, there are going to be problems.\nAssume that lastId holds 42 at the beginning of this method. Here is the byte-code for this\nnew method:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("ICONST_0 Put the constant value 0 onto the operand stack. this, 0\nPUTFIELD lastId Store the top value on the stack (which is 0) into\nthe field value of the object referred to by the\nobject reference one away from the top of the\nstack, this.\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<empty>\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Mnemonic Description Operand\nStack After\nALOAD 0 Load this onto the operand stack this\nDUP Copy the top of the stack. We now have two\ncopies of this on the operand stack.\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("this, this\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("GETFIELD lastId Retrieve the value of the field lastId from the\nobject pointed to on the top of the stack (this) and\nstore that value back on to the stack.\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("this, 42\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("ICONST_1 Push the integer constant 1 on the stack. this, 42, 1\nIADD Integer add the top two values on the operand\nstack and store the result back on to the operand\nstack.\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("this, 43\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("DUP_X1 Duplicate the value 43 and put it before this. 43, this, 43\nPUTFIELD value Store the top value on the operand stack, 43, into\nthe field value of the current object, represented by\nthe next-to-top value on the operand stack, this.\n")])])]),n("h5",{attrs:{id:"_43"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_43"}},[e._v("#")]),e._v(" 43")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("IRETURN return the top (and only) value on the stack. <empty>\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Mnemonic Description Operand\nStack After\n")])])]),n("p",[e._v("326 "),n("strong",[e._v("Appendix A: Concurrency II")])]),e._v(" "),n("p",[e._v("Imagine the case where the first thread completes the first three instructions, up to and\nincluding GETFIELD, and then it is interrupted. A second thread takes over and performs\nthe entire method, incrementing lastId by one; it gets 43 back. Then the first thread picks up\nwhere it left off; 42 is still on the operand stack because that was the value of lastId when it\nexecuted GETFIELD. It adds one to get 43 again and stores the result. The value 43 is\nreturned to the first thread as well. The result is that one of the increments is lost because the\nfirst thread stepped on the second thread after the second thread interrupted the first thread.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Making the getNexId() method synchronized fixes this problem.\n")])])]),n("h4",{attrs:{id:"conclusion-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#conclusion-2"}},[e._v("#")]),e._v(" Conclusion..")]),e._v(" "),n("p",[e._v("An intimate understanding of byte-code is not necessary to understand how threads can\nstep on each other. If you can understand this one example, it should demonstrate the pos-\nsibility of multiple threads stepping on each other, which is enough knowledge.")]),e._v(" "),n("p",[e._v("That being said, what this trivial example demonstrates is a need to understand the\nmemory model enough to know what is and is not safe. It is a common misconception that\nthe ++ (pre- or post-increment) operator is atomic, and it clearly is not. This means you\nneed to know:")]),e._v(" "),n("p",[n("strong",[e._v("-")]),e._v(" Where there are shared objects/values\n"),n("strong",[e._v("-")]),e._v(" The code that can cause concurrent read/update issues\n"),n("strong",[e._v("-")]),e._v(" How to guard such concurrent issues from happening")]),e._v(" "),n("h3",{attrs:{id:"knowing-your-library"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#knowing-your-library"}},[e._v("#")]),e._v(" Knowing Your Library ..")]),e._v(" "),n("h4",{attrs:{id:"executor-framework"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#executor-framework"}},[e._v("#")]),e._v(" Executor Framework ..")]),e._v(" "),n("p",[e._v("As demonstrated in the ExecutorClientScheduler.java on page 321, the Executor frame-\nwork introduced in Java 5 allows for sophisticated execution using thread pools. This is a\nclass in the java.util.concurrent package.")]),e._v(" "),n("p",[e._v("If you are creating threads and are not using a thread pool or "),n("em",[e._v("are")]),e._v(" using a hand-written\none, you should consider using the Executor. It will make your code cleaner, easier to fol-\nlow, and smaller.")]),e._v(" "),n("p",[e._v("The Executor framework will pool threads, resize automatically, and recreate threads\nif necessary. It also supports "),n("em",[e._v("futures,")]),e._v(" a common concurrent programming construct. The\nExecutor framework works with classes that implement Runnable and also works with\nclasses that implement the Callable interface. A Callable looks like a Runnable, but it can\nreturn a result, which is a common need in multithreaded solutions.")]),e._v(" "),n("p",[e._v("A "),n("em",[e._v("future")]),e._v(" is handy when code needs to execute multiple, independent operations and\nwait for both to finish:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public String processRequest(String message) throws Exception {\nCallable<String> makeExternalCall = new Callable<String>() {\n")])])]),n("p",[n("strong",[e._v("Knowing Your Library")]),e._v(" 327")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public String call() throws Exception {\nString result = "";\n// make external request\nreturn result;\n}\n};\nFuture<String> result = executorService.submit(makeExternalCall);\nString partialResult = doSomeLocalProcessing();\nreturn result.get() + partialResult;\n}\n')])])]),n("p",[e._v("In this example, the method starts executing the makeExternalCall object. The method con-\ntinues other processing. The final line calls result.get(), which blocks until the future\ncompletes.")]),e._v(" "),n("h4",{attrs:{id:"nonblocking-solutions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nonblocking-solutions"}},[e._v("#")]),e._v(" Nonblocking Solutions ...")]),e._v(" "),n("p",[e._v("The Java 5 VM takes advantage of modern processor design, which supports reliable,\nnonblocking updates. Consider, for example, a class that uses synchronization (and there-\nfore blocking) to provide a thread-safe update of a value:")]),e._v(" "),n("p",[e._v("public class ObjectWithValue {\nprivate int value;\npublic void synchronized incrementValue() { ++value; }\npublic int getValue() { return value; }\n}\nJava 5 has a series of new classes for situations like this: AtomicBoolean,\nAtomicInteger, and AtomicReference are three examples; there are several more. We can\nrewrite the above code to use a nonblocking approach as follows:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class ObjectWithValue {\nprivate AtomicInteger value = new AtomicInteger(0);\npublic void incrementValue() {\nvalue.incrementAndGet();\n}\npublic int getValue() {\nreturn value.get();\n}\n}\n")])])]),n("p",[e._v("Even though this uses an object instead of a primitive and sends messages like\nincrementAndGet() instead of ++, the performance of this class will nearly always beat the\nprevious version. In some cases it will only be slightly faster, but the cases where it will be\nslower are virtually nonexistent.")]),e._v(" "),n("p",[e._v("How is this possible? Modern processors have an operation typically called "),n("em",[e._v("Compare\nand Swap (CAS)")]),e._v(". This operation is analogous to optimistic locking in databases, whereas\nthe synchronized version is analogous to pessimistic locking.")]),e._v(" "),n("p",[e._v("328 "),n("strong",[e._v("Appendix A: Concurrency II")])]),e._v(" "),n("p",[e._v("The synchronized keyword always acquires a lock, even when a second thread is not\ntrying to update the same value. Even though the performance of intrinsic locks has\nimproved from version to version, they are still costly.")]),e._v(" "),n("p",[e._v("The nonblocking version starts with the assumption that multiple threads generally do\nnot modify the same value often enough that a problem will arise. Instead, it efficiently\ndetects whether such a situation has occurred and retries until the update happens success-\nfully. This detection is almost always less costly than acquiring a lock, even in moderate to\nhigh contention situations.")]),e._v(" "),n("p",[e._v("How does the Virtual Machine accomplish this? The CAS operation is atomic. Logi-\ncally, the CAS operation looks something like the following:")]),e._v(" "),n("p",[e._v("int variableBeingSet;\nvoid simulateNonBlockingSet(int newValue) {\nint currentValue;\ndo {\ncurrentValue = variableBeingSet\n} while(currentValue != compareAndSwap(currentValue, newValue));\n}\nint synchronized compareAndSwap(int currentValue, int newValue) {\nif(variableBeingSet == currentValue) {\nvariableBeingSet = newValue;\nreturn currentValue;\n}\nreturn variableBeingSet;\n}\nWhen a method attempts to update a shared variable, the CAS operation verifies that\nthe variable getting set still has the last known value. If so, then the variable is changed. If\nnot, then the variable is not set because another thread managed to get in the way. The\nmethod making the attempt (using the CAS operation) sees that the change was not made\nand retries.")]),e._v(" "),n("h4",{attrs:{id:"nonthread-safe-classes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nonthread-safe-classes"}},[e._v("#")]),e._v(" Nonthread-Safe Classes..")]),e._v(" "),n("p",[e._v("There are some classes that are inherently not thread safe. Here are a few examples:")]),e._v(" "),n("p",[n("strong",[e._v("-")]),e._v(" SimpleDateFormat\n"),n("strong",[e._v("-")]),e._v(" Database Connections\n"),n("strong",[e._v("-")]),e._v(" Containers in java.util\n"),n("strong",[e._v("-")]),e._v(" Servlets")]),e._v(" "),n("p",[e._v("Note that some collection classes have individual methods that are thread-safe. However,\nany operation that involves calling more than one method is not. For example, if you do\nnot want to replace something in a HashTable because it is already there, you might write\nthe following code:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("if(!hashTable.containsKey(someKey)) {\nhashTable.put(someKey, new SomeValue());\n}\n")])])]),n("p",[n("strong",[e._v("Dependencies Between Methods Can Break Concurrent Code")]),e._v(" 329")]),e._v(" "),n("p",[e._v("Each individual method is thread-safe. However, another thread might add a value in\nbetween the containsKey and put calls. There are several options to fix this problem.")]),e._v(" "),n("p",[n("strong",[e._v("-")]),e._v(" Lock the HashTable first, and make sure all other users of the HashTable do the same—\nclient-based locking:\nsynchronized(map) {\nif(!map.conainsKey(key))\nmap.put(key,value);\n}\n"),n("strong",[e._v("-")]),e._v(" Wrap the HashTable in its own object and use a different API—server-based locking\nusing an ADAPTER:\npublic class WrappedHashtable<K, V> {\nprivate Map<K, V> map = new Hashtable<K, V>();\npublic synchronized void putIfAbsent(K key, V value) {\nif (map.containsKey(key))\nmap.put(key, value);\n}\n}\n"),n("strong",[e._v("-")]),e._v(" Use the thread-safe collections:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("ConcurrentHashMap<Integer, String> map = new ConcurrentHashMap<Integer,\nString>();\nmap.putIfAbsent(key, value);\n")])])]),n("p",[e._v("The collections in java.util.concurrent have operations like putIfAbsent() to accommo-\ndate such operations.")]),e._v(" "),n("h3",{attrs:{id:"dependencies-between-methods"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dependencies-between-methods"}},[e._v("#")]),e._v(" Dependencies Between Methods")]),e._v(" "),n("h3",{attrs:{id:"can-break-concurrent-code"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#can-break-concurrent-code"}},[e._v("#")]),e._v(" Can Break Concurrent Code")]),e._v(" "),n("p",[e._v("Here is a trivial example of a way to introduce dependencies between methods:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class IntegerIterator implements Iterator<Integer>\nprivate Integer nextValue = 0;\npublic synchronized boolean hasNext() {\nreturn nextValue < 100000;\n}\npublic synchronized Integer next() {\nif (nextValue == 100000)\nthrow new IteratorPastEndException();\nreturn nextValue++;\n}\npublic synchronized Integer getNextValue() {\nreturn nextValue;\n}\n}\n")])])]),n("p",[e._v("Here is some code to use this IntegerIterator:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("IntegerIterator iterator = new IntegerIterator();\nwhile(iterator.hasNext()) {\n")])])]),n("p",[e._v("330 "),n("strong",[e._v("Appendix A: Concurrency II")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("int nextValue = iterator.next();\n// do something with nextValue\n}\n")])])]),n("p",[e._v("If one thread executes this code, there will be no problem. But what happens if two threads\nattempt to share a single instance of IngeterIterator with the intent that each thread will\nprocess the values it gets, but that each element of the list is processed only once? Most of\nthe time, nothing bad happens; the threads happily share the list, processing the elements\nthey are given by the iterator and stopping when the iterator is complete. However, there is\na small chance that, at the end of the iteration, the two threads will interfere with each\nother and cause one thread to go beyond the end of the iterator and throw an exception.")]),e._v(" "),n("p",[e._v("Here’s the problem: Thread 1 asks the question hasNext(), which returns true. Thread\n1 gets preempted and then Thread 2 asks the same question, which is still true. Thread 2\nthen calls next(), which returns a value as expected but has a side effect of making\nhasNext() return false. Thread 1 starts up again, thinking hasNext() is still true, and then\ncalls next(). Even though the individual methods are synchronized, the client uses "),n("strong",[n("em",[e._v("two")])]),e._v("\nmethods.")]),e._v(" "),n("p",[e._v("This is a real problem and an example of the kinds of problems that crop up in con-\ncurrent code. In this particular situation this problem is especially subtle because the only\ntime where this causes a fault is when it happens during the final iteration of the iterator.\nIf the threads happen to break just right, then one of the threads could go beyond the end\nof the iterator. This is the kind of bug that happens long after a system has been in pro-\nduction, and it is hard to track down.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("You have three options:\n")])])]),n("p",[n("strong",[e._v("-")]),e._v(" Tolerate the failure.\n"),n("strong",[e._v("-")]),e._v(" Solve the problem by changing the client: client-based locking\n"),n("strong",[e._v("-")]),e._v(" Solve the problem by changing the server, which additionally changes the client:\nserver-based locking")]),e._v(" "),n("h4",{attrs:{id:"tolerate-the-failure"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tolerate-the-failure"}},[e._v("#")]),e._v(" Tolerate the Failure .")]),e._v(" "),n("p",[e._v("Sometimes you can set things up such that the failure causes no harm. For example, the\nabove client could catch the exception and clean up. Frankly, this is a bit sloppy. It’s rather\nlike cleaning up memory leaks by rebooting at midnight.")]),e._v(" "),n("h4",{attrs:{id:"client-based-locking"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#client-based-locking"}},[e._v("#")]),e._v(" Client-Based Locking.")]),e._v(" "),n("p",[e._v("To make IntegerIterator work correctly with multiple threads, change this client (and\nevery other client) as follows:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("IntegerIterator iterator = new IntegerIterator();\nwhile (true) {\nint nextValue;\n")])])]),n("p",[n("strong",[e._v("Dependencies Between Methods Can Break Concurrent Code")]),e._v(" 331")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("synchronized (iterator) {\nif (!iterator.hasNext())\nbreak;\nnextValue = iterator.next();\n}\ndoSometingWith(nextValue);\n}\n")])])]),n("p",[e._v("Each client introduces a lock via the synchronized keyword. This duplication violates the\nDRY principle, but it might be necessary if the code uses non-thread-safe third-party tools.")]),e._v(" "),n("p",[e._v("This strategy is risky because all programmers who use the server must remember to\nlock it before using it and unlock it when done. Many (many!) years ago I worked on a\nsystem that employed client-based locking on a shared resource. The resource was used in\nhundreds of different places throughout the code. One poor programmer forgot to lock the\nresource in one of those places.")]),e._v(" "),n("p",[e._v("The system was a multi-terminal time-sharing system running accounting software\nfor Local 705 of the trucker’s union. The computer was in a raised-floor, environment-\ncontrolled room 50 miles north of the Local 705 headquarters. At the headquarters they\nhad dozens of data entry clerks typing union dues postings into the terminals. The termi-\nnals were connected to the computer using dedicated phone lines and 600bps half-duplex\nmodems. (This was a very, "),n("em",[e._v("very")]),e._v(" long time ago.)")]),e._v(" "),n("p",[e._v("About once per day, one of the terminals would “lock up.” There was no rhyme or rea-\nson to it. The lock up showed no preference for particular terminals or particular times. It\nwas as though there were someone rolling dice choosing the time and terminal to lock up.\nSometimes more than one terminal would lock up. Sometimes days would go by without\nany lock-ups.")]),e._v(" "),n("p",[e._v("At first the only solution was a reboot. But reboots were tough to coordinate. We had\nto call the headquarters and get everyone to finish what they were doing on all the termi-\nnals. Then we could shut down and restart. If someone was doing something important\nthat took an hour or two, the locked up terminal simply had to stay locked up.")]),e._v(" "),n("p",[e._v("After a few weeks of debugging we found that the cause was a ring-buffer counter that\nhad gotten out of sync with its pointer. This buffer controlled output to the terminal. The\npointer value indicated that the buffer was empty, but the counter said it was full. Because\nit was empty, there was nothing to display; but because it was also full, nothing could be\nadded to the buffer to be displayed on the screen.")]),e._v(" "),n("p",[e._v("So we knew why the terminals were locking, but we didn’t know why the ring buffer\nwas getting out of sync. So we added a hack to work around the problem. It was possible to\nread the front panel switches on the computer. (This was a very, very, "),n("em",[e._v("very")]),e._v(" long time ago.)\nWe wrote a little trap function that detected when one of these switches was thrown and\nthen looked for a ring buffer that was both empty and full. If one was found, it reset that\nbuffer to empty. "),n("em",[e._v("Voila!")]),e._v(" The locked-up terminal(s) started displaying again.")]),e._v(" "),n("p",[e._v("So now we didn’t have to reboot the system when a terminal locked up. The Local\nwould simply call us and tell us we had a lock-up, and then we just walked into the com-\nputer room and flicked a switch.")]),e._v(" "),n("p",[e._v("332 "),n("strong",[e._v("Appendix A: Concurrency II")])]),e._v(" "),n("p",[e._v("Of course sometimes they worked on the weekends, and we didn’t. So we added a\nfunction to the scheduler that checked all the ring buffers once per minute and reset any\nthat were both empty and full. This caused the displays to unclog before the Local could\neven get on the phone.")]),e._v(" "),n("p",[e._v("It was several more weeks of poring over page after page of monolithic assembly lan-\nguage code before we found the culprit. We had done the math and calculated that the fre-\nquency of the lock-ups was consistent with a single unprotected use of the ring buffer. So\nall we had to do was find that one faulty usage. Unfortunately, this was so very long ago\nthat we didn’t have search tools or cross references or any other kind of automated help.\nWe simply had to pore over listings.")]),e._v(" "),n("p",[e._v("I learned an important lesson that cold Chicago winter of 1971. Client-based locking\nreally blows.")]),e._v(" "),n("h4",{attrs:{id:"server-based-locking"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#server-based-locking"}},[e._v("#")]),e._v(" Server-Based Locking")]),e._v(" "),n("p",[e._v("The duplication can be removed by making the following changes to IntegerIterator:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class IntegerIteratorServerLocked {\nprivate Integer nextValue = 0;\npublic synchronized Integer getNextOrNull() {\nif (nextValue < 100000)\nreturn nextValue++;\nelse\nreturn null;\n}\n}\n")])])]),n("p",[e._v("And the client code changes as well:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("while (true) {\nInteger nextValue = iterator.getNextOrNull();\nif (next == null)\nbreak;\n// do something with nextValue\n}\n")])])]),n("p",[e._v("In this case we actually change the API of our class to be multithread aware.^3 The client\nneeds to perform a null check instead of checking hasNext().")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("In general you should prefer server-based locking for these reasons:\n")])])]),n("p",[n("strong",[e._v("-")]),e._v(" It reduces repeated code—Client-based locking forces each client to lock the server\nproperly. By putting the locking code into the server, clients are free to use the object\nand not worry about writing additional locking code.\n3. In fact, the Iterator interface is inherently not thread-safe. It was never designed to be used by multiple threads, so this\nshould come as no surprise.")]),e._v(" "),n("p",[n("strong",[e._v("Increasing Throughput")]),e._v(" 333")]),e._v(" "),n("p",[n("strong",[e._v("-")]),e._v(" It allows for better performance—You can swap out a thread-safe server for a non-\nthread safe one in the case of single-threaded deployment, thereby avoiding all\noverhead.\n"),n("strong",[e._v("-")]),e._v(" It reduces the possibility of error—All it takes is for one programmer to forget to lock\nproperly.\n"),n("strong",[e._v("-")]),e._v(" It enforces a single policy—The policy is in one place, the server, rather than many\nplaces, each client.\n"),n("strong",[e._v("-")]),e._v(" It reduces the scope of the shared variables—The client is not aware of them or how\nthey are locked. All of that is hidden in the server. When things break, the number of\nplaces to look is smaller.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("What if you do not own the server code?\n")])])]),n("p",[n("strong",[e._v("-")]),e._v(" Use an ADAPTER to change the API and add locking\npublic class ThreadSafeIntegerIterator {\nprivate IntegerIterator iterator = new IntegerIterator();\npublic synchronized Integer getNextOrNull() {\nif(iterator.hasNext())\nreturn iterator.next();\nreturn null;\n}\n}\n"),n("strong",[e._v("-")]),e._v(" OR better yet, use the thread-safe collections with extended interfaces")]),e._v(" "),n("h3",{attrs:{id:"increasing-throughput"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#increasing-throughput"}},[e._v("#")]),e._v(" Increasing Throughput .")]),e._v(" "),n("p",[e._v("Let’s assume that we want to go out on the net and read the contents of a set of pages from\na list of URLs. As each page is read, we will parse it to accumulate some statistics. Once\nall the pages are read, we will print a summary report.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("The following class returns the contents of one page, given a URL.\npublic class PageReader {\n//...\npublic String getPageFor(String url) {\nHttpMethod method = new GetMethod(url);\ntry {\nhttpClient.executeMethod(method);\nString response = method.getResponseBodyAsString();\nreturn response;\n} catch (Exception e) {\nhandle(e);\n} finally {\nmethod.releaseConnection();\n}\n}\n}\n")])])]),n("p",[e._v("334 "),n("strong",[e._v("Appendix A: Concurrency II")])]),e._v(" "),n("p",[e._v("The next class is the iterator that provides the contents of the pages based on an iterator of\nURLs:")]),e._v(" "),n("p",[e._v("public class PageIterator {\nprivate PageReader reader;\nprivate URLIterator urls;\npublic PageIterator(PageReader reader, URLIterator urls) {\nthis.urls = urls;\nthis.reader = reader;\n}\npublic synchronized String getNextPageOrNull() {\nif (urls.hasNext())\ngetPageFor(urls.next());\nelse\nreturn null;\n}\npublic String getPageFor(String url) {\nreturn reader.getPageFor(url);\n}\n}\nAn instance of the PageIterator can be shared between many different threads, each\none using it’s own instance of the PageReader to read and parse the pages it gets from the\niterator.")]),e._v(" "),n("p",[e._v("Notice that we’ve kept the synchronized block very small. It contains just the critical\nsection deep inside the PageIterator. It is always better to synchronize as little as possible\nas opposed to synchronizing as much as possible.")]),e._v(" "),n("h4",{attrs:{id:"single-thread-calculation-of-throughput"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#single-thread-calculation-of-throughput"}},[e._v("#")]),e._v(" Single-Thread Calculation of Throughput..")]),e._v(" "),n("p",[e._v("Now lets do some simple calculations. For the purpose of argument, assume the following:")]),e._v(" "),n("p",[n("strong",[e._v("-")]),e._v(" I/O time to retrieve a page (average): 1 second\n"),n("strong",[e._v("-")]),e._v(" Processing time to parse page (average): .5 seconds\n"),n("strong",[e._v("-")]),e._v(" I/O requires 0 percent of the CPU while processing requires 100 percent.")]),e._v(" "),n("p",[e._v("For "),n("em",[e._v("N")]),e._v(" pages being processed by a single thread, the total execution time is 1.5 sec-\nonds * "),n("em",[e._v("N")]),e._v(". Figure A-1 shows a snapshot of 13 pages or about 19.5 seconds.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Figure A-1\nSingle thread\n")])])]),n("p",[n("strong",[e._v("Deadlock")]),e._v(" 335")]),e._v(" "),n("h4",{attrs:{id:"multithread-calculation-of-throughput"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#multithread-calculation-of-throughput"}},[e._v("#")]),e._v(" Multithread Calculation of Throughput..")]),e._v(" "),n("p",[e._v("If it is possible to retrieve pages in any order and process the pages independently, then it\nis possible to use multiple threads to increase throughput. What happens if we use three\nthreads? How many pages can we acquire in the same time?")]),e._v(" "),n("p",[e._v("As you can see in Figure A-2, the multithreaded solution allows the process-bound\nparsing of the pages to overlap with the I/O-bound reading of the pages. In an idealized\nworld this means that the processor is fully utilized. Each one-second page read is over-\nlapped with two parses. Thus, we can process two pages per second, which is three times\nthe throughput of the single-threaded solution.")]),e._v(" "),n("h3",{attrs:{id:"deadlock"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#deadlock"}},[e._v("#")]),e._v(" Deadlock .")]),e._v(" "),n("p",[e._v("Imagine a Web application with two shared resource pools of some finite size:")]),e._v(" "),n("p",[n("strong",[e._v("-")]),e._v(" A pool of database connections for local work in process storage\n"),n("strong",[e._v("-")]),e._v(" A pool of MQ connections to a master repository")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Assume there are two operations in this application, create and update:\n")])])]),n("p",[n("strong",[e._v("-")]),e._v(" Create—Acquire connection to master repository and database. Talk to service master\nrepository and then store work in local work in process database.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Figure A-2\nThree concurrent threads\n")])])]),n("p",[e._v("336 "),n("strong",[e._v("Appendix A: Concurrency II")])]),e._v(" "),n("p",[n("strong",[e._v("-")]),e._v(" Update—Acquire connection to database and then master repository. Read from work\nin process database and then send to the master repository")]),e._v(" "),n("p",[e._v("What happens when there are more users than the pool sizes? Consider each pool has\na size of ten.")]),e._v(" "),n("p",[n("strong",[e._v("-")]),e._v(" Ten users attempt to use create, so all ten database connections are acquired, and each\nthread is interrupted after acquiring a database connection but before acquiring a con-\nnection to the master repository.\n"),n("strong",[e._v("-")]),e._v(" Ten users attempt to use update, so all ten master repository connections are acquired,\nand each thread is interrupted after acquiring the master repository but before acquir-\ning a database connection.\n"),n("strong",[e._v("-")]),e._v(" Now the ten “create” threads must wait to acquire a master repository connection, but\nthe ten “update” threads must wait to acquire a database connection.\n"),n("strong",[e._v("-")]),e._v(" Deadlock. The system never recovers.")]),e._v(" "),n("p",[e._v("This might sound like an unlikely situation, but who wants a system that freezes solid\nevery other week? Who wants to debug a system with symptoms that are so difficult to\nreproduce? This is the kind of problem that happens in the field, then takes weeks to solve.")]),e._v(" "),n("p",[e._v("A typical “solution” is to introduce debugging statements to find out what is happen-\ning. Of course, the debug statements change the code enough so that the deadlock happens\nin a different situation and takes months to again occur.^4")]),e._v(" "),n("p",[e._v("To really solve the problem of deadlock, we need to understand what causes it. There\nare four conditions required for deadlock to occur:")]),e._v(" "),n("p",[n("strong",[e._v("-")]),e._v(" Mutual exclusion\n"),n("strong",[e._v("-")]),e._v(" Lock & wait\n"),n("strong",[e._v("-")]),e._v(" No preemption\n"),n("strong",[e._v("-")]),e._v(" Circular wait")]),e._v(" "),n("h4",{attrs:{id:"mutual-exclusion"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mutual-exclusion"}},[e._v("#")]),e._v(" Mutual Exclusion ...")]),e._v(" "),n("p",[e._v("Mutual exclusion occurs when multiple threads need to use the same resources and those\nresources")]),e._v(" "),n("p",[n("strong",[e._v("-")]),e._v(" Cannot be used by multiple threads at the same time.\n"),n("strong",[e._v("-")]),e._v(" Are limited in number.")]),e._v(" "),n("p",[e._v("A common example of such a resource is a database connection, a file open for write, a\nrecord lock, or a semaphore.")]),e._v(" "),n("ol",{attrs:{start:"4"}},[n("li",[e._v("For example, someone adds some debugging output and the problem “disappears.” The debugging code “fixes” the problem\nso it remains in the system.")])]),e._v(" "),n("p",[n("strong",[e._v("Deadlock")]),e._v(" 337")]),e._v(" "),n("h4",{attrs:{id:"lock-wait"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lock-wait"}},[e._v("#")]),e._v(" Lock & Wait ...")]),e._v(" "),n("p",[e._v("Once a thread acquires a resource, it will not release the resource until it has acquired all\nof the other resources it requires and has completed its work.")]),e._v(" "),n("h4",{attrs:{id:"no-preemption"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#no-preemption"}},[e._v("#")]),e._v(" No Preemption")]),e._v(" "),n("p",[e._v("One thread cannot take resources away from another thread. Once a thread holds a\nresource, the only way for another thread to get it is for the holding thread to release it.")]),e._v(" "),n("h4",{attrs:{id:"circular-wait"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#circular-wait"}},[e._v("#")]),e._v(" Circular Wait ..")]),e._v(" "),n("p",[e._v("This is also referred to as the deadly embrace. Imagine two threads, T1 and T2, and two\nresources, R1 and R2. T1 has R1, T2 has R2. T1 also requires R2, and T2 also requires R1.\nThis gives something like Figure A-3:")]),e._v(" "),n("p",[e._v("All four of these conditions must hold for deadlock to be possible. Break any one of these\nconditions and deadlock is not possible.")]),e._v(" "),n("h4",{attrs:{id:"breaking-mutual-exclusion"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#breaking-mutual-exclusion"}},[e._v("#")]),e._v(" Breaking Mutual Exclusion")]),e._v(" "),n("p",[e._v("One strategy for avoiding deadlock is to sidestep the mutual exclusion condition. You\nmight be able to do this by")]),e._v(" "),n("p",[n("strong",[e._v("-")]),e._v(" Using resources that allow simultaneous use, for example, AtomicInteger.\n"),n("strong",[e._v("-")]),e._v(" Increasing the number of resources such that it equals or exceeds the number of com-\npeting threads.\n"),n("strong",[e._v("-")]),e._v(" Checking that all your resources are free before seizing any.")]),e._v(" "),n("p",[e._v("Unfortunately, most resources are limited in number and don’t allow simultaneous\nuse. And it’s not uncommon for the identity of the second resource to be predicated on the\nresults of operating on the first. But don’t be discouraged; there are three conditions left.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Figure A-3\n")])])]),n("p",[e._v("338 "),n("strong",[e._v("Appendix A: Concurrency II")])]),e._v(" "),n("h4",{attrs:{id:"breaking-lock-wait"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#breaking-lock-wait"}},[e._v("#")]),e._v(" Breaking Lock & Wait")]),e._v(" "),n("p",[e._v("You can also eliminate deadlock if you refuse to wait. Check each resource before you\nseize it, and release all resources and start over if you run into one that’s busy.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("This approach introduces several potential problems:\n")])])]),n("p",[n("strong",[e._v("-")]),e._v(" Starvation—One thread keeps being unable to acquire the resources it needs (maybe it\nhas a unique combination of resources that seldom all become available).\n"),n("strong",[e._v("-")]),e._v(" Livelock—Several threads might get into lockstep and all acquire one resource and\nthen release one resource, over and over again. This is especially likely with simplistic\nCPU scheduling algorithms (think embedded devices or simplistic hand-written\nthread balancing algorithms).")]),e._v(" "),n("p",[e._v("Both of these can cause poor throughput. The first results in low CPU utilization,\nwhereas the second results in high and useless CPU utilization.")]),e._v(" "),n("p",[e._v("As inefficient as this strategy sounds, it’s better than nothing. It has the benefit that it\ncan almost always be implemented if all else fails.")]),e._v(" "),n("h4",{attrs:{id:"breaking-preemption"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#breaking-preemption"}},[e._v("#")]),e._v(" Breaking Preemption..")]),e._v(" "),n("p",[e._v("Another strategy for avoiding deadlock is to allow threads to take resources away from\nother threads. This is usually done through a simple request mechanism. When a thread\ndiscovers that a resource is busy, it asks the owner to release it. If the owner is also waiting\nfor some other resource, it releases them all and starts over.")]),e._v(" "),n("p",[e._v("This is similar to the previous approach but has the benefit that a thread is allowed to\nwait for a resource. This decreases the number of startovers. Be warned, however, that\nmanaging all those requests can be tricky.")]),e._v(" "),n("h4",{attrs:{id:"breaking-circular-wait"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#breaking-circular-wait"}},[e._v("#")]),e._v(" Breaking Circular Wait...")]),e._v(" "),n("p",[e._v("This is the most common approach to preventing deadlock. For most systems it requires\nno more than a simple convention agreed to by all parties.")]),e._v(" "),n("p",[e._v("In the example above with Thread 1 wanting both Resource 1 and Resource 2 and\nThread 2 wanting both Resource 2 and then Resource 1, simply forcing both Thread 1 and\nThread 2 to allocate resources in the same order makes circular wait impossible.")]),e._v(" "),n("p",[e._v("More generally, if all threads can agree on a global ordering of resources and if they\nall allocate resources in that order, then deadlock is impossible. Like all the other strate-\ngies, this can cause problems:")]),e._v(" "),n("p",[n("strong",[e._v("-")]),e._v(" The order of acquisition might not correspond to the order of use; thus a resource\nacquired at the start might not be used until the end. This can cause resources to be\nlocked longer than strictly necessary.")]),e._v(" "),n("p",[n("strong",[e._v("Testing Multithreaded Code")]),e._v(" 339")]),e._v(" "),n("p",[n("strong",[e._v("-")]),e._v(" Sometimes you cannot impose an order on the acquisition of resources. If the ID of\nthe second resource comes from an operation performed on the first, then ordering is\nnot feasible.")]),e._v(" "),n("p",[e._v("So there are many ways to avoid deadlock. Some lead to starvation, whereas others\nmake heavy use of the CPU and reduce responsiveness. TANSTAAFL!^5")]),e._v(" "),n("p",[e._v("Isolating the thread-related part of your solution to allow for tuning and experimenta-\ntion is a powerful way to gain the insights needed to determine the best strategies.")]),e._v(" "),n("h3",{attrs:{id:"testing-multithreaded-code"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#testing-multithreaded-code"}},[e._v("#")]),e._v(" Testing Multithreaded Code .")]),e._v(" "),n("p",[e._v("How can we write a test to demonstrate the following code is broken?")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("01: public class ClassWithThreadingProblem {\n02: int nextId;\n03:\n04: public int takeNextId() {\n05: return nextId++;\n06: }\n07:}\n")])])]),n("p",[e._v("Here’s a description of a test that will prove the code is broken:")]),e._v(" "),n("p",[n("strong",[e._v("-")]),e._v(" Remember the current value of nextId.\n"),n("strong",[e._v("-")]),e._v(" Create two threads, both of which call takeNextId() once.\n"),n("strong",[e._v("-")]),e._v(" Verify that nextId is two more than what we started with.\n"),n("strong",[e._v("-")]),e._v(" Run this until we demonstrate that nextId was only incremented by one instead\nof two.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing A-2 shows such a test:\n")])])]),n("ol",{attrs:{start:"5"}},[n("li",[e._v("There ain’t no such thing as a free lunch.")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing A-2\nClassWithThreadingProblemTest.java\n01: package example;\n02:\n03: import static org.junit.Assert.fail;\n04:\n05: import org.junit.Test;\n06:\n07: public class ClassWithThreadingProblemTest {\n08: @Test\n09: public void twoThreadsShouldFailEventually() throws Exception {\n10: final ClassWithThreadingProblem classWithThreadingProblem\n= new ClassWithThreadingProblem();\n11:\n")])])]),n("p",[e._v("340 "),n("strong",[e._v("Appendix A: Concurrency II")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('12: Runnable runnable = new Runnable() {\n13: public void run() {\n14: classWithThreadingProblem.takeNextId();\n15: }\n16: };\n17:\n18: for (int i = 0; i < 50000; ++i) {\n19: int startingId = classWithThreadingProblem.lastId;\n20: int expectedResult = 2 + startingId;\n21:\n22: Thread t1 = new Thread(runnable);\n23: Thread t2 = new Thread(runnable);\n24: t1.start();\n25: t2.start();\n26: t1.join();\n27: t2.join();\n28:\n29: int endingId = classWithThreadingProblem.lastId;\n30:\n31: if (endingId != expectedResult)\n32: return;\n33: }\n34:\n35: fail("Should have exposed a threading issue but it did not.");\n36: }\n37: }\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Line Description\n10 Create a single instance of ClassWithThreadingProblem. Note, we must use\nthe final keyword because we use it below in an anonymous inner class.\n12–16 Create an anonymous inner class that uses the single instance of\nClassWithThreadingProblem.\n18 Run this code “enough” times to demonstrate that the code failed, but not\nso much that the test “takes too long.” This is a balancing act; we don’t\nwant to wait too long to demonstrate failure. Picking this number is hard—\nalthough later we’ll see that we can greatly reduce this number.\n19 Remember the starting value. This test is trying to prove that the code in\nClassWithThreadingProblem is broken. If this test passes, it proved that the\ncode was broken. If this test fails, the test was unable to prove that the code\nis broken.\n20 We expect the final value to be two more than the current value.\n22–23 Create two threads, both of which use the object we created in lines 12–16.\nThis gives us the potential of two threads trying to use our single instance\nof ClassWithThreadingProblem and interfering with each other.\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing A-2 (continued)\nClassWithThreadingProblemTest.java\n")])])]),n("p",[n("strong",[e._v("Testing Multithreaded Code")]),e._v(" 341")]),e._v(" "),n("p",[e._v("This test certainly sets up the conditions for a concurrent update problem. However,\nthe problem occurs so infrequently that the vast majority of times this test won’t detect it.")]),e._v(" "),n("p",[e._v("Indeed, to truly detect the problem we need to set the number of iterations to over one\nmillion. Even then, in ten executions with a loop count of 1,000,000, the problem occurred\nonly once. That means we probably ought to set the iteration count to well over one hun-\ndred million to get reliable failures. How long are we prepared to wait?")]),e._v(" "),n("p",[e._v("Even if we tuned the test to get reliable failures on one machine, we’ll probably have\nto retune the test with different values to demonstrate the failure on another machine,\noperating system, or version of the JVM.")]),e._v(" "),n("p",[e._v("And this is a "),n("em",[e._v("simple")]),e._v(" problem. If we cannot demonstrate broken code easily with this\nproblem, how will we ever detect truly complex problems?")]),e._v(" "),n("p",[e._v("So what approaches can we take to demonstrate this simple failure? And, more impor-\ntantly, how can we write tests that will demonstrate failures in more complex code? How\nwill we be able to discover if our code has failures when we do not know where to look?")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Here are a few ideas:\n")])])]),n("p",[n("strong",[e._v("- Monte Carlo Testing.")]),e._v(" Make tests flexible, so they can be tuned. Then run the test over\nand over—say on a test server—randomly changing the tuning values. If the tests ever\nfail, the code is broken. Make sure to start writing those tests early so a continuous\nintegration server starts running them soon. By the way, make sure you carefully log\nthe conditions under which the test failed.\n"),n("strong",[e._v("-")]),e._v(" Run the test on every one of the target deployment platforms. Repeatedly. Continu-\nously. The longer the tests run without failure, the more likely that\n- The production code is correct or\n- The tests aren’t adequate to expose problems.\n"),n("strong",[e._v("-")]),e._v(" Run the tests on a machine with varying loads. If you can simulate loads close to a\nproduction environment, do so.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("24–25 Make our two threads eligible to run.\n26–27 Wait for both threads to finish before we check the results.\n29 Record the actual final value.\n31–32 Did our endingId differ from what we expected? If so, return end the test—\nwe’ve proven that the code is broken. If not, try again.\n35 If we got to here, our test was unable to prove the production code was bro-\nken in a “reasonable” amount of time; our code has failed. Either the code\nis not broken or we didn’t run enough iterations to get the failure condition\nto occur.\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Line Description\n")])])]),n("p",[e._v("342 "),n("strong",[e._v("Appendix A: Concurrency II")])]),e._v(" "),n("p",[e._v("Yet, even if you do all of these things, you still don’t stand a very good chance of find-\ning threading problems with your code. The most insidious problems are the ones that\nhave such a small cross section that they only occur once in a billion opportunities. Such\nproblems are the terror of complex systems.")]),e._v(" "),n("h3",{attrs:{id:"tool-support-for-testing-thread-based-code"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tool-support-for-testing-thread-based-code"}},[e._v("#")]),e._v(" Tool Support for Testing Thread-Based Code")]),e._v(" "),n("p",[e._v("IBM has created a tool called ConTest.^6 It instruments classes to make it more likely that\nnon-thread-safe code fails.")]),e._v(" "),n("p",[e._v("We do not have any direct relationship with IBM or the team that developed ConTest.\nA colleague of ours pointed us to it. We noticed vast improvement in our ability to find\nthreading issues after a few minutes of using it.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Here’s an outline of how to use ConTest:\n")])])]),n("p",[n("strong",[e._v("-")]),e._v(" Write tests and production code, making sure there are tests specifically designed to\nsimulate multiple users under varying loads, as mentioned above.\n"),n("strong",[e._v("-")]),e._v(" Instrument test and production code with ConTest.\n"),n("strong",[e._v("-")]),e._v(" Run the tests.")]),e._v(" "),n("p",[e._v("When we instrumented code with ConTest, our success rate went from roughly one fail-\nure in ten million iterations to roughly one failure in "),n("em",[e._v("thirty")]),e._v(" iterations. Here are the loop values\nfor several runs of the test after instrumentation: 13, 23, 0, 54, 16, 14, 6, 69, 107, 49, 2. So\nclearly the instrumented classes failed much earlier and with much greater reliability.")]),e._v(" "),n("h3",{attrs:{id:"conclusion-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#conclusion-3"}},[e._v("#")]),e._v(" Conclusion ..")]),e._v(" "),n("p",[e._v("This chapter has been a very brief sojourn through the large and treacherous territory of\nconcurrent programming. We barely scratched the surface. Our emphasis here was on dis-\nciplines to help keep concurrent code clean, but there is much more you should learn if\nyou are going to be writing concurrent systems. We recommend you start with Doug Lea’s\nwonderful book "),n("em",[e._v("Concurrent Programming in Java: Design Principles and Patterns.")]),e._v("^7")]),e._v(" "),n("p",[e._v("In this chapter we talked about concurrent update, and the disciplines of clean syn-\nchronization and locking that can prevent it. We talked about how threads can enhance the\nthroughput of an I/O-bound system and showed the clean techniques for achieving such\nimprovements. We talked about deadlock and the disciplines for preventing it in a clean")]),e._v(" "),n("ol",{attrs:{start:"6"}},[n("li",[n("a",{attrs:{href:"http://www.haifa.ibm.com/projects/verification/contest/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.haifa.ibm.com/projects/verification/contest/index.html"),n("OutboundLink")],1)]),e._v(" "),n("li",[e._v("See [Lea99] p. 191.")])]),e._v(" "),n("p",[n("strong",[e._v("Tutorial: Full Code Examples")]),e._v(" 343")]),e._v(" "),n("p",[e._v("way. Finally, we talked about strategies for exposing concurrent problems by instrumenting\nyour code.")]),e._v(" "),n("h3",{attrs:{id:"tutorial-full-code-examples"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tutorial-full-code-examples"}},[e._v("#")]),e._v(" Tutorial: Full Code Examples ..")]),e._v(" "),n("h4",{attrs:{id:"client-server-nonthreaded"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#client-server-nonthreaded"}},[e._v("#")]),e._v(" Client/Server Nonthreaded .")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('Listing A-3\nServer.java\npackage com.objectmentor.clientserver.nonthreaded;\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.SocketException;\nimport common.MessageUtils;\npublic class Server implements Runnable {\nServerSocket serverSocket;\nvolatile boolean keepProcessing = true;\npublic Server(int port, int millisecondsTimeout) throws IOException {\nserverSocket = new ServerSocket(port);\nserverSocket.setSoTimeout(millisecondsTimeout);\n}\npublic void run() {\nSystem.out.printf("Server Starting\\n");\nwhile (keepProcessing) {\ntry {\nSystem.out.printf("accepting client\\n");\nSocket socket = serverSocket.accept();\nSystem.out.printf("got client\\n");\nprocess(socket);\n} catch (Exception e) {\nhandle(e);\n}\n}\n}\nprivate void handle(Exception e) {\nif (!(e instanceof SocketException)) {\ne.printStackTrace();\n}\n}\npublic void stopProcessing() {\nkeepProcessing = false;\ncloseIgnoringException(serverSocket);\n}\n')])])]),n("p",[e._v("344 "),n("strong",[e._v("Appendix A: Concurrency II")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('void process(Socket socket) {\nif (socket == null)\nreturn;\ntry {\nSystem.out.printf("Server: getting message\\n");\nString message = MessageUtils.getMessage(socket);\nSystem.out.printf("Server: got message: %s\\n", message);\nThread.sleep(1000);\nSystem.out.printf("Server: sending reply: %s\\n", message);\nMessageUtils.sendMessage(socket, "Processed: " + message);\nSystem.out.printf("Server: sent\\n");\ncloseIgnoringException(socket);\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\nprivate void closeIgnoringException(Socket socket) {\nif (socket != null)\ntry {\nsocket.close();\n} catch (IOException ignore) {\n}\n}\nprivate void closeIgnoringException(ServerSocket serverSocket) {\nif (serverSocket != null)\ntry {\nserverSocket.close();\n} catch (IOException ignore) {\n}\n}\n}\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing A-4\nClientTest.java\npackage com.objectmentor.clientserver.nonthreaded;\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.SocketException;\nimport common.MessageUtils;\npublic class Server implements Runnable {\nServerSocket serverSocket;\nvolatile boolean keepProcessing = true;\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing A-3 (continued)\nServer.java\n")])])]),n("p",[n("strong",[e._v("Tutorial: Full Code Examples")]),e._v(" 345")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public Server(int port, int millisecondsTimeout) throws IOException {\nserverSocket = new ServerSocket(port);\nserverSocket.setSoTimeout(millisecondsTimeout);\n}\npublic void run() {\nSystem.out.printf("Server Starting\\n");\nwhile (keepProcessing) {\ntry {\nSystem.out.printf("accepting client\\n");\nSocket socket = serverSocket.accept();\nSystem.out.printf("got client\\n");\nprocess(socket);\n} catch (Exception e) {\nhandle(e);\n}\n}\n}\nprivate void handle(Exception e) {\nif (!(e instanceof SocketException)) {\ne.printStackTrace();\n}\n}\npublic void stopProcessing() {\nkeepProcessing = false;\ncloseIgnoringException(serverSocket);\n}\nvoid process(Socket socket) {\nif (socket == null)\nreturn;\ntry {\nSystem.out.printf("Server: getting message\\n");\nString message = MessageUtils.getMessage(socket);\nSystem.out.printf("Server: got message: %s\\n", message);\nThread.sleep(1000);\nSystem.out.printf("Server: sending reply: %s\\n", message);\nMessageUtils.sendMessage(socket, "Processed: " + message);\nSystem.out.printf("Server: sent\\n");\ncloseIgnoringException(socket);\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\nprivate void closeIgnoringException(Socket socket) {\nif (socket != null)\ntry {\nsocket.close();\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing A-4 (continued)\nClientTest.java\n")])])]),n("p",[e._v("346 "),n("strong",[e._v("Appendix A: Concurrency II")])]),e._v(" "),n("h4",{attrs:{id:"client-server-using-threads"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#client-server-using-threads"}},[e._v("#")]),e._v(" Client/Server Using Threads ..")]),e._v(" "),n("p",[e._v("Changing the server to use threads simply requires a change to the process message (new\nlines are emphasized to stand out):")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("void process(final Socket socket) {\nif (socket == null)\nreturn;\nRunnable clientHandler = new Runnable() {\npublic void run() {\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("} catch (IOException ignore) {\n}\n}\nprivate void closeIgnoringException(ServerSocket serverSocket) {\nif (serverSocket != null)\ntry {\nserverSocket.close();\n} catch (IOException ignore) {\n}\n}\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing A-5\nMessageUtils.java\npackage common;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.OutputStream;\nimport java.net.Socket;\npublic class MessageUtils {\npublic static void sendMessage(Socket socket, String message)\nthrows IOException {\nOutputStream stream = socket.getOutputStream();\nObjectOutputStream oos = new ObjectOutputStream(stream);\noos.writeUTF(message);\noos.flush();\n}\npublic static String getMessage(Socket socket) throws IOException {\nInputStream stream = socket.getInputStream();\nObjectInputStream ois = new ObjectInputStream(stream);\nreturn ois.readUTF();\n}\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing A-4 (continued)\nClientTest.java\n")])])]),n("p",[n("strong",[e._v("Tutorial: Full Code Examples")]),e._v(" 347")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('try {\nSystem.out.printf("Server: getting message\\n");\nString message = MessageUtils.getMessage(socket);\nSystem.out.printf("Server: got message: %s\\n", message);\nThread.sleep(1000);\nSystem.out.printf("Server: sending reply: %s\\n", message);\nMessageUtils.sendMessage(socket, "Processed: " + message);\nSystem.out.printf("Server: sent\\n");\ncloseIgnoringException(socket);\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n};\nThread clientConnection = new Thread(clientHandler);\nclientConnection.start();\n}\n')])])]),n("h4",{attrs:{id:"this-page-intentionally-left-blank"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#this-page-intentionally-left-blank"}},[e._v("#")]),e._v(" This page intentionally left blank")]),e._v(" "),n("h5",{attrs:{id:"_349"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_349"}},[e._v("#")]),e._v(" 349")]),e._v(" "),n("h1",{attrs:{id:"appendix-b"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#appendix-b"}},[e._v("#")]),e._v(" Appendix B")]),e._v(" "),n("p",[n("strong",[e._v("org.jfree.date.SerialDate")])]),e._v(" "),n("p",[n("strong",[e._v("Listing B-1\nSerialDate.Java")]),e._v("\n1 /* ========================================================================\n2 * JCommon : a free general purpose class library for the Java(tm) platform\n3 * ========================================================================\n4 *\n5 * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.\n6 *\n7 * Project Info: "),n("a",{attrs:{href:"http://www.jfree.org/jcommon/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.jfree.org/jcommon/index.html"),n("OutboundLink")],1),e._v("\n8 *\n9 * This library is free software; you can redistribute it and/or modify it\n10 * under the terms of the GNU Lesser General Public License as published by\n11 * the Free Software Foundation; either version 2.1 of the License, or\n12 * (at your option) any later version.\n13 *\n14 * This library is distributed in the hope that it will be useful, but\n15 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n16 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public\n17 * License for more details.\n18 *\n19 * You should have received a copy of the GNU Lesser General Public\n20 * License along with this library; if not, write to the Free Software\n21 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n22 * USA.\n23 *\n24 * [Java is a trademark or registered trademark of Sun Microsystems, Inc.\n25 * in the United States and other countries.]\n26 *\n27 * ---------------\n28 * SerialDate.java\n29 * ---------------\n30 * (C) Copyright 2001-2005, by Object Refinery Limited.\n31 *\n32 * Original Author: David Gilbert (for Object Refinery Limited);\n33 * Contributor(s): -;\n34 *\n35 * $Id: SerialDate.java,v 1.7 2005/11/03 09:25:17 mungady Exp $\n36 *\n37 * Changes (from 11-Oct-2001)")]),e._v(" "),n("p",[e._v("350 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[e._v("38 * --------------------------\n39 * 11-Oct-2001 : Re-organised the class and moved it to new package\n40 * com.jrefinery.date (DG);\n41 * 05-Nov-2001 : Added a getDescription() method, and eliminated NotableDate\n42 * class (DG);\n43 * 12-Nov-2001 : IBD requires setDescription() method, now that NotableDate\n44 * class is gone (DG); Changed getPreviousDayOfWeek(),\n45 * getFollowingDayOfWeek() and getNearestDayOfWeek() to correct\n46 * bugs (DG);\n47 * 05-Dec-2001 : Fixed bug in SpreadsheetDate class (DG);\n48 * 29-May-2002 : Moved the month constants into a separate interface\n49 * (MonthConstants) (DG);\n50 * 27-Aug-2002 : Fixed bug in addMonths() method, thanks to N???levka Petr (DG);\n51 * 03-Oct-2002 : Fixed errors reported by Checkstyle (DG);\n52 * 13-Mar-2003 : Implemented Serializable (DG);\n53 * 29-May-2003 : Fixed bug in addMonths method (DG);\n54 * 04-Sep-2003 : Implemented Comparable. Updated the isInRange javadocs (DG);\n55 * 05-Jan-2005 : Fixed bug in addYears() method (1096282) (DG);\n56 *\n57 "),n("em",[e._v("/\n58\n59 package org.jfree.date;\n60\n61 import java.io.Serializable;\n62 import java.text.DateFormatSymbols;\n63 import java.text.SimpleDateFormat;\n64 import java.util.Calendar;\n65 import java.util.GregorianCalendar;\n66\n67 /")]),e._v("*\n68 * An abstract class that defines our requirements for manipulating dates,\n69 * without tying down a particular implementation.\n70 * "),n("P",[e._v("\n71 * Requirement 1 : match at least what Excel does for dates;\n72 * Requirement 2 : class is immutable;\n73 * "),n("P",[e._v("\n74 * Why not just use java.util.Date? We will, when it makes sense. At times,\n75 * java.util.Date can be "),n("em",[e._v("too")]),e._v(" precise - it represents an instant in time,\n76 * accurate to 1/1000th of a second (with the date itself depending on the\n77 * time-zone). Sometimes we just want to represent a particular day (e.g. 21\n78 * January 2015) without concerning ourselves about the time of day, or the\n79 * time-zone, or anything else. That's what we've defined SerialDate for.\n80 * "),n("P",[e._v("\n81 * You can call getInstance() to get a concrete subclass of SerialDate,\n82 * without worrying about the exact implementation.\n83 *\n84 * @author David Gilbert\n85 "),n("em",[e._v("/\n86 public abstract class SerialDate implements Comparable,\n87 Serializable,\n88 MonthConstants {\n89\n90 /")]),e._v("* For serialization. "),n("em",[e._v("/\n91 private static final long serialVersionUID = -293716040467423637L;\n92\n93 /")]),e._v("* Date format symbols. "),n("em",[e._v("/\n94 public static final DateFormatSymbols\n95 DATE_FORMAT_SYMBOLS = new SimpleDateFormat().getDateFormatSymbols();\n96\n97 /")]),e._v("* The serial number for 1 January 1900. "),n("em",[e._v("/\n98 public static final int SERIAL_LOWER_BOUND = 2;\n99\n100 /")]),e._v("* The serial number for 31 December 9999. */\n101 public static final int SERIAL_UPPER_BOUND = 2958465;\n102")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-1 (continued)\nSerialDate.Java\n")])])]),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 351")]),e._v(" "),n("p",[e._v("103 /** The lowest year value supported by this date format. "),n("em",[e._v("/\n104 public static final int MINIMUM_YEAR_SUPPORTED = 1900;\n105\n106 /")]),e._v("* The highest year value supported by this date format. "),n("em",[e._v("/\n107 public static final int MAXIMUM_YEAR_SUPPORTED = 9999;\n108\n109 /")]),e._v("* Useful constant for Monday. Equivalent to java.util.Calendar.MONDAY. "),n("em",[e._v("/\n110 public static final int MONDAY = Calendar.MONDAY;\n111\n112 /")]),e._v("*\n113 * Useful constant for Tuesday. Equivalent to java.util.Calendar.TUESDAY.\n114 "),n("em",[e._v("/\n115 public static final int TUESDAY = Calendar.TUESDAY;\n116\n117 /")]),e._v("*\n118 * Useful constant for Wednesday. Equivalent to\n119 * java.util.Calendar.WEDNESDAY.\n120 "),n("em",[e._v("/\n121 public static final int WEDNESDAY = Calendar.WEDNESDAY;\n122\n123 /")]),e._v("*\n124 * Useful constant for Thrusday. Equivalent to java.util.Calendar.THURSDAY.\n125 "),n("em",[e._v("/\n126 public static final int THURSDAY = Calendar.THURSDAY;\n127\n128 /")]),e._v("* Useful constant for Friday. Equivalent to java.util.Calendar.FRIDAY. "),n("em",[e._v("/\n129 public static final int FRIDAY = Calendar.FRIDAY;\n130\n131 /")]),e._v("*\n132 * Useful constant for Saturday. Equivalent to java.util.Calendar.SATURDAY.\n133 "),n("em",[e._v("/\n134 public static final int SATURDAY = Calendar.SATURDAY;\n135\n136 /")]),e._v("* Useful constant for Sunday. Equivalent to java.util.Calendar.SUNDAY. "),n("em",[e._v("/\n137 public static final int SUNDAY = Calendar.SUNDAY;\n138\n139 /")]),e._v("* The number of days in each month in non leap years. "),n("em",[e._v("/\n140 static final int[] LAST_DAY_OF_MONTH =\n141 {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n142\n143 /")]),e._v("* The number of days in a (non-leap) year up to the end of each month. "),n("em",[e._v("/\n144 static final int[] AGGREGATE_DAYS_TO_END_OF_MONTH =\n145 {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365};\n146\n147 /")]),e._v("* The number of days in a year up to the end of the preceding month. "),n("em",[e._v("/\n148 static final int[] AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH =\n149 {0, 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365};\n150\n151 /")]),e._v("* The number of days in a leap year up to the end of each month. "),n("em",[e._v("/\n152 static final int[] LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH =\n153 {0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366};\n154\n155 /")]),e._v("*\n156 * The number of days in a leap year up to the end of the preceding month.\n157 "),n("em",[e._v("/\n158 static final int[]\n159 LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH =\n160 {0, 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366};\n161\n162 /")]),e._v("* A useful constant for referring to the first week in a month. */\n163 public static final int FIRST_WEEK_IN_MONTH = 1;\n164")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-1 (continued)\nSerialDate.Java\n")])])]),n("p",[e._v("352 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[e._v("165 /** A useful constant for referring to the second week in a month. "),n("em",[e._v("/\n166 public static final int SECOND_WEEK_IN_MONTH = 2;\n167\n168 /")]),e._v("* A useful constant for referring to the third week in a month. "),n("em",[e._v("/\n169 public static final int THIRD_WEEK_IN_MONTH = 3;\n170\n171 /")]),e._v("* A useful constant for referring to the fourth week in a month. "),n("em",[e._v("/\n172 public static final int FOURTH_WEEK_IN_MONTH = 4;\n173\n174 /")]),e._v("* A useful constant for referring to the last week in a month. "),n("em",[e._v("/\n175 public static final int LAST_WEEK_IN_MONTH = 0;\n176\n177 /")]),e._v("* Useful range constant. "),n("em",[e._v("/\n178 public static final int INCLUDE_NONE = 0;\n179\n180 /")]),e._v("* Useful range constant. "),n("em",[e._v("/\n181 public static final int INCLUDE_FIRST = 1;\n182\n183 /")]),e._v("* Useful range constant. "),n("em",[e._v("/\n184 public static final int INCLUDE_SECOND = 2;\n185\n186 /")]),e._v("* Useful range constant. "),n("em",[e._v("/\n187 public static final int INCLUDE_BOTH = 3;\n188\n189 /")]),e._v("*\n190 * Useful constant for specifying a day of the week relative to a fixed\n191 * date.\n192 "),n("em",[e._v("/\n193 public static final int PRECEDING = -1;\n194\n195 /")]),e._v("*\n196 * Useful constant for specifying a day of the week relative to a fixed\n197 * date.\n198 "),n("em",[e._v("/\n199 public static final int NEAREST = 0;\n200\n201 /")]),e._v("*\n202 * Useful constant for specifying a day of the week relative to a fixed\n203 * date.\n204 "),n("em",[e._v("/\n205 public static final int FOLLOWING = 1;\n206\n207 /")]),e._v("* A description for the date. "),n("em",[e._v("/\n208 private String description;\n209\n210 /")]),e._v("*\n211 * Default constructor.\n212 "),n("em",[e._v("/\n213 protected SerialDate() {\n214 }\n215\n216 /")]),e._v("*\n217 * Returns "),n("code",[e._v("true")]),e._v(" if the supplied integer code represents a\n218 * valid day-of-the-week, and "),n("code",[e._v("false")]),e._v(" otherwise.\n219 *\n220 * @param code the code being checked for validity.\n221 *\n222 * @return "),n("code",[e._v("true")]),e._v(" if the supplied integer code represents a\n223 * valid day-of-the-week, and "),n("code",[e._v("false")]),e._v(" otherwise.\n224 */\n225 public static boolean isValidWeekdayCode(final int code) {\n226")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-1 (continued)\nSerialDate.Java\n")])])]),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 353")]),e._v(" "),n("p",[e._v("227 switch(code) {\n228 case SUNDAY:\n229 case MONDAY:\n230 case TUESDAY:\n231 case WEDNESDAY:\n232 case THURSDAY:\n233 case FRIDAY:\n234 case SATURDAY:\n235 return true;\n236 default:\n237 return false;\n238 }\n239\n240 }\n241\n242 /**\n243 * Converts the supplied string to a day of the week.\n244 *\n245 * @param s a string representing the day of the week.\n246 *\n247 * @return "),n("code",[e._v("-1")]),e._v(" if the string is not convertable, the day of\n248 * the week otherwise.\n249 "),n("em",[e._v("/\n250 public static int stringToWeekdayCode(String s) {\n251\n252 final String[] shortWeekdayNames\n253 = DATE_FORMAT_SYMBOLS.getShortWeekdays();\n254 final String[] weekDayNames = DATE_FORMAT_SYMBOLS.getWeekdays();\n255\n256 int result = -1;\n257 s = s.trim();\n258 for (int i = 0; i < weekDayNames.length; i++) {\n259 if (s.equals(shortWeekdayNames[i])) {\n260 result = i;\n261 break;\n262 }\n263 if (s.equals(weekDayNames[i])) {\n264 result = i;\n265 break;\n266 }\n267 }\n268 return result;\n269\n270 }\n271\n272 /")]),e._v("*\n273 * Returns a string representing the supplied day-of-the-week.\n274 * "),n("P",[e._v("\n275 * Need to find a better approach.\n276 *\n277 * @param weekday the day of the week.\n278 *\n279 * @return a string representing the supplied day-of-the-week.\n280 "),n("em",[e._v("/\n281 public static String weekdayCodeToString(final int weekday) {\n282\n283 final String[] weekdays = DATE_FORMAT_SYMBOLS.getWeekdays();\n284 return weekdays[weekday];\n285\n286 }\n287\n288 /")]),e._v("*")])],1),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-1 (continued)\nSerialDate.Java\n")])])]),n("p",[e._v("354 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[e._v("289 * Returns an array of month names.\n290 *\n291 * @return an array of month names.\n292 "),n("em",[e._v("/\n293 public static String[] getMonths() {\n294\n295 return getMonths(false);\n296\n297 }\n298\n299 /")]),e._v("*\n300 * Returns an array of month names.\n301 *\n302 * @param shortened a flag indicating that shortened month names should\n303 * be returned.\n304 *\n305 * @return an array of month names.\n306 "),n("em",[e._v("/\n307 public static String[] getMonths(final boolean shortened) {\n308\n309 if (shortened) {\n310 return DATE_FORMAT_SYMBOLS.getShortMonths();\n311 }\n312 else {\n313 return DATE_FORMAT_SYMBOLS.getMonths();\n314 }\n315\n316 }\n317\n318 /")]),e._v("*\n319 * Returns true if the supplied integer code represents a valid month.\n320 *\n321 * @param code the code being checked for validity.\n322 *\n323 * @return "),n("code",[e._v("true")]),e._v(" if the supplied integer code represents a\n324 * valid month.\n325 "),n("em",[e._v("/\n326 public static boolean isValidMonthCode(final int code) {\n327\n328 switch(code) {\n329 case JANUARY:\n330 case FEBRUARY:\n331 case MARCH:\n332 case APRIL:\n333 case MAY:\n334 case JUNE:\n335 case JULY:\n336 case AUGUST:\n337 case SEPTEMBER:\n338 case OCTOBER:\n339 case NOVEMBER:\n340 case DECEMBER:\n341 return true;\n342 default:\n343 return false;\n344 }\n345\n346 }\n347\n348 /")]),e._v("*\n349 * Returns the quarter for the specified month.\n350 *")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-1 (continued)\nSerialDate.Java\n")])])]),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 355")]),e._v(" "),n("p",[e._v("351 * @param code the month code (1-12).\n352 *\n353 * @return the quarter that the month belongs to.\n354 * @throws java.lang.IllegalArgumentException\n355 "),n("em",[e._v('/\n356 public static int monthCodeToQuarter(final int code) {\n357\n358 switch(code) {\n359 case JANUARY:\n360 case FEBRUARY:\n361 case MARCH: return 1;\n362 case APRIL:\n363 case MAY:\n364 case JUNE: return 2;\n365 case JULY:\n366 case AUGUST:\n367 case SEPTEMBER: return 3;\n368 case OCTOBER:\n369 case NOVEMBER:\n370 case DECEMBER: return 4;\n371 default: throw new IllegalArgumentException(\n372 "SerialDate.monthCodeToQuarter: invalid month code.");\n373 }\n374\n375 }\n376\n377 /')]),e._v("*\n378 * Returns a string representing the supplied month.\n379 * "),n("P",[e._v("\n380 * The string returned is the long form of the month name taken from the\n381 * default locale.\n382 *\n383 * @param month the month.\n384 *\n385 * @return a string representing the supplied month.\n386 "),n("em",[e._v("/\n387 public static String monthCodeToString(final int month) {\n388\n389 return monthCodeToString(month, false);\n390\n391 }\n392\n393 /")]),e._v("*\n394 * Returns a string representing the supplied month.\n395 * "),n("P",[e._v("\n396 * The string returned is the long or short form of the month name taken\n397 * from the default locale.\n398 *\n399 * @param month the month.\n400 * @param shortened if "),n("code",[e._v("true")]),e._v(' return the abbreviation of the\n401 * month.\n402 *\n403 * @return a string representing the supplied month.\n404 * @throws java.lang.IllegalArgumentException\n405 */\n406 public static String monthCodeToString(final int month,\n407 final boolean shortened) {\n408\n409 // check arguments...\n410 if (!isValidMonthCode(month)) {\n411 throw new IllegalArgumentException(\n412 "SerialDate.monthCodeToString: month outside valid range.");')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-1 (continued)\nSerialDate.Java\n")])])]),n("p",[e._v("356 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[e._v("413 }\n414\n415 final String[] months;\n416\n417 if (shortened) {\n418 months = DATE_FORMAT_SYMBOLS.getShortMonths();\n419 }\n420 else {\n421 months = DATE_FORMAT_SYMBOLS.getMonths();\n422 }\n423\n424 return months[month - 1];\n425\n426 }\n427\n428 /**\n429 * Converts a string to a month code.\n430 * "),n("P",[e._v("\n431 * This method will return one of the constants JANUARY, FEBRUARY, ...,\n432 * DECEMBER that corresponds to the string. If the string is not\n433 * recognised, this method returns -1.\n434 *\n435 * @param s the string to parse.\n436 *\n437 * @return "),n("code",[e._v("-1")]),e._v(" if the string is not parseable, the month of the\n438 * year otherwise.\n439 "),n("em",[e._v("/\n440 public static int stringToMonthCode(String s) {\n441\n442 final String[] shortMonthNames = DATE_FORMAT_SYMBOLS.getShortMonths();\n443 final String[] monthNames = DATE_FORMAT_SYMBOLS.getMonths();\n444\n445 int result = -1;\n446 s = s.trim();\n447\n448 // first try parsing the string as an integer (1-12)...\n449 try {\n450 result = Integer.parseInt(s);\n451 }\n452 catch (NumberFormatException e) {\n453 // suppress\n454 }\n455\n456 // now search through the month names...\n457 if ((result < 1) || (result > 12)) {\n458 for (int i = 0; i < monthNames.length; i++) {\n459 if (s.equals(shortMonthNames[i])) {\n460 result = i + 1;\n461 break;\n462 }\n463 if (s.equals(monthNames[i])) {\n464 result = i + 1;\n465 break;\n466 }\n467 }\n468 }\n469\n470 return result;\n471\n472 }\n473\n474 /")]),e._v("*")])],1),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-1 (continued)\nSerialDate.Java\n")])])]),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 357")]),e._v(" "),n("p",[e._v("475 * Returns true if the supplied integer code represents a valid\n476 * week-in-the-month, and false otherwise.\n477 *\n478 * @param code the code being checked for validity.\n479 * @return "),n("code",[e._v("true")]),e._v(" if the supplied integer code represents a\n480 * valid week-in-the-month.\n481 "),n("em",[e._v("/\n482 public static boolean isValidWeekInMonthCode(final int code) {\n483\n484 switch(code) {\n485 case FIRST_WEEK_IN_MONTH:\n486 case SECOND_WEEK_IN_MONTH:\n487 case THIRD_WEEK_IN_MONTH:\n488 case FOURTH_WEEK_IN_MONTH:\n489 case LAST_WEEK_IN_MONTH: return true;\n490 default: return false;\n491 }\n492\n493 }\n494\n495 /")]),e._v("*\n496 * Determines whether or not the specified year is a leap year.\n497 *\n498 * @param yyyy the year (in the range 1900 to 9999).\n499 *\n500 * @return "),n("code",[e._v("true")]),e._v(" if the specified year is a leap year.\n501 "),n("em",[e._v("/\n502 public static boolean isLeapYear(final int yyyy) {\n503\n504 if ((yyyy % 4) != 0) {\n505 return false;\n506 }\n507 else if ((yyyy % 400) == 0) {\n508 return true;\n509 }\n510 else if ((yyyy % 100) == 0) {\n511 return false;\n512 }\n513 else {\n514 return true;\n515 }\n516\n517 }\n518\n519 /")]),e._v("*\n520 * Returns the number of leap years from 1900 to the specified year\n521 * INCLUSIVE.\n522 * "),n("P",[e._v("\n523 * Note that 1900 is not a leap year.\n524 *\n525 * @param yyyy the year (in the range 1900 to 9999).\n526 *\n527 * @return the number of leap years from 1900 to the specified year.\n528 */\n529 public static int leapYearCount(final int yyyy) {\n530\n531 final int leap4 = (yyyy - 1896) / 4;\n532 final int leap100 = (yyyy - 1800) / 100;\n533 final int leap400 = (yyyy - 1600) / 400;\n534 return leap4 - leap100 + leap400;\n535\n536 }")])],1),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-1 (continued)\nSerialDate.Java\n")])])]),n("p",[e._v("358 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[e._v("537\n538 /**\n539 * Returns the number of the last day of the month, taking into account\n540 * leap years.\n541 *\n542 * @param month the month.\n543 * @param yyyy the year (in the range 1900 to 9999).\n544 *\n545 * @return the number of the last day of the month.\n546 "),n("em",[e._v("/\n547 public static int lastDayOfMonth(final int month, final int yyyy) {\n548\n549 final int result = LAST_DAY_OF_MONTH[month];\n550 if (month != FEBRUARY) {\n551 return result;\n552 }\n553 else if (isLeapYear(yyyy)) {\n554 return result + 1;\n555 }\n556 else {\n557 return result;\n558 }\n559\n560 }\n561\n562 /")]),e._v("*\n563 * Creates a new date by adding the specified number of days to the base\n564 * date.\n565 *\n566 * @param days the number of days to add (can be negative).\n567 * @param base the base date.\n568 *\n569 * @return a new date.\n570 "),n("em",[e._v("/\n571 public static SerialDate addDays(final int days, final SerialDate base) {\n572\n573 final int serialDayNumber = base.toSerial() + days;\n574 return SerialDate.createInstance(serialDayNumber);\n575\n576 }\n577\n578 /")]),e._v("*\n579 * Creates a new date by adding the specified number of months to the base\n580 * date.\n581 * "),n("P",[e._v("\n582 * If the base date is close to the end of the month, the day on the result\n583 * may be adjusted slightly: 31 May + 1 month = 30 June.\n584 *\n585 * @param months the number of months to add (can be negative).\n586 * @param base the base date.\n587 *\n588 * @return a new date.\n589 */\n590 public static SerialDate addMonths(final int months,\n591 final SerialDate base) {\n592\n593 final int yy = (12 * base.getYYYY() + base.getMonth() + months - 1)\n594 / 12;\n595 final int mm = (12 * base.getYYYY() + base.getMonth() + months - 1)\n596 % 12 + 1;\n597 final int dd = Math.min(\n598 base.getDayOfMonth(), SerialDate.lastDayOfMonth(mm, yy)")])],1),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-1 (continued)\nSerialDate.Java\n")])])]),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 359")]),e._v(" "),n("p",[e._v("599 );\n600 return SerialDate.createInstance(dd, mm, yy);\n601\n602 }\n603\n604 /**\n605 * Creates a new date by adding the specified number of years to the base\n606 * date.\n607 *\n608 * @param years the number of years to add (can be negative).\n609 * @param base the base date.\n610 *\n611 * @return A new date.\n612 "),n("em",[e._v("/\n613 public static SerialDate addYears(final int years, final SerialDate base) {\n614\n615 final int baseY = base.getYYYY();\n616 final int baseM = base.getMonth();\n617 final int baseD = base.getDayOfMonth();\n618\n619 final int targetY = baseY + years;\n620 final int targetD = Math.min(\n621 baseD, SerialDate.lastDayOfMonth(baseM, targetY)\n622 );\n623\n624 return SerialDate.createInstance(targetD, baseM, targetY);\n625\n626 }\n627\n628 /")]),e._v('*\n629 * Returns the latest date that falls on the specified day-of-the-week and\n630 * is BEFORE the base date.\n631 *\n632 * @param targetWeekday a code for the target day-of-the-week.\n633 * @param base the base date.\n634 *\n635 * @return the latest date that falls on the specified day-of-the-week and\n636 * is BEFORE the base date.\n637 */\n638 public static SerialDate getPreviousDayOfWeek(final int targetWeekday,\n639 final SerialDate base) {\n640\n641 // check arguments...\n642 if (!SerialDate.isValidWeekdayCode(targetWeekday)) {\n643 throw new IllegalArgumentException(\n644 "Invalid day-of-the-week code."\n645 );\n646 }\n647\n648 // find the date...\n649 final int adjust;\n650 final int baseDOW = base.getDayOfWeek();\n651 if (baseDOW > targetWeekday) {\n652 adjust = Math.min(0, targetWeekday - baseDOW);\n653 }\n654 else {\n655 adjust = -7 + Math.max(0, targetWeekday - baseDOW);\n656 }\n657\n658 return SerialDate.addDays(adjust, base);\n659\n660 }')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-1 (continued)\nSerialDate.Java\n")])])]),n("p",[e._v("360 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[e._v("661\n662 /**\n663 * Returns the earliest date that falls on the specified day-of-the-week\n664 * and is AFTER the base date.\n665 *\n666 * @param targetWeekday a code for the target day-of-the-week.\n667 * @param base the base date.\n668 *\n669 * @return the earliest date that falls on the specified day-of-the-week\n670 * and is AFTER the base date.\n671 "),n("em",[e._v('/\n672 public static SerialDate getFollowingDayOfWeek(final int targetWeekday,\n673 final SerialDate base) {\n674\n675 // check arguments...\n676 if (!SerialDate.isValidWeekdayCode(targetWeekday)) {\n677 throw new IllegalArgumentException(\n678 "Invalid day-of-the-week code."\n679 );\n680 }\n681\n682 // find the date...\n683 final int adjust;\n684 final int baseDOW = base.getDayOfWeek();\n685 if (baseDOW > targetWeekday) {\n686 adjust = 7 + Math.min(0, targetWeekday - baseDOW);\n687 }\n688 else {\n689 adjust = Math.max(0, targetWeekday - baseDOW);\n690 }\n691\n692 return SerialDate.addDays(adjust, base);\n693 }\n694\n695 /')]),e._v('*\n696 * Returns the date that falls on the specified day-of-the-week and is\n697 * CLOSEST to the base date.\n698 *\n699 * @param targetDOW a code for the target day-of-the-week.\n700 * @param base the base date.\n701 *\n702 * @return the date that falls on the specified day-of-the-week and is\n703 * CLOSEST to the base date.\n704 */\n705 public static SerialDate getNearestDayOfWeek(final int targetDOW,\n706 final SerialDate base) {\n707\n708 // check arguments...\n709 if (!SerialDate.isValidWeekdayCode(targetDOW)) {\n710 throw new IllegalArgumentException(\n711 "Invalid day-of-the-week code."\n712 );\n713 }\n714\n715 // find the date...\n716 final int baseDOW = base.getDayOfWeek();\n717 int adjust = -Math.abs(targetDOW - baseDOW);\n718 if (adjust >= 4) {\n719 adjust = 7 - adjust;\n720 }\n721 if (adjust <= -4) {\n722 adjust = 7 + adjust;')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-1 (continued)\nSerialDate.Java\n")])])]),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 361")]),e._v(" "),n("p",[e._v("723 }\n724 return SerialDate.addDays(adjust, base);\n725\n726 }\n727\n728 /**\n729 * Rolls the date forward to the last day of the month.\n730 *\n731 * @param base the base date.\n732 *\n733 * @return a new serial date.\n734 "),n("em",[e._v("/\n735 public SerialDate getEndOfCurrentMonth(final SerialDate base) {\n736 final int last = SerialDate.lastDayOfMonth(\n737 base.getMonth(), base.getYYYY()\n738 );\n739 return SerialDate.createInstance(last, base.getMonth(), base.getYYYY());\n740 }\n741\n742 /")]),e._v("*\n743 * Returns a string corresponding to the week-in-the-month code.\n744 * "),n("P",[e._v("\n745 * Need to find a better approach.\n746 *\n747 * @param count an integer code representing the week-in-the-month.\n748 *\n749 * @return a string corresponding to the week-in-the-month code.\n750 "),n("em",[e._v('/\n751 public static String weekInMonthToString(final int count) {\n752\n753 switch (count) {\n754 case SerialDate.FIRST_WEEK_IN_MONTH : return "First";\n755 case SerialDate.SECOND_WEEK_IN_MONTH : return "Second";\n756 case SerialDate.THIRD_WEEK_IN_MONTH : return "Third";\n757 case SerialDate.FOURTH_WEEK_IN_MONTH : return "Fourth";\n758 case SerialDate.LAST_WEEK_IN_MONTH : return "Last";\n759 default :\n760 return "SerialDate.weekInMonthToString(): invalid code.";\n761 }\n762\n763 }\n764\n765 /')]),e._v("*\n766 * Returns a string representing the supplied 'relative'.\n767 * "),n("P",[e._v('\n768 * Need to find a better approach.\n769 *\n770 * @param relative a constant representing the \'relative\'.\n771 *\n772 * @return a string representing the supplied \'relative\'.\n773 */\n774 public static String relativeToString(final int relative) {\n775\n776 switch (relative) {\n777 case SerialDate.PRECEDING : return "Preceding";\n778 case SerialDate.NEAREST : return "Nearest";\n779 case SerialDate.FOLLOWING : return "Following";\n780 default : return "ERROR : Relative To String";\n781 }\n782\n783 }\n784')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-1 (continued)\nSerialDate.Java\n")])])]),n("p",[e._v("362 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[e._v("785 /**\n786 * Factory method that returns an instance of some concrete subclass of\n787 * {@link SerialDate}.\n788 *\n789 * @param day the day (1-31).\n790 * @param month the month (1-12).\n791 * @param yyyy the year (in the range 1900 to 9999).\n792 *\n793 * @return An instance of {@link SerialDate}.\n794 "),n("em",[e._v("/\n795 public static SerialDate createInstance(final int day, final int month,\n796 final int yyyy) {\n797 return new SpreadsheetDate(day, month, yyyy);\n798 }\n799\n800 /")]),e._v("*\n801 * Factory method that returns an instance of some concrete subclass of\n802 * {@link SerialDate}.\n803 *\n804 * @param serial the serial number for the day (1 January 1900 = 2).\n805 *\n806 * @return a instance of SerialDate.\n807 "),n("em",[e._v("/\n808 public static SerialDate createInstance(final int serial) {\n809 return new SpreadsheetDate(serial);\n810 }\n811\n812 /")]),e._v("*\n813 * Factory method that returns an instance of a subclass of SerialDate.\n814 *\n815 * @param date A Java date object.\n816 *\n817 * @return a instance of SerialDate.\n818 "),n("em",[e._v("/\n819 public static SerialDate createInstance(final java.util.Date date) {\n820\n821 final GregorianCalendar calendar = new GregorianCalendar();\n822 calendar.setTime(date);\n823 return new SpreadsheetDate(calendar.get(Calendar.DATE),\n824 calendar.get(Calendar.MONTH) + 1,\n825 calendar.get(Calendar.YEAR));\n826\n827 }\n828\n829 /")]),e._v("*\n830 * Returns the serial number for the date, where 1 January 1900 = 2 (this\n831 * corresponds, almost, to the numbering system used in Microsoft Excel for\n832 * Windows and Lotus 1-2-3).\n833 *\n834 * @return the serial number for the date.\n835 "),n("em",[e._v("/\n836 public abstract int toSerial();\n837\n838 /")]),e._v("*\n839 * Returns a java.util.Date. Since java.util.Date has more precision than\n840 * SerialDate, we need to define a convention for the 'time of day'.\n841 *\n842 * @return this as "),n("code",[e._v("java.util.Date")]),e._v(".\n843 "),n("em",[e._v("/\n844 public abstract java.util.Date toDate();\n845\n846 /")]),e._v("*")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-1 (continued)\nSerialDate.Java\n")])])]),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 363")]),e._v(" "),n("p",[e._v("847 * Returns a description of the date.\n848 *\n849 * @return a description of the date.\n850 "),n("em",[e._v("/\n851 public String getDescription() {\n852 return this.description;\n853 }\n854\n855 /")]),e._v("*\n856 * Sets the description for the date.\n857 *\n858 * @param description the new description for the date.\n859 "),n("em",[e._v("/\n860 public void setDescription(final String description) {\n861 this.description = description;\n862 }\n863\n864 /")]),e._v("*\n865 * Converts the date to a string.\n866 *\n867 * @return a string representation of the date.\n868 "),n("em",[e._v('/\n869 public String toString() {\n870 return getDayOfMonth() + "-" + SerialDate.monthCodeToString(getMonth())\n871 + "-" + getYYYY();\n872 }\n873\n874 /')]),e._v("*\n875 * Returns the year (assume a valid range of 1900 to 9999).\n876 *\n877 * @return the year.\n878 "),n("em",[e._v("/\n879 public abstract int getYYYY();\n880\n881 /")]),e._v("*\n882 * Returns the month (January = 1, February = 2, March = 3).\n883 *\n884 * @return the month of the year.\n885 "),n("em",[e._v("/\n886 public abstract int getMonth();\n887\n888 /")]),e._v("*\n889 * Returns the day of the month.\n890 *\n891 * @return the day of the month.\n892 "),n("em",[e._v("/\n893 public abstract int getDayOfMonth();\n894\n895 /")]),e._v("*\n896 * Returns the day of the week.\n897 *\n898 * @return the day of the week.\n899 "),n("em",[e._v("/\n900 public abstract int getDayOfWeek();\n901\n902 /")]),e._v("*\n903 * Returns the difference (in days) between this date and the specified\n904 * 'other' date.\n905 * "),n("P",[e._v("\n906 * The result is positive if this date is after the 'other' date and\n907 * negative if it is before the 'other' date.\n908 *")])],1),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-1 (continued)\nSerialDate.Java\n")])])]),n("p",[e._v("364 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[e._v("909 * @param other the date being compared to.\n910 *\n911 * @return the difference between this and the other date.\n912 "),n("em",[e._v("/\n913 public abstract int compare(SerialDate other);\n914\n915 /")]),e._v("*\n916 * Returns true if this SerialDate represents the same date as the\n917 * specified SerialDate.\n918 *\n919 * @param other the date being compared to.\n920 *\n921 * @return "),n("code",[e._v("true")]),e._v(" if this SerialDate represents the same date as\n922 * the specified SerialDate.\n923 "),n("em",[e._v("/\n924 public abstract boolean isOn(SerialDate other);\n925\n926 /")]),e._v("*\n927 * Returns true if this SerialDate represents an earlier date compared to\n928 * the specified SerialDate.\n929 *\n930 * @param other The date being compared to.\n931 *\n932 * @return "),n("code",[e._v("true")]),e._v(" if this SerialDate represents an earlier date\n933 * compared to the specified SerialDate.\n934 "),n("em",[e._v("/\n935 public abstract boolean isBefore(SerialDate other);\n936\n937 /")]),e._v("*\n938 * Returns true if this SerialDate represents the same date as the\n939 * specified SerialDate.\n940 *\n941 * @param other the date being compared to.\n942 *\n943 * @return "),n("code",[e._v("true"),n("code",[e._v(" if this SerialDate represents the same date\n944 * as the specified SerialDate.\n945 "),n("em",[e._v("/\n946 public abstract boolean isOnOrBefore(SerialDate other);\n947\n948 /")]),e._v("*\n949 * Returns true if this SerialDate represents the same date as the\n950 * specified SerialDate.\n951 *\n952 * @param other the date being compared to.\n953 *\n954 * @return "),n("code",[e._v("true")]),e._v(" if this SerialDate represents the same date\n955 * as the specified SerialDate.\n956 "),n("em",[e._v("/\n957 public abstract boolean isAfter(SerialDate other);\n958\n959 /")]),e._v("*\n960 * Returns true if this SerialDate represents the same date as the\n961 * specified SerialDate.\n962 *\n963 * @param other the date being compared to.\n964 *\n965 * @return "),n("code",[e._v("true")]),e._v(" if this SerialDate represents the same date\n966 * as the specified SerialDate.\n967 "),n("em",[e._v("/\n968 public abstract boolean isOnOrAfter(SerialDate other);\n969\n970 /")]),e._v("*\n971 * Returns "),n("code",[e._v("true")]),e._v(" if this {@link SerialDate} is within the")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-1 (continued)\nSerialDate.Java\n")])])]),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 365")]),e._v(" "),n("p",[e._v("972 * specified range (INCLUSIVE). The date order of d1 and d2 is not\n973 * important.\n974 *\n975 * @param d1 a boundary date for the range.\n976 * @param d2 the other boundary date for the range.\n977 *\n978 * @return A boolean.\n979 "),n("em",[e._v("/\n980 public abstract boolean isInRange(SerialDate d1, SerialDate d2);\n981\n982 /")]),e._v("*\n983 * Returns "),n("code",[e._v("true")]),e._v(" if this {@link SerialDate} is within the\n984 * specified range (caller specifies whether or not the end-points are\n985 * included). The date order of d1 and d2 is not important.\n986 *\n987 * @param d1 a boundary date for the range.\n988 * @param d2 the other boundary date for the range.\n989 * @param include a code that controls whether or not the start and end\n990 * dates are included in the range.\n991 *\n992 * @return A boolean.\n993 "),n("em",[e._v("/\n994 public abstract boolean isInRange(SerialDate d1, SerialDate d2,\n995 int include);\n996\n997 /")]),e._v("*\n998 * Returns the latest date that falls on the specified day-of-the-week and\n999 * is BEFORE this date.\n1000 *\n1001 * @param targetDOW a code for the target day-of-the-week.\n1002 *\n1003 * @return the latest date that falls on the specified day-of-the-week and\n1004 * is BEFORE this date.\n1005 "),n("em",[e._v("/\n1006 public SerialDate getPreviousDayOfWeek(final int targetDOW) {\n1007 return getPreviousDayOfWeek(targetDOW, this);\n1008 }\n1009\n1010 /")]),e._v("*\n1011 * Returns the earliest date that falls on the specified day-of-the-week\n1012 * and is AFTER this date.\n1013 *\n1014 * @param targetDOW a code for the target day-of-the-week.\n1015 *\n1016 * @return the earliest date that falls on the specified day-of-the-week\n1017 * and is AFTER this date.\n1018 "),n("em",[e._v("/\n1019 public SerialDate getFollowingDayOfWeek(final int targetDOW) {\n1020 return getFollowingDayOfWeek(targetDOW, this);\n1021 }\n1022\n1023 /")]),e._v("*\n1024 * Returns the nearest date that falls on the specified day-of-the-week.\n1025 *\n1026 * @param targetDOW a code for the target day-of-the-week.\n1027 *\n1028 * @return the nearest date that falls on the specified day-of-the-week.\n1029 */\n1030 public SerialDate getNearestDayOfWeek(final int targetDOW) {\n1031 return getNearestDayOfWeek(targetDOW, this);\n1032 }\n1033\n1034 }")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-1 (continued)\nSerialDate.Java\n")])])]),n("p",[e._v("366 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[n("strong",[e._v("Listing B-2\nSerialDateTest.java")]),e._v("\n1 /* ========================================================================\n2 * JCommon : a free general purpose class library for the Java(tm) platform\n3 * ========================================================================\n4 *\n5 * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.\n6 *\n7 * Project Info: "),n("a",{attrs:{href:"http://www.jfree.org/jcommon/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.jfree.org/jcommon/index.html"),n("OutboundLink")],1),e._v("\n8 *\n9 * This library is free software; you can redistribute it and/or modify it\n10 * under the terms of the GNU Lesser General Public License as published by\n11 * the Free Software Foundation; either version 2.1 of the License, or\n12 * (at your option) any later version.\n13 *\n14 * This library is distributed in the hope that it will be useful, but\n15 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n16 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public\n17 * License for more details.\n18 *\n19 * You should have received a copy of the GNU Lesser General Public\n20 * License along with this library; if not, write to the Free Software\n21 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n22 * USA.\n23 *\n24 * [Java is a trademark or registered trademark of Sun Microsystems, Inc.\n25 * in the United States and other countries.]\n26 *\n27 * --------------------\n28 * SerialDateTests.java\n29 * --------------------\n30 * (C) Copyright 2001-2005, by Object Refinery Limited.\n31 *\n32 * Original Author: David Gilbert (for Object Refinery Limited);\n33 * Contributor(s): -;\n34 *\n35 * $Id: SerialDateTests.java,v 1.6 2005/11/16 15:58:40 taqua Exp $\n36 *\n37 * Changes\n38 * -------\n39 * 15-Nov-2001 : Version 1 (DG);\n40 * 25-Jun-2002 : Removed unnecessary import (DG);\n41 * 24-Oct-2002 : Fixed errors reported by Checkstyle (DG);\n42 * 13-Mar-2003 : Added serialization test (DG);\n43 * 05-Jan-2005 : Added test for bug report 1096282 (DG);\n44 *\n45 */\n46\n47 package org.jfree.date.junit;\n48\n49 import java.io.ByteArrayInputStream;\n50 import java.io.ByteArrayOutputStream;\n51 import java.io.ObjectInput;\n52 import java.io.ObjectInputStream;\n53 import java.io.ObjectOutput;\n54 import java.io.ObjectOutputStream;\n55\n56 import junit.framework.Test;\n57 import junit.framework.TestCase;\n58 import junit.framework.TestSuite;\n59\n60 import org.jfree.date.MonthConstants;\n61 import org.jfree.date.SerialDate;\n62")]),e._v(" "),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 367")]),e._v(" "),n("p",[e._v("63 /**\n64 * Some JUnit tests for the {@link SerialDate} class.\n65 "),n("em",[e._v("/\n66 public class SerialDateTests extends TestCase {\n67\n68 /")]),e._v("* Date representing November 9. "),n("em",[e._v("/\n69 private SerialDate nov9Y2001;\n70\n71 /")]),e._v("*\n72 * Creates a new test case.\n73 *\n74 * @param name the name.\n75 "),n("em",[e._v("/\n76 public SerialDateTests(final String name) {\n77 super(name);\n78 }\n79\n80 /")]),e._v("*\n81 * Returns a test suite for the JUnit test runner.\n82 *\n83 * @return The test suite.\n84 "),n("em",[e._v("/\n85 public static Test suite() {\n86 return new TestSuite(SerialDateTests.class);\n87 }\n88\n89 /")]),e._v("*\n90 * Problem set up.\n91 "),n("em",[e._v("/\n92 protected void setUp() {\n93 this.nov9Y2001 = SerialDate.createInstance(9, MonthConstants.NOVEMBER, 2001);\n94 }\n95\n96 /")]),e._v("*\n97 * 9 Nov 2001 plus two months should be 9 Jan 2002.\n98 "),n("em",[e._v("/\n99 public void testAddMonthsTo9Nov2001() {\n100 final SerialDate jan9Y2002 = SerialDate.addMonths(2, this.nov9Y2001);\n101 final SerialDate answer = SerialDate.createInstance(9, 1, 2002);\n102 assertEquals(answer, jan9Y2002);\n103 }\n104\n105 /")]),e._v("*\n106 * A test case for a reported bug, now fixed.\n107 "),n("em",[e._v("/\n108 public void testAddMonthsTo5Oct2003() {\n109 final SerialDate d1 = SerialDate.createInstance(5, MonthConstants.OCTOBER, 2003);\n110 final SerialDate d2 = SerialDate.addMonths(2, d1);\n111 assertEquals(d2, SerialDate.createInstance(5, MonthConstants.DECEMBER, 2003));\n112 }\n113\n114 /")]),e._v("*\n115 * A test case for a reported bug, now fixed.\n116 "),n("em",[e._v("/\n117 public void testAddMonthsTo1Jan2003() {\n118 final SerialDate d1 = SerialDate.createInstance(1, MonthConstants.JANUARY, 2003);\n119 final SerialDate d2 = SerialDate.addMonths(0, d1);\n120 assertEquals(d2, d1);\n121 }\n122\n123 /")]),e._v("*\n124 * Monday preceding Friday 9 November 2001 should be 5 November.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-2 (continued)\nSerialDateTest.java\n")])])]),n("p",[e._v("368 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[e._v("125 "),n("em",[e._v("/\n126 public void testMondayPrecedingFriday9Nov2001() {\n127 SerialDate mondayBefore = SerialDate.getPreviousDayOfWeek(\n128 SerialDate.MONDAY, this.nov9Y2001\n129 );\n130 assertEquals(5, mondayBefore.getDayOfMonth());\n131 }\n132\n133 /")]),e._v("*\n134 * Monday following Friday 9 November 2001 should be 12 November.\n135 "),n("em",[e._v("/\n136 public void testMondayFollowingFriday9Nov2001() {\n137 SerialDate mondayAfter = SerialDate.getFollowingDayOfWeek(\n138 SerialDate.MONDAY, this.nov9Y2001\n139 );\n140 assertEquals(12, mondayAfter.getDayOfMonth());\n141 }\n142\n143 /")]),e._v("*\n144 * Monday nearest Friday 9 November 2001 should be 12 November.\n145 "),n("em",[e._v("/\n146 public void testMondayNearestFriday9Nov2001() {\n147 SerialDate mondayNearest = SerialDate.getNearestDayOfWeek(\n148 SerialDate.MONDAY, this.nov9Y2001\n149 );\n150 assertEquals(12, mondayNearest.getDayOfMonth());\n151 }\n152\n153 /")]),e._v("*\n154 * The Monday nearest to 22nd January 1970 falls on the 19th.\n155 "),n("em",[e._v("/\n156 public void testMondayNearest22Jan1970() {\n157 SerialDate jan22Y1970 = SerialDate.createInstance(22, MonthConstants.JANUARY, 1970);\n158 SerialDate mondayNearest=SerialDate.getNearestDayOfWeek(SerialDate.MONDAY, jan22Y1970);\n159 assertEquals(19, mondayNearest.getDayOfMonth());\n160 }\n161\n162 /")]),e._v("*\n163 * Problem that the conversion of days to strings returns the right result. Actually, this\n164 * result depends on the Locale so this test needs to be modified.\n165 "),n("em",[e._v('/\n166 public void testWeekdayCodeToString() {\n167\n168 final String test = SerialDate.weekdayCodeToString(SerialDate.SATURDAY);\n169 assertEquals("Saturday", test);\n170\n171 }\n172\n173 /')]),e._v('*\n174 * Test the conversion of a string to a weekday. Note that this test will fail if the\n175 * default locale doesn\'t use English weekday names...devise a better test!\n176 */\n177 public void testStringToWeekday() {\n178\n179 int weekday = SerialDate.stringToWeekdayCode("Wednesday");\n180 assertEquals(SerialDate.WEDNESDAY, weekday);\n181\n182 weekday = SerialDate.stringToWeekdayCode(" Wednesday ");\n183 assertEquals(SerialDate.WEDNESDAY, weekday);\n184')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-2 (continued)\nSerialDateTest.java\n")])])]),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 369")]),e._v(" "),n("p",[e._v('185 weekday = SerialDate.stringToWeekdayCode("Wed");\n186 assertEquals(SerialDate.WEDNESDAY, weekday);\n187\n188 }\n189\n190 /**\n191 * Test the conversion of a string to a month. Note that this test will fail if the\n192 * default locale doesn\'t use English month names...devise a better test!\n193 '),n("em",[e._v('/\n194 public void testStringToMonthCode() {\n195\n196 int m = SerialDate.stringToMonthCode("January");\n197 assertEquals(MonthConstants.JANUARY, m);\n198\n199 m = SerialDate.stringToMonthCode(" January ");\n200 assertEquals(MonthConstants.JANUARY, m);\n201\n202 m = SerialDate.stringToMonthCode("Jan");\n203 assertEquals(MonthConstants.JANUARY, m);\n204\n205 }\n206\n207 /')]),e._v("*\n208 * Tests the conversion of a month code to a string.\n209 "),n("em",[e._v('/\n210 public void testMonthCodeToStringCode() {\n211\n212 final String test = SerialDate.monthCodeToString(MonthConstants.DECEMBER);\n213 assertEquals("December", test);\n214\n215 }\n216\n217 /')]),e._v("*\n218 * 1900 is not a leap year.\n219 "),n("em",[e._v("/\n220 public void testIsNotLeapYear1900() {\n221 assertTrue(!SerialDate.isLeapYear(1900));\n222 }\n223\n224 /")]),e._v("*\n225 * 2000 is a leap year.\n226 "),n("em",[e._v("/\n227 public void testIsLeapYear2000() {\n228 assertTrue(SerialDate.isLeapYear(2000));\n229 }\n230\n231 /")]),e._v("*\n232 * The number of leap years from 1900 up-to-and-including 1899 is 0.\n233 "),n("em",[e._v("/\n234 public void testLeapYearCount1899() {\n235 assertEquals(SerialDate.leapYearCount(1899), 0);\n236 }\n237\n238 /")]),e._v("*\n239 * The number of leap years from 1900 up-to-and-including 1903 is 0.\n240 "),n("em",[e._v("/\n241 public void testLeapYearCount1903() {\n242 assertEquals(SerialDate.leapYearCount(1903), 0);\n243 }\n244\n245 /")]),e._v("*\n246 * The number of leap years from 1900 up-to-and-including 1904 is 1.\n247 */")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-2 (continued)\nSerialDateTest.java\n")])])]),n("p",[e._v("370 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[e._v("248 public void testLeapYearCount1904() {\n249 assertEquals(SerialDate.leapYearCount(1904), 1);\n250 }\n251\n252 /**\n253 * The number of leap years from 1900 up-to-and-including 1999 is 24.\n254 "),n("em",[e._v("/\n255 public void testLeapYearCount1999() {\n256 assertEquals(SerialDate.leapYearCount(1999), 24);\n257 }\n258\n259 /")]),e._v("*\n260 * The number of leap years from 1900 up-to-and-including 2000 is 25.\n261 "),n("em",[e._v("/\n262 public void testLeapYearCount2000() {\n263 assertEquals(SerialDate.leapYearCount(2000), 25);\n264 }\n265\n266 /")]),e._v("*\n267 * Serialize an instance, restore it, and check for equality.\n268 "),n("em",[e._v("/\n269 public void testSerialization() {\n270\n271 SerialDate d1 = SerialDate.createInstance(15, 4, 2000);\n272 SerialDate d2 = null;\n273\n274 try {\n275 ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n276 ObjectOutput out = new ObjectOutputStream(buffer);\n277 out.writeObject(d1);\n278 out.close();\n279\n280 ObjectInput in = new ObjectInputStream(\nnew ByteArrayInputStream(buffer.toByteArray()));\n281 d2 = (SerialDate) in.readObject();\n282 in.close();\n283 }\n284 catch (Exception e) {\n285 System.out.println(e.toString());\n286 }\n287 assertEquals(d1, d2);\n288\n289 }\n290\n291 /")]),e._v("*\n292 * A test for bug report 1096282 (now fixed).\n293 "),n("em",[e._v("/\n294 public void test1096282() {\n295 SerialDate d = SerialDate.createInstance(29, 2, 2004);\n296 d = SerialDate.addYears(1, d);\n297 SerialDate expected = SerialDate.createInstance(28, 2, 2005);\n298 assertTrue(d.isOn(expected));\n299 }\n300\n301 /")]),e._v("*\n302 * Miscellaneous tests for the addMonths() method.\n303 */\n304 public void testAddMonths() {\n305 SerialDate d1 = SerialDate.createInstance(31, 5, 2004);\n306")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-2 (continued)\nSerialDateTest.java\n")])])]),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 371")]),e._v(" "),n("p",[e._v("307 SerialDate d2 = SerialDate.addMonths(1, d1);\n308 assertEquals(30, d2.getDayOfMonth());\n309 assertEquals(6, d2.getMonth());\n310 assertEquals(2004, d2.getYYYY());\n311\n312 SerialDate d3 = SerialDate.addMonths(2, d1);\n313 assertEquals(31, d3.getDayOfMonth());\n314 assertEquals(7, d3.getMonth());\n315 assertEquals(2004, d3.getYYYY());\n316\n317 SerialDate d4 = SerialDate.addMonths(1, SerialDate.addMonths(1, d1));\n318 assertEquals(30, d4.getDayOfMonth());\n319 assertEquals(7, d4.getMonth());\n320 assertEquals(2004, d4.getYYYY());\n321 }\n322 }")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-2 (continued)\nSerialDateTest.java\n")])])]),n("p",[e._v("372 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[n("strong",[e._v("Listing B-3\nMonthConstants.java")]),e._v("\n1 /* ========================================================================\n2 * JCommon : a free general purpose class library for the Java(tm) platform\n3 * ========================================================================\n4 *\n5 * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.\n6 *\n7 * Project Info: "),n("a",{attrs:{href:"http://www.jfree.org/jcommon/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.jfree.org/jcommon/index.html"),n("OutboundLink")],1),e._v("\n8 *\n9 * This library is free software; you can redistribute it and/or modify it\n10 * under the terms of the GNU Lesser General Public License as published by\n11 * the Free Software Foundation; either version 2.1 of the License, or\n12 * (at your option) any later version.\n13 *\n14 * This library is distributed in the hope that it will be useful, but\n15 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n16 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public\n17 * License for more details.\n18 *\n19 * You should have received a copy of the GNU Lesser General Public\n20 * License along with this library; if not, write to the Free Software\n21 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n22 * USA.\n23 *\n24 * [Java is a trademark or registered trademark of Sun Microsystems, Inc.\n25 * in the United States and other countries.]\n26 *\n27 * -------------------\n28 * MonthConstants.java\n29 * -------------------\n30 * (C) Copyright 2002, 2003, by Object Refinery Limited.\n31 *\n32 * Original Author: David Gilbert (for Object Refinery Limited);\n33 * Contributor(s): -;\n34 *\n35 * $Id: MonthConstants.java,v 1.4 2005/11/16 15:58:40 taqua Exp $\n36 *\n37 * Changes\n38 * -------\n39 * 29-May-2002 : Version 1 (code moved from SerialDate class) (DG);\n40 *\n41 "),n("em",[e._v("/\n42\n43 package org.jfree.date;\n44\n45 /")]),e._v("*\n46 * Useful constants for months. Note that these are NOT equivalent to the\n47 * constants defined by java.util.Calendar (where JANUARY=0 and DECEMBER=11).\n48 * "),n("P",[e._v("\n49 * Used by the SerialDate and RegularTimePeriod classes.\n50 *\n51 * @author David Gilbert\n52 "),n("em",[e._v("/\n53 public interface MonthConstants {\n54\n55 /")]),e._v("* Constant for January. "),n("em",[e._v("/\n56 public static final int JANUARY = 1;\n57\n58 /")]),e._v("* Constant for February. */\n59 public static final int FEBRUARY = 2;\n60")])],1),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 373")]),e._v(" "),n("p",[e._v("61 /** Constant for March. "),n("em",[e._v("/\n62 public static final int MARCH = 3;\n63\n64 /")]),e._v("* Constant for April. "),n("em",[e._v("/\n65 public static final int APRIL = 4;\n66\n67 /")]),e._v("* Constant for May. "),n("em",[e._v("/\n68 public static final int MAY = 5;\n69\n70 /")]),e._v("* Constant for June. "),n("em",[e._v("/\n71 public static final int JUNE = 6;\n72\n73 /")]),e._v("* Constant for July. "),n("em",[e._v("/\n74 public static final int JULY = 7;\n75\n76 /")]),e._v("* Constant for August. "),n("em",[e._v("/\n77 public static final int AUGUST = 8;\n78\n79 /")]),e._v("* Constant for September. "),n("em",[e._v("/\n80 public static final int SEPTEMBER = 9;\n81\n82 /")]),e._v("* Constant for October. "),n("em",[e._v("/\n83 public static final int OCTOBER = 10;\n84\n85 /")]),e._v("* Constant for November. "),n("em",[e._v("/\n86 public static final int NOVEMBER = 11;\n87\n88 /")]),e._v("* Constant for December. */\n89 public static final int DECEMBER = 12;\n90\n91 }")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-3 (continued)\nMonthConstants.java\n")])])]),n("p",[e._v("374 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[n("strong",[e._v("Listing B-4\nBobsSerialDateTest.java")]),e._v("\n1 package org.jfree.date.junit;\n2\n3 import junit.framework.TestCase;\n4 import org.jfree.date."),n("em",[e._v(";\n5 import static org.jfree.date.SerialDate.")]),e._v(';\n6\n7 import java.util.*;\n8\n9 public class BobsSerialDateTest extends TestCase {\n10\n11 public void testIsValidWeekdayCode() throws Exception {\n12 for (int day = 1; day <= 7; day++)\n13 assertTrue(isValidWeekdayCode(day));\n14 assertFalse(isValidWeekdayCode(0));\n15 assertFalse(isValidWeekdayCode(8));\n16 }\n17\n18 public void testStringToWeekdayCode() throws Exception {\n19\n20 assertEquals(-1, stringToWeekdayCode("Hello"));\n21 assertEquals(MONDAY, stringToWeekdayCode("Monday"));\n22 assertEquals(MONDAY, stringToWeekdayCode("Mon"));\n23 //todo assertEquals(MONDAY,stringToWeekdayCode("monday"));\n24 // assertEquals(MONDAY,stringToWeekdayCode("MONDAY"));\n25 // assertEquals(MONDAY, stringToWeekdayCode("mon"));\n26\n27 assertEquals(TUESDAY, stringToWeekdayCode("Tuesday"));\n28 assertEquals(TUESDAY, stringToWeekdayCode("Tue"));\n29 // assertEquals(TUESDAY,stringToWeekdayCode("tuesday"));\n30 // assertEquals(TUESDAY,stringToWeekdayCode("TUESDAY"));\n31 // assertEquals(TUESDAY, stringToWeekdayCode("tue"));\n32 // assertEquals(TUESDAY, stringToWeekdayCode("tues"));\n33\n34 assertEquals(WEDNESDAY, stringToWeekdayCode("Wednesday"));\n35 assertEquals(WEDNESDAY, stringToWeekdayCode("Wed"));\n36 // assertEquals(WEDNESDAY,stringToWeekdayCode("wednesday"));\n37 // assertEquals(WEDNESDAY,stringToWeekdayCode("WEDNESDAY"));\n38 // assertEquals(WEDNESDAY, stringToWeekdayCode("wed"));\n39\n40 assertEquals(THURSDAY, stringToWeekdayCode("Thursday"));\n41 assertEquals(THURSDAY, stringToWeekdayCode("Thu"));\n42 // assertEquals(THURSDAY,stringToWeekdayCode("thursday"));\n43 // assertEquals(THURSDAY,stringToWeekdayCode("THURSDAY"));\n44 // assertEquals(THURSDAY, stringToWeekdayCode("thu"));\n45 // assertEquals(THURSDAY, stringToWeekdayCode("thurs"));\n46\n47 assertEquals(FRIDAY, stringToWeekdayCode("Friday"));\n48 assertEquals(FRIDAY, stringToWeekdayCode("Fri"));\n49 // assertEquals(FRIDAY,stringToWeekdayCode("friday"));\n50 // assertEquals(FRIDAY,stringToWeekdayCode("FRIDAY"));\n51 // assertEquals(FRIDAY, stringToWeekdayCode("fri"));\n52\n53 assertEquals(SATURDAY, stringToWeekdayCode("Saturday"));\n54 assertEquals(SATURDAY, stringToWeekdayCode("Sat"));\n55 // assertEquals(SATURDAY,stringToWeekdayCode("saturday"));\n56 // assertEquals(SATURDAY,stringToWeekdayCode("SATURDAY"));\n57 // assertEquals(SATURDAY, stringToWeekdayCode("sat"));\n58\n59 assertEquals(SUNDAY, stringToWeekdayCode("Sunday"));\n60 assertEquals(SUNDAY, stringToWeekdayCode("Sun"));\n61 // assertEquals(SUNDAY,stringToWeekdayCode("sunday"));\n62 // assertEquals(SUNDAY,stringToWeekdayCode("SUNDAY"));\n63 // assertEquals(SUNDAY, stringToWeekdayCode("sun"));\n64 }\n65')]),e._v(" "),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 375")]),e._v(" "),n("p",[e._v('66 public void testWeekdayCodeToString() throws Exception {\n67 assertEquals("Sunday", weekdayCodeToString(SUNDAY));\n68 assertEquals("Monday", weekdayCodeToString(MONDAY));\n69 assertEquals("Tuesday", weekdayCodeToString(TUESDAY));\n70 assertEquals("Wednesday", weekdayCodeToString(WEDNESDAY));\n71 assertEquals("Thursday", weekdayCodeToString(THURSDAY));\n72 assertEquals("Friday", weekdayCodeToString(FRIDAY));\n73 assertEquals("Saturday", weekdayCodeToString(SATURDAY));\n74 }\n75\n76 public void testIsValidMonthCode() throws Exception {\n77 for (int i = 1; i <= 12; i++)\n78 assertTrue(isValidMonthCode(i));\n79 assertFalse(isValidMonthCode(0));\n80 assertFalse(isValidMonthCode(13));\n81 }\n82\n83 public void testMonthToQuarter() throws Exception {\n84 assertEquals(1, monthCodeToQuarter(JANUARY));\n85 assertEquals(1, monthCodeToQuarter(FEBRUARY));\n86 assertEquals(1, monthCodeToQuarter(MARCH));\n87 assertEquals(2, monthCodeToQuarter(APRIL));\n88 assertEquals(2, monthCodeToQuarter(MAY));\n89 assertEquals(2, monthCodeToQuarter(JUNE));\n90 assertEquals(3, monthCodeToQuarter(JULY));\n91 assertEquals(3, monthCodeToQuarter(AUGUST));\n92 assertEquals(3, monthCodeToQuarter(SEPTEMBER));\n93 assertEquals(4, monthCodeToQuarter(OCTOBER));\n94 assertEquals(4, monthCodeToQuarter(NOVEMBER));\n95 assertEquals(4, monthCodeToQuarter(DECEMBER));\n96\n97 try {\n98 monthCodeToQuarter(-1);\n99 fail("Invalid Month Code should throw exception");\n100 } catch (IllegalArgumentException e) {\n101 }\n102 }\n103\n104 public void testMonthCodeToString() throws Exception {\n105 assertEquals("January", monthCodeToString(JANUARY));\n106 assertEquals("February", monthCodeToString(FEBRUARY));\n107 assertEquals("March", monthCodeToString(MARCH));\n108 assertEquals("April", monthCodeToString(APRIL));\n109 assertEquals("May", monthCodeToString(MAY));\n110 assertEquals("June", monthCodeToString(JUNE));\n111 assertEquals("July", monthCodeToString(JULY));\n112 assertEquals("August", monthCodeToString(AUGUST));\n113 assertEquals("September", monthCodeToString(SEPTEMBER));\n114 assertEquals("October", monthCodeToString(OCTOBER));\n115 assertEquals("November", monthCodeToString(NOVEMBER));\n116 assertEquals("December", monthCodeToString(DECEMBER));\n117\n118 assertEquals("Jan", monthCodeToString(JANUARY, true));\n119 assertEquals("Feb", monthCodeToString(FEBRUARY, true));\n120 assertEquals("Mar", monthCodeToString(MARCH, true));\n121 assertEquals("Apr", monthCodeToString(APRIL, true));\n122 assertEquals("May", monthCodeToString(MAY, true));\n123 assertEquals("Jun", monthCodeToString(JUNE, true));\n124 assertEquals("Jul", monthCodeToString(JULY, true));\n125 assertEquals("Aug", monthCodeToString(AUGUST, true));\n126 assertEquals("Sep", monthCodeToString(SEPTEMBER, true));\n127 assertEquals("Oct", monthCodeToString(OCTOBER, true));')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-4 (continued)\nBobsSerialDateTest.java\n")])])]),n("p",[e._v("376 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[e._v('128 assertEquals("Nov", monthCodeToString(NOVEMBER, true));\n129 assertEquals("Dec", monthCodeToString(DECEMBER, true));\n130\n131 try {\n132 monthCodeToString(-1);\n133 fail("Invalid month code should throw exception");\n134 } catch (IllegalArgumentException e) {\n135 }\n136\n137 }\n138\n139 public void testStringToMonthCode() throws Exception {\n140 assertEquals(JANUARY,stringToMonthCode("1"));\n141 assertEquals(FEBRUARY,stringToMonthCode("2"));\n142 assertEquals(MARCH,stringToMonthCode("3"));\n143 assertEquals(APRIL,stringToMonthCode("4"));\n144 assertEquals(MAY,stringToMonthCode("5"));\n145 assertEquals(JUNE,stringToMonthCode("6"));\n146 assertEquals(JULY,stringToMonthCode("7"));\n147 assertEquals(AUGUST,stringToMonthCode("8"));\n148 assertEquals(SEPTEMBER,stringToMonthCode("9"));\n149 assertEquals(OCTOBER,stringToMonthCode("10"));\n150 assertEquals(NOVEMBER, stringToMonthCode("11"));\n151 assertEquals(DECEMBER,stringToMonthCode("12"));\n152\n153 //todo assertEquals(-1, stringToMonthCode("0"));\n154 // assertEquals(-1, stringToMonthCode("13"));\n155\n156 assertEquals(-1,stringToMonthCode("Hello"));\n157\n158 for (int m = 1; m <= 12; m++) {\n159 assertEquals(m, stringToMonthCode(monthCodeToString(m, false)));\n160 assertEquals(m, stringToMonthCode(monthCodeToString(m, true)));\n161 }\n162\n163 // assertEquals(1,stringToMonthCode("jan"));\n164 // assertEquals(2,stringToMonthCode("feb"));\n165 // assertEquals(3,stringToMonthCode("mar"));\n166 // assertEquals(4,stringToMonthCode("apr"));\n167 // assertEquals(5,stringToMonthCode("may"));\n168 // assertEquals(6,stringToMonthCode("jun"));\n169 // assertEquals(7,stringToMonthCode("jul"));\n170 // assertEquals(8,stringToMonthCode("aug"));\n171 // assertEquals(9,stringToMonthCode("sep"));\n172 // assertEquals(10,stringToMonthCode("oct"));\n173 // assertEquals(11,stringToMonthCode("nov"));\n174 // assertEquals(12,stringToMonthCode("dec"));\n175\n176 // assertEquals(1,stringToMonthCode("JAN"));\n177 // assertEquals(2,stringToMonthCode("FEB"));\n178 // assertEquals(3,stringToMonthCode("MAR"));\n179 // assertEquals(4,stringToMonthCode("APR"));\n180 // assertEquals(5,stringToMonthCode("MAY"));\n181 // assertEquals(6,stringToMonthCode("JUN"));\n182 // assertEquals(7,stringToMonthCode("JUL"));\n183 // assertEquals(8,stringToMonthCode("AUG"));\n184 // assertEquals(9,stringToMonthCode("SEP"));\n185 // assertEquals(10,stringToMonthCode("OCT"));\n186 // assertEquals(11,stringToMonthCode("NOV"));\n187 // assertEquals(12,stringToMonthCode("DEC"));\n188\n189 // assertEquals(1,stringToMonthCode("january"));\n190 // assertEquals(2,stringToMonthCode("february"));')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-4 (continued)\nBobsSerialDateTest.java\n")])])]),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 377")]),e._v(" "),n("p",[e._v('191 // assertEquals(3,stringToMonthCode("march"));\n192 // assertEquals(4,stringToMonthCode("april"));\n193 // assertEquals(5,stringToMonthCode("may"));\n194 // assertEquals(6,stringToMonthCode("june"));\n195 // assertEquals(7,stringToMonthCode("july"));\n196 // assertEquals(8,stringToMonthCode("august"));\n197 // assertEquals(9,stringToMonthCode("september"));\n198 // assertEquals(10,stringToMonthCode("october"));\n199 // assertEquals(11,stringToMonthCode("november"));\n200 // assertEquals(12,stringToMonthCode("december"));\n201\n202 // assertEquals(1,stringToMonthCode("JANUARY"));\n203 // assertEquals(2,stringToMonthCode("FEBRUARY"));\n204 // assertEquals(3,stringToMonthCode("MAR"));\n205 // assertEquals(4,stringToMonthCode("APRIL"));\n206 // assertEquals(5,stringToMonthCode("MAY"));\n207 // assertEquals(6,stringToMonthCode("JUNE"));\n208 // assertEquals(7,stringToMonthCode("JULY"));\n209 // assertEquals(8,stringToMonthCode("AUGUST"));\n210 // assertEquals(9,stringToMonthCode("SEPTEMBER"));\n211 // assertEquals(10,stringToMonthCode("OCTOBER"));\n212 // assertEquals(11,stringToMonthCode("NOVEMBER"));\n213 // assertEquals(12,stringToMonthCode("DECEMBER"));\n214 }\n215\n216 public void testIsValidWeekInMonthCode() throws Exception {\n217 for (int w = 0; w <= 4; w++) {\n218 assertTrue(isValidWeekInMonthCode(w));\n219 }\n220 assertFalse(isValidWeekInMonthCode(5));\n221 }\n222\n223 public void testIsLeapYear() throws Exception {\n224 assertFalse(isLeapYear(1900));\n225 assertFalse(isLeapYear(1901));\n226 assertFalse(isLeapYear(1902));\n227 assertFalse(isLeapYear(1903));\n228 assertTrue(isLeapYear(1904));\n229 assertTrue(isLeapYear(1908));\n230 assertFalse(isLeapYear(1955));\n231 assertTrue(isLeapYear(1964));\n232 assertTrue(isLeapYear(1980));\n233 assertTrue(isLeapYear(2000));\n234 assertFalse(isLeapYear(2001));\n235 assertFalse(isLeapYear(2100));\n236 }\n237\n238 public void testLeapYearCount() throws Exception {\n239 assertEquals(0, leapYearCount(1900));\n240 assertEquals(0, leapYearCount(1901));\n241 assertEquals(0, leapYearCount(1902));\n242 assertEquals(0, leapYearCount(1903));\n243 assertEquals(1, leapYearCount(1904));\n244 assertEquals(1, leapYearCount(1905));\n245 assertEquals(1, leapYearCount(1906));\n246 assertEquals(1, leapYearCount(1907));\n247 assertEquals(2, leapYearCount(1908));\n248 assertEquals(24, leapYearCount(1999));\n249 assertEquals(25, leapYearCount(2001));\n250 assertEquals(49, leapYearCount(2101));\n251 assertEquals(73, leapYearCount(2201));')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-4 (continued)\nBobsSerialDateTest.java\n")])])]),n("p",[e._v("378 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[e._v('252 assertEquals(97, leapYearCount(2301));\n253 assertEquals(122, leapYearCount(2401));\n254 }\n255\n256 public void testLastDayOfMonth() throws Exception {\n257 assertEquals(31, lastDayOfMonth(JANUARY, 1901));\n258 assertEquals(28, lastDayOfMonth(FEBRUARY, 1901));\n259 assertEquals(31, lastDayOfMonth(MARCH, 1901));\n260 assertEquals(30, lastDayOfMonth(APRIL, 1901));\n261 assertEquals(31, lastDayOfMonth(MAY, 1901));\n262 assertEquals(30, lastDayOfMonth(JUNE, 1901));\n263 assertEquals(31, lastDayOfMonth(JULY, 1901));\n264 assertEquals(31, lastDayOfMonth(AUGUST, 1901));\n265 assertEquals(30, lastDayOfMonth(SEPTEMBER, 1901));\n266 assertEquals(31, lastDayOfMonth(OCTOBER, 1901));\n267 assertEquals(30, lastDayOfMonth(NOVEMBER, 1901));\n268 assertEquals(31, lastDayOfMonth(DECEMBER, 1901));\n269 assertEquals(29, lastDayOfMonth(FEBRUARY, 1904));\n270 }\n271\n272 public void testAddDays() throws Exception {\n273 SerialDate newYears = d(1, JANUARY, 1900);\n274 assertEquals(d(2, JANUARY, 1900), addDays(1, newYears));\n275 assertEquals(d(1, FEBRUARY, 1900), addDays(31, newYears));\n276 assertEquals(d(1, JANUARY, 1901), addDays(365, newYears));\n277 assertEquals(d(31, DECEMBER, 1904), addDays(5 * 365, newYears));\n278 }\n279\n280 private static SpreadsheetDate d(int day, int month, int year) {return new\nSpreadsheetDate(day, month, year);}\n281\n282 public void testAddMonths() throws Exception {\n283 assertEquals(d(1, FEBRUARY, 1900), addMonths(1, d(1, JANUARY, 1900)));\n284 assertEquals(d(28, FEBRUARY, 1900), addMonths(1, d(31, JANUARY, 1900)));\n285 assertEquals(d(28, FEBRUARY, 1900), addMonths(1, d(30, JANUARY, 1900)));\n286 assertEquals(d(28, FEBRUARY, 1900), addMonths(1, d(29, JANUARY, 1900)));\n287 assertEquals(d(28, FEBRUARY, 1900), addMonths(1, d(28, JANUARY, 1900)));\n288 assertEquals(d(27, FEBRUARY, 1900), addMonths(1, d(27, JANUARY, 1900)));\n289\n290 assertEquals(d(30, JUNE, 1900), addMonths(5, d(31, JANUARY, 1900)));\n291 assertEquals(d(30, JUNE, 1901), addMonths(17, d(31, JANUARY, 1900)));\n292\n293 assertEquals(d(29, FEBRUARY, 1904), addMonths(49, d(31, JANUARY, 1900)));\n294\n295 }\n296\n297 public void testAddYears() throws Exception {\n298 assertEquals(d(1, JANUARY, 1901), addYears(1, d(1, JANUARY, 1900)));\n299 assertEquals(d(28, FEBRUARY, 1905), addYears(1, d(29, FEBRUARY, 1904)));\n300 assertEquals(d(28, FEBRUARY, 1905), addYears(1, d(28, FEBRUARY, 1904)));\n301 assertEquals(d(28, FEBRUARY, 1904), addYears(1, d(28, FEBRUARY, 1903)));\n302 }\n303\n304 public void testGetPreviousDayOfWeek() throws Exception {\n305 assertEquals(d(24, FEBRUARY, 2006), getPreviousDayOfWeek(FRIDAY, d(1, MARCH, 2006)));\n306 assertEquals(d(22, FEBRUARY, 2006), getPreviousDayOfWeek(WEDNESDAY, d(1, MARCH, 2006)));\n307 assertEquals(d(29, FEBRUARY, 2004), getPreviousDayOfWeek(SUNDAY, d(3, MARCH, 2004)));\n308 assertEquals(d(29, DECEMBER, 2004), getPreviousDayOfWeek(WEDNESDAY, d(5, JANUARY, 2005)));\n309\n310 try {\n311 getPreviousDayOfWeek(-1, d(1, JANUARY, 2006));\n312 fail("Invalid day of week code should throw exception");')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-4 (continued)\nBobsSerialDateTest.java\n")])])]),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 379")]),e._v(" "),n("p",[e._v('313 } catch (IllegalArgumentException e) {\n314 }\n315 }\n316\n317 public void testGetFollowingDayOfWeek() throws Exception {\n318 // assertEquals(d(1, JANUARY, 2005),getFollowingDayOfWeek(SATURDAY, d(25, DECEMBER, 2004)));\n319 assertEquals(d(1, JANUARY, 2005), getFollowingDayOfWeek(SATURDAY, d(26, DECEMBER, 2004)));\n320 assertEquals(d(3, MARCH, 2004), getFollowingDayOfWeek(WEDNESDAY, d(28, FEBRUARY, 2004)));\n321\n322 try {\n323 getFollowingDayOfWeek(-1, d(1, JANUARY, 2006));\n324 fail("Invalid day of week code should throw exception");\n325 } catch (IllegalArgumentException e) {\n326 }\n327 }\n328\n329 public void testGetNearestDayOfWeek() throws Exception {\n330 assertEquals(d(16, APRIL, 2006), getNearestDayOfWeek(SUNDAY, d(16, APRIL, 2006)));\n331 assertEquals(d(16, APRIL, 2006), getNearestDayOfWeek(SUNDAY, d(17, APRIL, 2006)));\n332 assertEquals(d(16, APRIL, 2006), getNearestDayOfWeek(SUNDAY, d(18, APRIL, 2006)));\n333 assertEquals(d(16, APRIL, 2006), getNearestDayOfWeek(SUNDAY, d(19, APRIL, 2006)));\n334 assertEquals(d(23, APRIL, 2006), getNearestDayOfWeek(SUNDAY, d(20, APRIL, 2006)));\n335 assertEquals(d(23, APRIL, 2006), getNearestDayOfWeek(SUNDAY, d(21, APRIL, 2006)));\n336 assertEquals(d(23, APRIL, 2006), getNearestDayOfWeek(SUNDAY, d(22, APRIL, 2006)));\n337\n338 //todo assertEquals(d(17, APRIL, 2006), getNearestDayOfWeek(MONDAY, d(16, APRIL, 2006)));\n339 assertEquals(d(17, APRIL, 2006), getNearestDayOfWeek(MONDAY, d(17, APRIL, 2006)));\n340 assertEquals(d(17, APRIL, 2006), getNearestDayOfWeek(MONDAY, d(18, APRIL, 2006)));\n341 assertEquals(d(17, APRIL, 2006), getNearestDayOfWeek(MONDAY, d(19, APRIL, 2006)));\n342 assertEquals(d(17, APRIL, 2006), getNearestDayOfWeek(MONDAY, d(20, APRIL, 2006)));\n343 assertEquals(d(24, APRIL, 2006), getNearestDayOfWeek(MONDAY, d(21, APRIL, 2006)));\n344 assertEquals(d(24, APRIL, 2006), getNearestDayOfWeek(MONDAY, d(22, APRIL, 2006)));\n345\n346 // assertEquals(d(18, APRIL, 2006), getNearestDayOfWeek(TUESDAY, d(16, APRIL, 2006)));\n347 // assertEquals(d(18, APRIL, 2006), getNearestDayOfWeek(TUESDAY, d(17, APRIL, 2006)));\n348 assertEquals(d(18, APRIL, 2006), getNearestDayOfWeek(TUESDAY, d(18, APRIL, 2006)));\n349 assertEquals(d(18, APRIL, 2006), getNearestDayOfWeek(TUESDAY, d(19, APRIL, 2006)));\n350 assertEquals(d(18, APRIL, 2006), getNearestDayOfWeek(TUESDAY, d(20, APRIL, 2006)));\n351 assertEquals(d(18, APRIL, 2006), getNearestDayOfWeek(TUESDAY, d(21, APRIL, 2006)));\n352 assertEquals(d(25, APRIL, 2006), getNearestDayOfWeek(TUESDAY, d(22, APRIL, 2006)));\n353\n354 // assertEquals(d(19, APRIL, 2006), getNearestDayOfWeek(WEDNESDAY, d(16, APRIL, 2006)));\n355 // assertEquals(d(19, APRIL, 2006), getNearestDayOfWeek(WEDNESDAY, d(17, APRIL, 2006)));\n356 // assertEquals(d(19, APRIL, 2006), getNearestDayOfWeek(WEDNESDAY, d(18, APRIL, 2006)));\n357 assertEquals(d(19, APRIL, 2006), getNearestDayOfWeek(WEDNESDAY, d(19, APRIL, 2006)));\n358 assertEquals(d(19, APRIL, 2006), getNearestDayOfWeek(WEDNESDAY, d(20, APRIL, 2006)));\n359 assertEquals(d(19, APRIL, 2006), getNearestDayOfWeek(WEDNESDAY, d(21, APRIL, 2006)));\n360 assertEquals(d(19, APRIL, 2006), getNearestDayOfWeek(WEDNESDAY, d(22, APRIL, 2006)));\n361\n362 // assertEquals(d(13, APRIL, 2006), getNearestDayOfWeek(THURSDAY, d(16, APRIL, 2006)));\n363 // assertEquals(d(20, APRIL, 2006), getNearestDayOfWeek(THURSDAY, d(17, APRIL, 2006)));\n364 // assertEquals(d(20, APRIL, 2006), getNearestDayOfWeek(THURSDAY, d(18, APRIL, 2006)));\n365 // assertEquals(d(20, APRIL, 2006), getNearestDayOfWeek(THURSDAY, d(19, APRIL, 2006)));\n366 assertEquals(d(20, APRIL, 2006), getNearestDayOfWeek(THURSDAY, d(20, APRIL, 2006)));\n367 assertEquals(d(20, APRIL, 2006), getNearestDayOfWeek(THURSDAY, d(21, APRIL, 2006)));\n368 assertEquals(d(20, APRIL, 2006), getNearestDayOfWeek(THURSDAY, d(22, APRIL, 2006)));\n369\n370 // assertEquals(d(14, APRIL, 2006), getNearestDayOfWeek(FRIDAY, d(16, APRIL, 2006)));\n371 // assertEquals(d(14, APRIL, 2006), getNearestDayOfWeek(FRIDAY, d(17, APRIL, 2006)));\n372 // assertEquals(d(21, APRIL, 2006), getNearestDayOfWeek(FRIDAY, d(18, APRIL, 2006)));\n373 // assertEquals(d(21, APRIL, 2006), getNearestDayOfWeek(FRIDAY, d(19, APRIL, 2006)));\n374 // assertEquals(d(21, APRIL, 2006), getNearestDayOfWeek(FRIDAY, d(20, APRIL, 2006)));')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-4 (continued)\nBobsSerialDateTest.java\n")])])]),n("p",[e._v("380 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[e._v('375 assertEquals(d(21, APRIL, 2006), getNearestDayOfWeek(FRIDAY, d(21, APRIL, 2006)));\n376 assertEquals(d(21, APRIL, 2006), getNearestDayOfWeek(FRIDAY, d(22, APRIL, 2006)));\n377\n378 // assertEquals(d(15, APRIL, 2006), getNearestDayOfWeek(SATURDAY, d(16, APRIL, 2006)));\n379 // assertEquals(d(15, APRIL, 2006), getNearestDayOfWeek(SATURDAY, d(17, APRIL, 2006)));\n380 // assertEquals(d(15, APRIL, 2006), getNearestDayOfWeek(SATURDAY, d(18, APRIL, 2006)));\n381 // assertEquals(d(22, APRIL, 2006), getNearestDayOfWeek(SATURDAY, d(19, APRIL, 2006)));\n382 // assertEquals(d(22, APRIL, 2006), getNearestDayOfWeek(SATURDAY, d(20, APRIL, 2006)));\n383 // assertEquals(d(22, APRIL, 2006), getNearestDayOfWeek(SATURDAY, d(21, APRIL, 2006)));\n384 assertEquals(d(22, APRIL, 2006), getNearestDayOfWeek(SATURDAY, d(22, APRIL, 2006)));\n385\n386 try {\n387 getNearestDayOfWeek(-1, d(1, JANUARY, 2006));\n388 fail("Invalid day of week code should throw exception");\n389 } catch (IllegalArgumentException e) {\n390 }\n391 }\n392\n393 public void testEndOfCurrentMonth() throws Exception {\n394 SerialDate d = SerialDate.createInstance(2);\n395 assertEquals(d(31, JANUARY, 2006), d.getEndOfCurrentMonth(d(1, JANUARY, 2006)));\n396 assertEquals(d(28, FEBRUARY, 2006), d.getEndOfCurrentMonth(d(1, FEBRUARY, 2006)));\n397 assertEquals(d(31, MARCH, 2006), d.getEndOfCurrentMonth(d(1, MARCH, 2006)));\n398 assertEquals(d(30, APRIL, 2006), d.getEndOfCurrentMonth(d(1, APRIL, 2006)));\n399 assertEquals(d(31, MAY, 2006), d.getEndOfCurrentMonth(d(1, MAY, 2006)));\n400 assertEquals(d(30, JUNE, 2006), d.getEndOfCurrentMonth(d(1, JUNE, 2006)));\n401 assertEquals(d(31, JULY, 2006), d.getEndOfCurrentMonth(d(1, JULY, 2006)));\n402 assertEquals(d(31, AUGUST, 2006), d.getEndOfCurrentMonth(d(1, AUGUST, 2006)));\n403 assertEquals(d(30, SEPTEMBER, 2006), d.getEndOfCurrentMonth(d(1, SEPTEMBER, 2006)));\n404 assertEquals(d(31, OCTOBER, 2006), d.getEndOfCurrentMonth(d(1, OCTOBER, 2006)));\n405 assertEquals(d(30, NOVEMBER, 2006), d.getEndOfCurrentMonth(d(1, NOVEMBER, 2006)));\n406 assertEquals(d(31, DECEMBER, 2006), d.getEndOfCurrentMonth(d(1, DECEMBER, 2006)));\n407 assertEquals(d(29, FEBRUARY, 2008), d.getEndOfCurrentMonth(d(1, FEBRUARY, 2008)));\n408 }\n409\n410 public void testWeekInMonthToString() throws Exception {\n411 assertEquals("First",weekInMonthToString(FIRST_WEEK_IN_MONTH));\n412 assertEquals("Second",weekInMonthToString(SECOND_WEEK_IN_MONTH));\n413 assertEquals("Third",weekInMonthToString(THIRD_WEEK_IN_MONTH));\n414 assertEquals("Fourth",weekInMonthToString(FOURTH_WEEK_IN_MONTH));\n415 assertEquals("Last",weekInMonthToString(LAST_WEEK_IN_MONTH));\n416\n417 //todo try {\n418 // weekInMonthToString(-1);\n419 // fail("Invalid week code should throw exception");\n420 // } catch (IllegalArgumentException e) {\n421 // }\n422 }\n423\n424 public void testRelativeToString() throws Exception {\n425 assertEquals("Preceding",relativeToString(PRECEDING));\n426 assertEquals("Nearest",relativeToString(NEAREST));\n427 assertEquals("Following",relativeToString(FOLLOWING));\n428\n429 //todo try {\n430 // relativeToString(-1000);\n431 // fail("Invalid relative code should throw exception");\n432 // } catch (IllegalArgumentException e) {\n433 // }\n434 }\n435')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-4 (continued)\nBobsSerialDateTest.java\n")])])]),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 381")]),e._v(" "),n("p",[e._v("436 public void testCreateInstanceFromDDMMYYY() throws Exception {\n437 SerialDate date = createInstance(1, JANUARY, 1900);\n438 assertEquals(1,date.getDayOfMonth());\n439 assertEquals(JANUARY,date.getMonth());\n440 assertEquals(1900,date.getYYYY());\n441 assertEquals(2,date.toSerial());\n442 }\n443\n444 public void testCreateInstanceFromSerial() throws Exception {\n445 assertEquals(d(1, JANUARY, 1900),createInstance(2));\n446 assertEquals(d(1, JANUARY, 1901), createInstance(367));\n447 }\n448\n449 public void testCreateInstanceFromJavaDate() throws Exception {\n450 assertEquals(d(1, JANUARY, 1900),\ncreateInstance(new GregorianCalendar(1900,0,1).getTime()));\n451 assertEquals(d(1, JANUARY, 2006),\ncreateInstance(new GregorianCalendar(2006,0,1).getTime()));\n452 }\n453\n454 public static void main(String[] args) {\n455 junit.textui.TestRunner.run(BobsSerialDateTest.class);\n456 }\n457 }")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-4 (continued)\nBobsSerialDateTest.java\n")])])]),n("p",[e._v("382 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[n("strong",[e._v("Listing B-5\nSpreadsheetDate.java")]),e._v("\n1 /* ========================================================================\n2 * JCommon : a free general purpose class library for the Java(tm) platform\n3 * ========================================================================\n4 *\n5 * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.\n6 *\n7 * Project Info: "),n("a",{attrs:{href:"http://www.jfree.org/jcommon/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.jfree.org/jcommon/index.html"),n("OutboundLink")],1),e._v("\n8 *\n9 * This library is free software; you can redistribute it and/or modify it\n10 * under the terms of the GNU Lesser General Public License as published by\n11 * the Free Software Foundation; either version 2.1 of the License, or\n12 * (at your option) any later version.\n13 *\n14 * This library is distributed in the hope that it will be useful, but\n15 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n16 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public\n17 * License for more details.\n18 *\n19 * You should have received a copy of the GNU Lesser General Public\n20 * License along with this library; if not, write to the Free Software\n21 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n22 * USA.\n23 *\n24 * [Java is a trademark or registered trademark of Sun Microsystems, Inc.\n25 * in the United States and other countries.]\n26 *\n27 * --------------------\n28 * SpreadsheetDate.java\n29 * --------------------\n30 * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.\n31 *\n32 * Original Author: David Gilbert (for Object Refinery Limited);\n33 * Contributor(s): -;\n34 *\n35 * $Id: SpreadsheetDate.java,v 1.8 2005/11/03 09:25:39 mungady Exp $\n36 *\n37 * Changes\n38 * -------\n39 * 11-Oct-2001 : Version 1 (DG);\n40 * 05-Nov-2001 : Added getDescription() and setDescription() methods (DG);\n41 * 12-Nov-2001 : Changed name from ExcelDate.java to SpreadsheetDate.java (DG);\n42 * Fixed a bug in calculating day, month and year from serial\n43 * number (DG);\n44 * 24-Jan-2002 : Fixed a bug in calculating the serial number from the day,\n45 * month and year. Thanks to Trevor Hills for the report (DG);\n46 * 29-May-2002 : Added equals(Object) method (SourceForge ID 558850) (DG);\n47 * 03-Oct-2002 : Fixed errors reported by Checkstyle (DG);\n48 * 13-Mar-2003 : Implemented Serializable (DG);\n49 * 04-Sep-2003 : Completed isInRange() methods (DG);\n50 * 05-Sep-2003 : Implemented Comparable (DG);\n51 * 21-Oct-2003 : Added hashCode() method (DG);\n52 *\n53 "),n("em",[e._v("/\n54\n55 package org.jfree.date;\n56\n57 import java.util.Calendar;\n58 import java.util.Date;\n59\n60 /")]),e._v("*\n61 * Represents a date using an integer, in a similar fashion to the\n62 * implementation in Microsoft Excel. The range of dates supported is")]),e._v(" "),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 383")]),e._v(" "),n("p",[e._v("63 * 1-Jan-1900 to 31-Dec-9999.\n64 * "),n("P",[e._v("\n65 * Be aware that there is a deliberate bug in Excel that recognises the year\n66 * 1900 as a leap year when in fact it is not a leap year. You can find more\n67 * information on the Microsoft website in article Q181370:\n68 * "),n("P",[e._v("\n69 * "),n("a",{attrs:{href:"http://support.microsoft.com/support/kb/articles/Q181/3/70.asp",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://support.microsoft.com/support/kb/articles/Q181/3/70.asp"),n("OutboundLink")],1),e._v("\n70 * "),n("P",[e._v("\n71 * Excel uses the convention that 1-Jan-1900 = 1. This class uses the\n72 * convention 1-Jan-1900 = 2.\n73 * The result is that the day number in this class will be different to the\n74 * Excel figure for January and February 1900...but then Excel adds in an extra\n75 * day (29-Feb-1900 which does not actually exist!) and from that point forward\n76 * the day numbers will match.\n77 *\n78 * @author David Gilbert\n79 "),n("em",[e._v("/\n80 public class SpreadsheetDate extends SerialDate {\n81\n82 /")]),e._v("* For serialization. "),n("em",[e._v("/\n83 private static final long serialVersionUID = -2039586705374454461L;\n84\n85 /")]),e._v("*\n86 * The day number (1-Jan-1900 = 2, 2-Jan-1900 = 3, ..., 31-Dec-9999 =\n87 * 2958465).\n88 "),n("em",[e._v("/\n89 private int serial;\n90\n91 /")]),e._v("* The day of the month (1 to 28, 29, 30 or 31 depending on the month). "),n("em",[e._v("/\n92 private int day;\n93\n94 /")]),e._v("* The month of the year (1 to 12). "),n("em",[e._v("/\n95 private int month;\n96\n97 /")]),e._v("* The year (1900 to 9999). "),n("em",[e._v("/\n98 private int year;\n99\n100 /")]),e._v("* An optional description for the date. "),n("em",[e._v("/\n101 private String description;\n102\n103 /")]),e._v("*\n104 * Creates a new date instance.\n105 *\n106 * @param day the day (in the range 1 to 28/29/30/31).\n107 * @param month the month (in the range 1 to 12).\n108 * @param year the year (in the range 1900 to 9999).\n109 */\n110 public SpreadsheetDate(final int day, final int month, final int year) {\n111\n112 if ((year >= 1900) && (year <= 9999)) {\n113 this.year = year;\n114 }\n115 else {\n116 throw new IllegalArgumentException(\n117 \"The 'year' argument must be in range 1900 to 9999.\"\n118 );\n119 }\n120\n121 if ((month >= MonthConstants.JANUARY)\n122 && (month <= MonthConstants.DECEMBER)) {\n123 this.month = month;\n124 }")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-5 (continued)\nSpreadsheetDate.java\n")])])]),n("p",[e._v("384 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[e._v("125 else {\n126 throw new IllegalArgumentException(\n127 \"The 'month' argument must be in the range 1 to 12.\"\n128 );\n129 }\n130\n131 if ((day >= 1) && (day <= SerialDate.lastDayOfMonth(month, year))) {\n132 this.day = day;\n133 }\n134 else {\n135 throw new IllegalArgumentException(\"Invalid 'day' argument.\");\n136 }\n137\n138 // the serial number needs to be synchronised with the day-month-year...\n139 this.serial = calcSerial(day, month, year);\n140\n141 this.description = null;\n142\n143 }\n144\n145 /**\n146 * Standard constructor - creates a new date object representing the\n147 * specified day number (which should be in the range 2 to 2958465.\n148 *\n149 * @param serial the serial number for the day (range: 2 to 2958465).\n150 "),n("em",[e._v('/\n151 public SpreadsheetDate(final int serial) {\n152\n153 if ((serial >= SERIAL_LOWER_BOUND) && (serial <= SERIAL_UPPER_BOUND)) {\n154 this.serial = serial;\n155 }\n156 else {\n157 throw new IllegalArgumentException(\n158 "SpreadsheetDate: Serial must be in range 2 to 2958465.");\n159 }\n160\n161 // the day-month-year needs to be synchronised with the serial number...\n162 calcDayMonthYear();\n163\n164 }\n165\n166 /')]),e._v("*\n167 * Returns the description that is attached to the date. It is not\n168 * required that a date have a description, but for some applications it\n169 * is useful.\n170 *\n171 * @return The description that is attached to the date.\n172 "),n("em",[e._v("/\n173 public String getDescription() {\n174 return this.description;\n175 }\n176\n177 /")]),e._v("*\n178 * Sets the description for the date.\n179 *\n180 * @param description the description for this date ("),n("code",[e._v("null")]),e._v("\n181 * permitted).\n182 */\n183 public void setDescription(final String description) {\n184 this.description = description;\n185 }\n186")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-5 (continued)\nSpreadsheetDate.java\n")])])]),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 385")]),e._v(" "),n("p",[e._v("187 /**\n188 * Returns the serial number for the date, where 1 January 1900 = 2\n189 * (this corresponds, almost, to the numbering system used in Microsoft\n190 * Excel for Windows and Lotus 1-2-3).\n191 *\n192 * @return The serial number of this date.\n193 "),n("em",[e._v("/\n194 public int toSerial() {\n195 return this.serial;\n196 }\n197\n198 /")]),e._v("*\n199 * Returns a "),n("code",[e._v("java.util.Date")]),e._v(" equivalent to this date.\n200 *\n201 * @return The date.\n202 "),n("em",[e._v("/\n203 public Date toDate() {\n204 final Calendar calendar = Calendar.getInstance();\n205 calendar.set(getYYYY(), getMonth() - 1, getDayOfMonth(), 0, 0, 0);\n206 return calendar.getTime();\n207 }\n208\n209 /")]),e._v("*\n210 * Returns the year (assume a valid range of 1900 to 9999).\n211 *\n212 * @return The year.\n213 "),n("em",[e._v("/\n214 public int getYYYY() {\n215 return this.year;\n216 }\n217\n218 /")]),e._v("*\n219 * Returns the month (January = 1, February = 2, March = 3).\n220 *\n221 * @return The month of the year.\n222 "),n("em",[e._v("/\n223 public int getMonth() {\n224 return this.month;\n225 }\n226\n227 /")]),e._v("*\n228 * Returns the day of the month.\n229 *\n230 * @return The day of the month.\n231 "),n("em",[e._v("/\n232 public int getDayOfMonth() {\n233 return this.day;\n234 }\n235\n236 /")]),e._v("*\n237 * Returns a code representing the day of the week.\n238 * "),n("P",[e._v("\n239 * The codes are defined in the {@link SerialDate} class as:\n240 * "),n("code",[e._v("SUNDAY")]),e._v(", "),n("code",[e._v("MONDAY")]),e._v(", "),n("code",[e._v("TUESDAY")]),e._v(",\n241 * "),n("code",[e._v("WEDNESDAY")]),e._v(", "),n("code",[e._v("THURSDAY")]),e._v(", "),n("code",[e._v("FRIDAY")]),e._v(", and\n242 * "),n("code",[e._v("SATURDAY")]),e._v(".\n243 *\n244 * @return A code representing the day of the week.\n245 */\n246 public int getDayOfWeek() {\n247 return (this.serial + 6) % 7 + 1;\n248 }")])],1),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-5 (continued)\nSpreadsheetDate.java\n")])])]),n("p",[e._v("386 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[e._v("249\n250 /**\n251 * Tests the equality of this date with an arbitrary object.\n252 * "),n("P",[e._v("\n253 * This method will return true ONLY if the object is an instance of the\n254 * {@link SerialDate} base class, and it represents the same day as this\n255 * {@link SpreadsheetDate}.\n256 *\n257 * @param object the object to compare ("),n("code",[e._v("null")]),e._v(" permitted).\n258 *\n259 * @return A boolean.\n260 "),n("em",[e._v("/\n261 public boolean equals(final Object object) {\n262\n263 if (object instanceof SerialDate) {\n264 final SerialDate s = (SerialDate) object;\n265 return (s.toSerial() == this.toSerial());\n266 }\n267 else {\n268 return false;\n269 }\n270\n271 }\n272\n273 /")]),e._v("*\n274 * Returns a hash code for this object instance.\n275 *\n276 * @return A hash code.\n277 "),n("em",[e._v("/\n278 public int hashCode() {\n279 return toSerial();\n280 }\n281\n282 /")]),e._v("*\n283 * Returns the difference (in days) between this date and the specified\n284 * 'other' date.\n285 *\n286 * @param other the date being compared to.\n287 *\n288 * @return The difference (in days) between this date and the specified\n289 * 'other' date.\n290 "),n("em",[e._v("/\n291 public int compare(final SerialDate other) {\n292 return this.serial - other.toSerial();\n293 }\n294\n295 /")]),e._v("*\n296 * Implements the method required by the Comparable interface.\n297 *\n298 * @param other the other object (usually another SerialDate).\n299 *\n300 * @return A negative integer, zero, or a positive integer as this object\n301 * is less than, equal to, or greater than the specified object.\n302 "),n("em",[e._v("/\n303 public int compareTo(final Object other) {\n304 return compare((SerialDate) other);\n305 }\n306\n307 /")]),e._v("*\n308 * Returns true if this SerialDate represents the same date as the\n309 * specified SerialDate.\n310 *")])],1),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-5 (continued)\nSpreadsheetDate.java\n")])])]),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 387")]),e._v(" "),n("p",[e._v("311 * @param other the date being compared to.\n312 *\n313 * @return "),n("code",[e._v("true")]),e._v(" if this SerialDate represents the same date as\n314 * the specified SerialDate.\n315 "),n("em",[e._v("/\n316 public boolean isOn(final SerialDate other) {\n317 return (this.serial == other.toSerial());\n318 }\n319\n320 /")]),e._v("*\n321 * Returns true if this SerialDate represents an earlier date compared to\n322 * the specified SerialDate.\n323 *\n324 * @param other the date being compared to.\n325 *\n326 * @return "),n("code",[e._v("true")]),e._v(" if this SerialDate represents an earlier date\n327 * compared to the specified SerialDate.\n328 "),n("em",[e._v("/\n329 public boolean isBefore(final SerialDate other) {\n330 return (this.serial < other.toSerial());\n331 }\n332\n333 /")]),e._v("*\n334 * Returns true if this SerialDate represents the same date as the\n335 * specified SerialDate.\n336 *\n337 * @param other the date being compared to.\n338 *\n339 * @return "),n("code",[e._v("true")]),e._v(" if this SerialDate represents the same date\n340 * as the specified SerialDate.\n341 "),n("em",[e._v("/\n342 public boolean isOnOrBefore(final SerialDate other) {\n343 return (this.serial <= other.toSerial());\n344 }\n345\n346 /")]),e._v("*\n347 * Returns true if this SerialDate represents the same date as the\n348 * specified SerialDate.\n349 *\n350 * @param other the date being compared to.\n351 *\n352 * @return "),n("code",[e._v("true")]),e._v(" if this SerialDate represents the same date\n353 * as the specified SerialDate.\n354 "),n("em",[e._v("/\n355 public boolean isAfter(final SerialDate other) {\n356 return (this.serial > other.toSerial());\n357 }\n358\n359 /")]),e._v("*\n360 * Returns true if this SerialDate represents the same date as the\n361 * specified SerialDate.\n362 *\n363 * @param other the date being compared to.\n364 *\n365 * @return "),n("code",[e._v("true")]),e._v(" if this SerialDate represents the same date as\n366 * the specified SerialDate.\n367 "),n("em",[e._v("/\n368 public boolean isOnOrAfter(final SerialDate other) {\n369 return (this.serial >= other.toSerial());\n370 }\n371\n372 /")]),e._v("*\n373 * Returns "),n("code",[e._v("true")]),e._v(" if this {@link SerialDate} is within the")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-5 (continued)\nSpreadsheetDate.java\n")])])]),n("p",[e._v("388 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[e._v("374 * specified range (INCLUSIVE). The date order of d1 and d2 is not\n375 * important.\n376 *\n377 * @param d1 a boundary date for the range.\n378 * @param d2 the other boundary date for the range.\n379 *\n380 * @return A boolean.\n381 "),n("em",[e._v("/\n382 public boolean isInRange(final SerialDate d1, final SerialDate d2) {\n383 return isInRange(d1, d2, SerialDate.INCLUDE_BOTH);\n384 }\n385\n386 /")]),e._v("*\n387 * Returns true if this SerialDate is within the specified range (caller\n388 * specifies whether or not the end-points are included). The order of d1\n389 * and d2 is not important.\n390 *\n391 * @param d1 one boundary date for the range.\n392 * @param d2 a second boundary date for the range.\n393 * @param include a code that controls whether or not the start and end\n394 * dates are included in the range.\n395 *\n396 * @return "),n("code",[e._v("true")]),e._v(" if this SerialDate is within the specified\n397 * range.\n398 "),n("em",[e._v("/\n399 public boolean isInRange(final SerialDate d1, final SerialDate d2,\n400 final int include) {\n401 final int s1 = d1.toSerial();\n402 final int s2 = d2.toSerial();\n403 final int start = Math.min(s1, s2);\n404 final int end = Math.max(s1, s2);\n405\n406 final int s = toSerial();\n407 if (include == SerialDate.INCLUDE_BOTH) {\n408 return (s >= start && s <= end);\n409 }\n410 else if (include == SerialDate.INCLUDE_FIRST) {\n411 return (s >= start && s < end);\n412 }\n413 else if (include == SerialDate.INCLUDE_SECOND) {\n414 return (s > start && s <= end);\n415 }\n416 else {\n417 return (s > start && s < end);\n418 }\n419 }\n420\n421 /")]),e._v("*\n422 * Calculate the serial number from the day, month and year.\n423 * "),n("P",[e._v("\n424 * 1-Jan-1900 = 2.\n425 *\n426 * @param d the day.\n427 * @param m the month.\n428 * @param y the year.\n429 *\n430 * @return the serial number from the day, month and year.\n431 */\n432 private int calcSerial(final int d, final int m, final int y) {\n433 final int yy = ((y - 1900) * 365) + SerialDate.leapYearCount(y - 1);\n434 int mm = SerialDate.AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH[m];\n435 if (m > MonthConstants.FEBRUARY) {")])],1),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-5 (continued)\nSpreadsheetDate.java\n")])])]),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 389")]),e._v(" "),n("p",[e._v("436 if (SerialDate.isLeapYear(y)) {\n437 mm = mm + 1;\n438 }\n439 }\n440 final int dd = d;\n441 return yy + mm + dd + 1;\n442 }\n443\n444 /**\n445 * Calculate the day, month and year from the serial number.\n446 */\n447 private void calcDayMonthYear() {\n448\n449 // get the year from the serial date\n450 final int days = this.serial - SERIAL_LOWER_BOUND;\n451 // overestimated because we ignored leap days\n452 final int overestimatedYYYY = 1900 + (days / 365);\n453 final int leaps = SerialDate.leapYearCount(overestimatedYYYY);\n454 final int nonleapdays = days - leaps;\n455 // underestimated because we overestimated years\n456 int underestimatedYYYY = 1900 + (nonleapdays / 365);\n457\n458 if (underestimatedYYYY == overestimatedYYYY) {\n459 this.year = underestimatedYYYY;\n460 }\n461 else {\n462 int ss1 = calcSerial(1, 1, underestimatedYYYY);\n463 while (ss1 <= this.serial) {\n464 underestimatedYYYY = underestimatedYYYY + 1;\n465 ss1 = calcSerial(1, 1, underestimatedYYYY);\n466 }\n467 this.year = underestimatedYYYY - 1;\n468 }\n469\n470 final int ss2 = calcSerial(1, 1, this.year);\n471\n472 int[] daysToEndOfPrecedingMonth\n473 = AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH;\n474\n475 if (isLeapYear(this.year)) {\n476 daysToEndOfPrecedingMonth\n477 = LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH;\n478 }\n479\n480 // get the month from the serial date\n481 int mm = 1;\n482 int sss = ss2 + daysToEndOfPrecedingMonth[mm] - 1;\n483 while (sss < this.serial) {\n484 mm = mm + 1;\n485 sss = ss2 + daysToEndOfPrecedingMonth[mm] - 1;\n486 }\n487 this.month = mm - 1;\n488\n489 // what's left is d(+1);\n490 this.day = this.serial - ss2\n491 - daysToEndOfPrecedingMonth[this.month] + 1;\n492\n493 }\n494\n495 }")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-5 (continued)\nSpreadsheetDate.java\n")])])]),n("p",[e._v("390 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[n("strong",[e._v("Listing B-6\nRelativeDayOfWeekRule.java")]),e._v("\n1 /* ========================================================================\n2 * JCommon : a free general purpose class library for the Java(tm) platform\n3 * ========================================================================\n4 *\n5 * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.\n6 *\n7 * Project Info: "),n("a",{attrs:{href:"http://www.jfree.org/jcommon/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.jfree.org/jcommon/index.html"),n("OutboundLink")],1),e._v("\n8 *\n9 * This library is free software; you can redistribute it and/or modify it\n10 * under the terms of the GNU Lesser General Public License as published by\n11 * the Free Software Foundation; either version 2.1 of the License, or\n12 * (at your option) any later version.\n13 *\n14 * This library is distributed in the hope that it will be useful, but\n15 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n16 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public\n17 * License for more details.\n18 *\n19 * You should have received a copy of the GNU Lesser General Public\n20 * License along with this library; if not, write to the Free Software\n21 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n22 * USA.\n23 *\n24 * [Java is a trademark or registered trademark of Sun Microsystems, Inc.\n25 * in the United States and other countries.]\n26 *\n27 * --------------------------\n28 * RelativeDayOfWeekRule.java\n29 * --------------------------\n30 * (C) Copyright 2000-2003, by Object Refinery Limited and Contributors.\n31 *\n32 * Original Author: David Gilbert (for Object Refinery Limited);\n33 * Contributor(s): -;\n34 *\n35 * $Id: RelativeDayOfWeekRule.java,v 1.6 2005/11/16 15:58:40 taqua Exp $\n36 *\n37 * Changes (from 26-Oct-2001)\n38 * --------------------------\n39 * 26-Oct-2001 : Changed package to com.jrefinery.date.*;\n40 * 03-Oct-2002 : Fixed errors reported by Checkstyle (DG);\n41 *\n42 "),n("em",[e._v("/\n43\n44 package org.jfree.date;\n45\n46 /")]),e._v("*\n47 * An annual date rule that returns a date for each year based on (a) a\n48 * reference rule; (b) a day of the week; and (c) a selection parameter\n49 * (SerialDate.PRECEDING, SerialDate.NEAREST, SerialDate.FOLLOWING).\n50 * "),n("P",[e._v("\n51 * For example, Good Friday can be specified as 'the Friday PRECEDING Easter\n52 * Sunday'.\n53 *\n54 * @author David Gilbert\n55 "),n("em",[e._v("/\n56 public class RelativeDayOfWeekRule extends AnnualDateRule {\n57\n58 /")]),e._v("* A reference to the annual date rule on which this rule is based. "),n("em",[e._v("/\n59 private AnnualDateRule subrule;\n60\n61 /")]),e._v("*\n62 * The day of the week (SerialDate.MONDAY, SerialDate.TUESDAY, and so on).")])],1),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 391")]),e._v(" "),n("p",[e._v("63 "),n("em",[e._v("/\n64 private int dayOfWeek;\n65\n66 /")]),e._v("* Specifies which day of the week (PRECEDING, NEAREST or FOLLOWING). "),n("em",[e._v("/\n67 private int relative;\n68\n69 /")]),e._v("*\n70 * Default constructor - builds a rule for the Monday following 1 January.\n71 "),n("em",[e._v("/\n72 public RelativeDayOfWeekRule() {\n73 this(new DayAndMonthRule(), SerialDate.MONDAY, SerialDate.FOLLOWING);\n74 }\n75\n76 /")]),e._v("*\n77 * Standard constructor - builds rule based on the supplied sub-rule.\n78 *\n79 * @param subrule the rule that determines the reference date.\n80 * @param dayOfWeek the day-of-the-week relative to the reference date.\n81 * @param relative indicates "),n("em",[e._v("which")]),e._v(" day-of-the-week (preceding, nearest\n82 * or following).\n83 "),n("em",[e._v("/\n84 public RelativeDayOfWeekRule(final AnnualDateRule subrule,\n85 final int dayOfWeek, final int relative) {\n86 this.subrule = subrule;\n87 this.dayOfWeek = dayOfWeek;\n88 this.relative = relative;\n89 }\n90\n91 /")]),e._v("*\n92 * Returns the sub-rule (also called the reference rule).\n93 *\n94 * @return The annual date rule that determines the reference date for this\n95 * rule.\n96 "),n("em",[e._v("/\n97 public AnnualDateRule getSubrule() {\n98 return this.subrule;\n99 }\n100\n101 /")]),e._v("*\n102 * Sets the sub-rule.\n103 *\n104 * @param subrule the annual date rule that determines the reference date\n105 * for this rule.\n106 "),n("em",[e._v("/\n107 public void setSubrule(final AnnualDateRule subrule) {\n108 this.subrule = subrule;\n109 }\n110\n111 /")]),e._v("*\n112 * Returns the day-of-the-week for this rule.\n113 *\n114 * @return the day-of-the-week for this rule.\n115 "),n("em",[e._v("/\n116 public int getDayOfWeek() {\n117 return this.dayOfWeek;\n118 }\n119\n120 /")]),e._v("*\n121 * Sets the day-of-the-week for this rule.\n122 *\n123 * @param dayOfWeek the day-of-the-week (SerialDate.MONDAY,\n124 * SerialDate.TUESDAY, and so on).")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-6 (continued)\nRelativeDayOfWeekRule.java\n")])])]),n("p",[e._v("392 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[e._v("125 "),n("em",[e._v("/\n126 public void setDayOfWeek(final int dayOfWeek) {\n127 this.dayOfWeek = dayOfWeek;\n128 }\n129\n130 /")]),e._v("*\n131 * Returns the 'relative' attribute, that determines "),n("em",[e._v("which")]),e._v("\n132 * day-of-the-week we are interested in (SerialDate.PRECEDING,\n133 * SerialDate.NEAREST or SerialDate.FOLLOWING).\n134 *\n135 * @return The 'relative' attribute.\n136 "),n("em",[e._v("/\n137 public int getRelative() {\n138 return this.relative;\n139 }\n140\n141 /")]),e._v("*\n142 * Sets the 'relative' attribute (SerialDate.PRECEDING, SerialDate.NEAREST,\n143 * SerialDate.FOLLOWING).\n144 *\n145 * @param relative determines "),n("em",[e._v("which")]),e._v(" day-of-the-week is selected by this\n146 * rule.\n147 "),n("em",[e._v("/\n148 public void setRelative(final int relative) {\n149 this.relative = relative;\n150 }\n151\n152 /")]),e._v("*\n153 * Creates a clone of this rule.\n154 *\n155 * @return a clone of this rule.\n156 *\n157 * @throws CloneNotSupportedException this should never happen.\n158 "),n("em",[e._v("/\n159 public Object clone() throws CloneNotSupportedException {\n160 final RelativeDayOfWeekRule duplicate\n161 = (RelativeDayOfWeekRule) super.clone();\n162 duplicate.subrule = (AnnualDateRule) duplicate.getSubrule().clone();\n163 return duplicate;\n164 }\n165\n166 /")]),e._v("*\n167 * Returns the date generated by this rule, for the specified year.\n168 *\n169 * @param year the year (1900 <= year <= 9999).\n170 *\n171 * @return The date generated by the rule for the given year (possibly\n172 * "),n("code",[e._v("null")]),e._v(').\n173 */\n174 public SerialDate getDate(final int year) {\n175\n176 // check argument...\n177 if ((year < SerialDate.MINIMUM_YEAR_SUPPORTED)\n178 || (year > SerialDate.MAXIMUM_YEAR_SUPPORTED)) {\n179 throw new IllegalArgumentException(\n180 "RelativeDayOfWeekRule.getDate(): year outside valid range.");\n181 }\n182\n183 // calculate the date...\n184 SerialDate result = null;\n185 final SerialDate base = this.subrule.getDate(year);\n186')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-6 (continued)\nRelativeDayOfWeekRule.java\n")])])]),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 393")]),e._v(" "),n("p",[e._v("187 if (base != null) {\n188 switch (this.relative) {\n189 case(SerialDate.PRECEDING):\n190 result = SerialDate.getPreviousDayOfWeek(this.dayOfWeek,\n191 base);\n192 break;\n193 case(SerialDate.NEAREST):\n194 result = SerialDate.getNearestDayOfWeek(this.dayOfWeek,\n195 base);\n196 break;\n197 case(SerialDate.FOLLOWING):\n198 result = SerialDate.getFollowingDayOfWeek(this.dayOfWeek,\n199 base);\n200 break;\n201 default:\n202 break;\n203 }\n204 }\n205 return result;\n206\n207 }\n208\n209 }")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-6 (continued)\nRelativeDayOfWeekRule.java\n")])])]),n("p",[e._v("394 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[n("strong",[e._v("Listing B-7\nDayDate.java (Final)")]),e._v("\n1 /* ========================================================================\n2 * JCommon : a free general purpose class library for the Java(tm) platform\n3 * ========================================================================\n4 *\n5 * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.\n...\n36 "),n("em",[e._v("/\n37 package org.jfree.date;\n38\n39 import java.io.Serializable;\n40 import java.util.")]),e._v(";\n41\n42 /**\n43 * An abstract class that represents immutable dates with a precision of\n44 * one day. The implementation will map each date to an integer that\n45 * represents an ordinal number of days from some fixed origin.\n46 *\n47 * Why not just use java.util.Date? We will, when it makes sense. At times,\n48 * java.util.Date can be "),n("em",[e._v("too")]),e._v(" precise - it represents an instant in time,\n49 * accurate to 1/1000th of a second (with the date itself depending on the\n50 * time-zone). Sometimes we just want to represent a particular day (e.g. 21\n51 * January 2015) without concerning ourselves about the time of day, or the\n52 * time-zone, or anything else. That's what we've defined DayDate for.\n53 *\n54 * Use DayDateFactory.makeDate to create an instance.\n55 *\n56 * @author David Gilbert\n57 * @author Robert C. Martin did a lot of refactoring.\n58 */\n59\n60 public abstract class DayDate implements Comparable, Serializable {\n61 public abstract int getOrdinalDay();\n62 public abstract int getYear();\n63 public abstract Month getMonth();\n64 public abstract int getDayOfMonth();\n65\n66 protected abstract Day getDayOfWeekForOrdinalZero();\n67\n68 public DayDate plusDays(int days) {\n69 return DayDateFactory.makeDate(getOrdinalDay() + days);\n70 }\n71\n72 public DayDate plusMonths(int months) {\n73 int thisMonthAsOrdinal = getMonth().toInt() - Month.JANUARY.toInt();\n74 int thisMonthAndYearAsOrdinal = 12 * getYear() + thisMonthAsOrdinal;\n75 int resultMonthAndYearAsOrdinal = thisMonthAndYearAsOrdinal + months;\n76 int resultYear = resultMonthAndYearAsOrdinal / 12;\n77 int resultMonthAsOrdinal = resultMonthAndYearAsOrdinal % 12 + Month.JANUARY.toInt();\n78 Month resultMonth = Month.fromInt(resultMonthAsOrdinal);\n79 int resultDay = correctLastDayOfMonth(getDayOfMonth(), resultMonth, resultYear);\n80 return DayDateFactory.makeDate(resultDay, resultMonth, resultYear);\n81 }\n82\n83 public DayDate plusYears(int years) {\n84 int resultYear = getYear() + years;\n85 int resultDay = correctLastDayOfMonth(getDayOfMonth(), getMonth(), resultYear);\n86 return DayDateFactory.makeDate(resultDay, getMonth(), resultYear);\n87 }\n88\n89 private int correctLastDayOfMonth(int day, Month month, int year) {\n90 int lastDayOfMonth = DateUtil.lastDayOfMonth(month, year);\n91 if (day > lastDayOfMonth)")]),e._v(" "),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 395")]),e._v(" "),n("p",[e._v('92 day = lastDayOfMonth;\n93 return day;\n94 }\n95\n96 public DayDate getPreviousDayOfWeek(Day targetDayOfWeek) {\n97 int offsetToTarget = targetDayOfWeek.toInt() - getDayOfWeek().toInt();\n98 if (offsetToTarget >= 0)\n99 offsetToTarget -= 7;\n100 return plusDays(offsetToTarget);\n101 }\n102\n103 public DayDate getFollowingDayOfWeek(Day targetDayOfWeek) {\n104 int offsetToTarget = targetDayOfWeek.toInt() - getDayOfWeek().toInt();\n105 if (offsetToTarget <= 0)\n106 offsetToTarget += 7;\n107 return plusDays(offsetToTarget);\n108 }\n109\n110 public DayDate getNearestDayOfWeek(Day targetDayOfWeek) {\n111 int offsetToThisWeeksTarget = targetDayOfWeek.toInt() - getDayOfWeek().toInt();\n112 int offsetToFutureTarget = (offsetToThisWeeksTarget + 7) % 7;\n113 int offsetToPreviousTarget = offsetToFutureTarget - 7;\n114\n115 if (offsetToFutureTarget > 3)\n116 return plusDays(offsetToPreviousTarget);\n117 else\n118 return plusDays(offsetToFutureTarget);\n119 }\n120\n121 public DayDate getEndOfMonth() {\n122 Month month = getMonth();\n123 int year = getYear();\n124 int lastDay = DateUtil.lastDayOfMonth(month, year);\n125 return DayDateFactory.makeDate(lastDay, month, year);\n126 }\n127\n128 public Date toDate() {\n129 final Calendar calendar = Calendar.getInstance();\n130 int ordinalMonth = getMonth().toInt() - Month.JANUARY.toInt();\n131 calendar.set(getYear(), ordinalMonth, getDayOfMonth(), 0, 0, 0);\n132 return calendar.getTime();\n133 }\n134\n135 public String toString() {\n136 return String.format("%02d-%s-%d", getDayOfMonth(), getMonth(), getYear());\n137 }\n138\n139 public Day getDayOfWeek() {\n140 Day startingDay = getDayOfWeekForOrdinalZero();\n141 int startingOffset = startingDay.toInt() - Day.SUNDAY.toInt();\n142 int ordinalOfDayOfWeek = (getOrdinalDay() + startingOffset) % 7;\n143 return Day.fromInt(ordinalOfDayOfWeek + Day.SUNDAY.toInt());\n144 }\n145\n146 public int daysSince(DayDate date) {\n147 return getOrdinalDay() - date.getOrdinalDay();\n148 }\n149\n150 public boolean isOn(DayDate other) {\n151 return getOrdinalDay() == other.getOrdinalDay();\n152 }\n153')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-7 (continued)\nDayDate.java (Final)\n")])])]),n("p",[e._v("396 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[e._v("154 public boolean isBefore(DayDate other) {\n155 return getOrdinalDay() < other.getOrdinalDay();\n156 }\n157\n158 public boolean isOnOrBefore(DayDate other) {\n159 return getOrdinalDay() <= other.getOrdinalDay();\n160 }\n161\n162 public boolean isAfter(DayDate other) {\n163 return getOrdinalDay() > other.getOrdinalDay();\n164 }\n165\n166 public boolean isOnOrAfter(DayDate other) {\n167 return getOrdinalDay() >= other.getOrdinalDay();\n168 }\n169\n170 public boolean isInRange(DayDate d1, DayDate d2) {\n171 return isInRange(d1, d2, DateInterval.CLOSED);\n172 }\n173\n174 public boolean isInRange(DayDate d1, DayDate d2, DateInterval interval) {\n175 int left = Math.min(d1.getOrdinalDay(), d2.getOrdinalDay());\n176 int right = Math.max(d1.getOrdinalDay(), d2.getOrdinalDay());\n177 return interval.isIn(getOrdinalDay(), left, right);\n178 }\n179 }")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-7 (continued)\nDayDate.java (Final)\n")])])]),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 397")]),e._v(" "),n("p",[n("strong",[e._v("Listing B- 8\nMonth.java (Final)")]),e._v('\n1 package org.jfree.date;\n2\n3 import java.text.DateFormatSymbols;\n4\n5 public enum Month {\n6 JANUARY(1), FEBRUARY(2), MARCH(3),\n7 APRIL(4), MAY(5), JUNE(6),\n8 JULY(7), AUGUST(8), SEPTEMBER(9),\n9 OCTOBER(10),NOVEMBER(11),DECEMBER(12);\n10 private static DateFormatSymbols dateFormatSymbols = new DateFormatSymbols();\n11 private static final int[] LAST_DAY_OF_MONTH =\n12 {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n13\n14 private int index;\n15\n16 Month(int index) {\n17 this.index = index;\n18 }\n19\n20 public static Month fromInt(int monthIndex) {\n21 for (Month m : Month.values()) {\n22 if (m.index == monthIndex)\n23 return m;\n24 }\n25 throw new IllegalArgumentException("Invalid month index " + monthIndex);\n26 }\n27\n28 public int lastDay() {\n29 return LAST_DAY_OF_MONTH[index];\n30 }\n31\n32 public int quarter() {\n33 return 1 + (index - 1) / 3;\n34 }\n35\n36 public String toString() {\n37 return dateFormatSymbols.getMonths()[index - 1];\n38 }\n39\n40 public String toShortString() {\n41 return dateFormatSymbols.getShortMonths()[index - 1];\n42 }\n43\n44 public static Month parse(String s) {\n45 s = s.trim();\n46 for (Month m : Month.values())\n47 if (m.matches(s))\n48 return m;\n49\n50 try {\n51 return fromInt(Integer.parseInt(s));\n52 }\n53 catch (NumberFormatException e) {}\n54 throw new IllegalArgumentException("Invalid month " + s);\n55 }\n56\n57 private boolean matches(String s) {\n58 return s.equalsIgnoreCase(toString()) ||\n59 s.equalsIgnoreCase(toShortString());\n60 }\n61\n62 public int toInt() {\n63 return index;\n64 }\n65 }')]),e._v(" "),n("p",[e._v("398 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[n("strong",[e._v("Listing B-9\nDay.java (Final)")]),e._v('\n1 package org.jfree.date;\n2\n3 import java.util.Calendar;\n4 import java.text.DateFormatSymbols;\n5\n6 public enum Day {\n7 MONDAY(Calendar.MONDAY),\n8 TUESDAY(Calendar.TUESDAY),\n9 WEDNESDAY(Calendar.WEDNESDAY),\n10 THURSDAY(Calendar.THURSDAY),\n11 FRIDAY(Calendar.FRIDAY),\n12 SATURDAY(Calendar.SATURDAY),\n13 SUNDAY(Calendar.SUNDAY);\n14\n15 private final int index;\n16 private static DateFormatSymbols dateSymbols = new DateFormatSymbols();\n17\n18 Day(int day) {\n19 index = day;\n20 }\n21\n22 public static Day fromInt(int index) throws IllegalArgumentException {\n23 for (Day d : Day.values())\n24 if (d.index == index)\n25 return d;\n26 throw new IllegalArgumentException(\n27 String.format("Illegal day index: %d.", index));\n28 }\n29\n30 public static Day parse(String s) throws IllegalArgumentException {\n31 String[] shortWeekdayNames =\n32 dateSymbols.getShortWeekdays();\n33 String[] weekDayNames =\n34 dateSymbols.getWeekdays();\n35\n36 s = s.trim();\n37 for (Day day : Day.values()) {\n38 if (s.equalsIgnoreCase(shortWeekdayNames[day.index]) ||\n39 s.equalsIgnoreCase(weekDayNames[day.index])) {\n40 return day;\n41 }\n42 }\n43 throw new IllegalArgumentException(\n44 String.format("%s is not a valid weekday string", s));\n45 }\n46\n47 public String toString() {\n48 return dateSymbols.getWeekdays()[index];\n49 }\n50\n51 public int toInt() {\n52 return index;\n53 }\n54 }')]),e._v(" "),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 399")]),e._v(" "),n("p",[n("strong",[e._v("Listing B-10\nDateInterval.java (Final)")]),e._v("\n1 package org.jfree.date;\n2\n3 public enum DateInterval {\n4 OPEN {\n5 public boolean isIn(int d, int left, int right) {\n6 return d > left && d < right;\n7 }\n8 },\n9 CLOSED_LEFT {\n10 public boolean isIn(int d, int left, int right) {\n11 return d >= left && d < right;\n12 }\n13 },\n14 CLOSED_RIGHT {\n15 public boolean isIn(int d, int left, int right) {\n16 return d > left && d <= right;\n17 }\n18 },\n19 CLOSED {\n20 public boolean isIn(int d, int left, int right) {\n21 return d >= left && d <= right;\n22 }\n23 };\n24\n25 public abstract boolean isIn(int d, int left, int right);\n26 }")]),e._v(" "),n("p",[e._v("400 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[n("strong",[e._v("Listing B-11\nWeekInMonth.java (Final)")]),e._v("\n1 package org.jfree.date;\n2\n3 public enum WeekInMonth {\n4 FIRST(1), SECOND(2), THIRD(3), FOURTH(4), LAST(0);\n5 private final int index;\n6\n7 WeekInMonth(int index) {\n8 this.index = index;\n9 }\n10\n11 public int toInt() {\n12 return index;\n13 }\n14 }")]),e._v(" "),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 401")]),e._v(" "),n("p",[n("strong",[e._v("Listing B-12\nWeekdayRange.java (Final)")]),e._v("\n1 package org.jfree.date;\n2\n3 public enum WeekdayRange {\n4 LAST, NEAREST, NEXT\n5 }")]),e._v(" "),n("p",[e._v("402 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[n("strong",[e._v("Listing B-13\nDateUtil.java (Final)")]),e._v("\n1 package org.jfree.date;\n2\n3 import java.text.DateFormatSymbols;\n4\n5 public class DateUtil {\n6 private static DateFormatSymbols dateFormatSymbols = new DateFormatSymbols();\n7\n8 public static String[] getMonthNames() {\n9 return dateFormatSymbols.getMonths();\n10 }\n11\n12 public static boolean isLeapYear(int year) {\n13 boolean fourth = year % 4 == 0;\n14 boolean hundredth = year % 100 == 0;\n15 boolean fourHundredth = year % 400 == 0;\n16 return fourth && (!hundredth || fourHundredth);\n17 }\n18\n19 public static int lastDayOfMonth(Month month, int year) {\n20 if (month == Month.FEBRUARY && isLeapYear(year))\n21 return month.lastDay() + 1;\n22 else\n23 return month.lastDay();\n24 }\n25\n26 public static int leapYearCount(int year) {\n27 int leap4 = (year - 1896) / 4;\n28 int leap100 = (year - 1800) / 100;\n29 int leap400 = (year - 1600) / 400;\n30 return leap4 - leap100 + leap400;\n31 }\n32 }")]),e._v(" "),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 403")]),e._v(" "),n("p",[n("strong",[e._v("Listing B-14\nDayDateFactory.java (Final)")]),e._v("\n1 package org.jfree.date;\n2\n3 public abstract class DayDateFactory {\n4 private static DayDateFactory factory = new SpreadsheetDateFactory();\n5 public static void setInstance(DayDateFactory factory) {\n6 DayDateFactory.factory = factory;\n7 }\n8\n9 protected abstract DayDate _makeDate(int ordinal);\n10 protected abstract DayDate _makeDate(int day, Month month, int year);\n11 protected abstract DayDate _makeDate(int day, int month, int year);\n12 protected abstract DayDate _makeDate(java.util.Date date);\n13 protected abstract int _getMinimumYear();\n14 protected abstract int _getMaximumYear();\n15\n16 public static DayDate makeDate(int ordinal) {\n17 return factory._makeDate(ordinal);\n18 }\n19\n20 public static DayDate makeDate(int day, Month month, int year) {\n21 return factory._makeDate(day, month, year);\n22 }\n23\n24 public static DayDate makeDate(int day, int month, int year) {\n25 return factory._makeDate(day, month, year);\n26 }\n27\n28 public static DayDate makeDate(java.util.Date date) {\n29 return factory._makeDate(date);\n30 }\n31\n32 public static int getMinimumYear() {\n33 return factory._getMinimumYear();\n34 }\n35\n36 public static int getMaximumYear() {\n37 return factory._getMaximumYear();\n38 }\n39 }")]),e._v(" "),n("p",[e._v("404 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[n("strong",[e._v("Listing B-15\nSpreadsheetDateFactory.java (Final)")]),e._v("\n1 package org.jfree.date;\n2\n3 import java.util.*;\n4\n5 public class SpreadsheetDateFactory extends DayDateFactory {\n6 public DayDate _makeDate(int ordinal) {\n7 return new SpreadsheetDate(ordinal);\n8 }\n9\n10 public DayDate _makeDate(int day, Month month, int year) {\n11 return new SpreadsheetDate(day, month, year);\n12 }\n13\n14 public DayDate _makeDate(int day, int month, int year) {\n15 return new SpreadsheetDate(day, month, year);\n16 }\n17\n18 public DayDate _makeDate(Date date) {\n19 final GregorianCalendar calendar = new GregorianCalendar();\n20 calendar.setTime(date);\n21 return new SpreadsheetDate(\n22 calendar.get(Calendar.DATE),\n23 Month.fromInt(calendar.get(Calendar.MONTH) + 1),\n24 calendar.get(Calendar.YEAR));\n25 }\n26\n27 protected int _getMinimumYear() {\n28 return SpreadsheetDate.MINIMUM_YEAR_SUPPORTED;\n29 }\n30\n31 protected int _getMaximumYear() {\n32 return SpreadsheetDate.MAXIMUM_YEAR_SUPPORTED;\n33 }\n34 }")]),e._v(" "),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 405")]),e._v(" "),n("p",[n("strong",[e._v("Listing B-16\nSpreadsheetDate.java (Final)")]),e._v("\n1 /* ========================================================================\n2 * JCommon : a free general purpose class library for the Java(tm) platform\n3 * ========================================================================\n4 *\n5 * (C) Copyright 2000-2005, by Object Refinery Limited and Contributors.\n6 *\n...\n52 *\n53 "),n("em",[e._v("/\n54\n55 package org.jfree.date;\n56\n57 import static org.jfree.date.Month.FEBRUARY;\n58\n59 import java.util.")]),e._v(";\n60\n61 /**\n62 * Represents a date using an integer, in a similar fashion to the\n63 * implementation in Microsoft Excel. The range of dates supported is\n64 * 1-Jan-1900 to 31-Dec-9999.\n65 * ")]),n("p"),e._v("\n66 * Be aware that there is a deliberate bug in Excel that recognises the year\n67 * 1900 as a leap year when in fact it is not a leap year. You can find more\n68 * information on the Microsoft website in article Q181370:\n69 * "),n("p"),e._v("\n70 * "),n("a",{attrs:{href:"http://support.microsoft.com/support/kb/articles/Q181/3/70.asp",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://support.microsoft.com/support/kb/articles/Q181/3/70.asp"),n("OutboundLink")],1),e._v("\n71 * "),n("p"),e._v('\n72 * Excel uses the convention that 1-Jan-1900 = 1. This class uses the\n73 * convention 1-Jan-1900 = 2.\n74 * The result is that the day number in this class will be different to the\n75 * Excel figure for January and February 1900...but then Excel adds in an extra\n76 * day (29-Feb-1900 which does not actually exist!) and from that point forward\n77 * the day numbers will match.\n78 *\n79 * @author David Gilbert\n80 */\n81 public class SpreadsheetDate extends DayDate {\n82 public static final int EARLIEST_DATE_ORDINAL = 2; // 1/1/1900\n83 public static final int LATEST_DATE_ORDINAL = 2958465; // 12/31/9999\n84 public static final int MINIMUM_YEAR_SUPPORTED = 1900;\n85 public static final int MAXIMUM_YEAR_SUPPORTED = 9999;\n86 static final int[] AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH =\n87 {0, 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365};\n88 static final int[] LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH =\n89 {0, 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366};\n90\n91 private int ordinalDay;\n92 private int day;\n93 private Month month;\n94 private int year;\n95\n96 public SpreadsheetDate(int day, Month month, int year) {\n97 if (year < MINIMUM_YEAR_SUPPORTED || year > MAXIMUM_YEAR_SUPPORTED)\n98 throw new IllegalArgumentException(\n99 "The \'year\' argument must be in range " +\n100 MINIMUM_YEAR_SUPPORTED + " to " + MAXIMUM_YEAR_SUPPORTED + ".");\n101 if (day < 1 || day > DateUtil.lastDayOfMonth(month, year))\n102 throw new IllegalArgumentException("Invalid \'day\' argument.");\n103\n104 this.year = year;\n105 this.month = month;')],1),e._v(" "),n("p",[e._v("406 "),n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")])]),e._v(" "),n("p",[e._v('106 this.day = day;\n107 ordinalDay = calcOrdinal(day, month, year);\n108 }\n109\n110 public SpreadsheetDate(int day, int month, int year) {\n111 this(day, Month.fromInt(month), year);\n112 }\n113\n114 public SpreadsheetDate(int serial) {\n115 if (serial < EARLIEST_DATE_ORDINAL || serial > LATEST_DATE_ORDINAL)\n116 throw new IllegalArgumentException(\n117 "SpreadsheetDate: Serial must be in range 2 to 2958465.");\n118\n119 ordinalDay = serial;\n120 calcDayMonthYear();\n121 }\n122\n123 public int getOrdinalDay() {\n124 return ordinalDay;\n125 }\n126\n127 public int getYear() {\n128 return year;\n129 }\n130\n131 public Month getMonth() {\n132 return month;\n133 }\n134\n135 public int getDayOfMonth() {\n136 return day;\n137 }\n138\n139 protected Day getDayOfWeekForOrdinalZero() {return Day.SATURDAY;}\n140\n141 public boolean equals(Object object) {\n142 if (!(object instanceof DayDate))\n143 return false;\n144\n145 DayDate date = (DayDate) object;\n146 return date.getOrdinalDay() == getOrdinalDay();\n147 }\n148\n149 public int hashCode() {\n150 return getOrdinalDay();\n151 }\n152\n153 public int compareTo(Object other) {\n154 return daysSince((DayDate) other);\n155 }\n156\n157 private int calcOrdinal(int day, Month month, int year) {\n158 int leapDaysForYear = DateUtil.leapYearCount(year - 1);\n159 int daysUpToYear = (year - MINIMUM_YEAR_SUPPORTED) * 365 + leapDaysForYear;\n160 int daysUpToMonth = AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH[month.toInt()];\n161 if (DateUtil.isLeapYear(year) && month.toInt() > FEBRUARY.toInt())\n162 daysUpToMonth++;\n163 int daysInMonth = day - 1;\n164 return daysUpToYear + daysUpToMonth + daysInMonth + EARLIEST_DATE_ORDINAL;\n165 }\n166')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-16 (continued)\nSpreadsheetDate.java (Final)\n")])])]),n("p",[n("strong",[e._v("Appendix B: org.jfree.date.SerialDate")]),e._v(" 407")]),e._v(" "),n("p",[e._v("167 private void calcDayMonthYear() {\n168 int days = ordinalDay - EARLIEST_DATE_ORDINAL;\n169 int overestimatedYear = MINIMUM_YEAR_SUPPORTED + days / 365;\n170 int nonleapdays = days - DateUtil.leapYearCount(overestimatedYear);\n171 int underestimatedYear = MINIMUM_YEAR_SUPPORTED + nonleapdays / 365;\n172\n173 year = huntForYearContaining(ordinalDay, underestimatedYear);\n174 int firstOrdinalOfYear = firstOrdinalOfYear(year);\n175 month = huntForMonthContaining(ordinalDay, firstOrdinalOfYear);\n176 day = ordinalDay - firstOrdinalOfYear - daysBeforeThisMonth(month.toInt());\n177 }\n178\n179 private Month huntForMonthContaining(int anOrdinal, int firstOrdinalOfYear) {\n180 int daysIntoThisYear = anOrdinal - firstOrdinalOfYear;\n181 int aMonth = 1;\n182 while (daysBeforeThisMonth(aMonth) < daysIntoThisYear)\n183 aMonth++;\n184\n185 return Month.fromInt(aMonth - 1);\n186 }\n187\n188 private int daysBeforeThisMonth(int aMonth) {\n189 if (DateUtil.isLeapYear(year))\n190 return LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH[aMonth] - 1;\n191 else\n192 return AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH[aMonth] - 1;\n193 }\n194\n195 private int huntForYearContaining(int anOrdinalDay, int startingYear) {\n196 int aYear = startingYear;\n197 while (firstOrdinalOfYear(aYear) <= anOrdinalDay)\n198 aYear++;\n199\n200 return aYear - 1;\n201 }\n202\n203 private int firstOrdinalOfYear(int year) {\n204 return calcOrdinal(1, Month.JANUARY, year);\n205 }\n206\n207 public static DayDate createInstance(Date date) {\n208 GregorianCalendar calendar = new GregorianCalendar();\n209 calendar.setTime(date);\n210 return new SpreadsheetDate(calendar.get(Calendar.DATE),\n211 Month.fromInt(calendar.get(Calendar.MONTH) + 1),\n212 calendar.get(Calendar.YEAR));\n213\n214 }\n215 }")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Listing B-16 (continued)\nSpreadsheetDate.java (Final)\n")])])])],1)],1)],1)],1)],1)],1)],1)],1)],1)])}),[],!1,null,null,null);t.default=r.exports}}]);