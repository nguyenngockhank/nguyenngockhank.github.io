(window.webpackJsonp=window.webpackJsonp||[]).push([[250],{817:function(e,t,a){"use strict";a.r(t);var s=a(7),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"_6-objects-and-data-structures"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-objects-and-data-structures"}},[e._v("#")]),e._v(" 6. Objects and Data Structures")]),e._v(" "),a("p",[e._v("There is a reason that we keep our variables private. We don’t want anyone else to depend\non them. We want to keep the freedom to change their type or implementation on a whim\nor an impulse. Why, then, do so many programmers automatically add getters and setters\nto their objects, exposing their private variables as if they were public?")]),e._v(" "),a("h2",{attrs:{id:"data-abstraction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-abstraction"}},[e._v("#")]),e._v(" Data Abstraction ..")]),e._v(" "),a("p",[e._v("Consider the difference between Listing 6-1 and Listing 6-2. Both represent the data of a\npoint on the Cartesian plane. And yet one exposes its implementation and the other com-\npletely hides it.")]),e._v(" "),a("p",[e._v("94 "),a("strong",[e._v("Chapter 6: Objects and Data Structures")])]),e._v(" "),a("p",[e._v("The beautiful thing about Listing 6-2 is that there is no way you can tell whether the\nimplementation is in rectangular or polar coordinates. It might be neither! And yet the\ninterface still unmistakably represents a data structure.")]),e._v(" "),a("p",[e._v("But it represents more than just a data structure. The methods enforce an access\npolicy. You can read the individual coordinates independently, but you must set the coordi-\nnates together as an atomic operation.")]),e._v(" "),a("p",[e._v("Listing 6-1, on the other hand, is very clearly implemented in rectangular coordinates,\nand it forces us to manipulate those coordinates independently. This exposes implementa-\ntion. Indeed, it would expose implementation even if the variables were private and we\nwere using single variable getters and setters.")]),e._v(" "),a("p",[e._v("Hiding implementation is not just a matter of putting a layer of functions between\nthe variables. Hiding implementation is about abstractions! A class does not simply\npush its variables out through getters and setters. Rather it exposes abstract interfaces\nthat allow its users to manipulate the "),a("em",[e._v("essence")]),e._v(" of the data, without having to know its\nimplementation.")]),e._v(" "),a("p",[e._v("Consider Listing 6-3 and Listing 6-4. The first uses concrete terms to communicate\nthe fuel level of a vehicle, whereas the second does so with the abstraction of percentage.\nIn the concrete case you can be pretty sure that these are just accessors of variables. In the\nabstract case you have no clue at all about the form of the data.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Listing 6-1\nConcrete Point\npublic class Point {\npublic double x;\npublic double y;\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Listing 6-2\nAbstract Point\npublic interface Point {\ndouble getX();\ndouble getY();\nvoid setCartesian(double x, double y);\ndouble getR();\ndouble getTheta();\nvoid setPolar(double r, double theta);\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Listing 6-3\nConcrete Vehicle\npublic interface Vehicle {\ndouble getFuelTankCapacityInGallons();\ndouble getGallonsOfGasoline();\n}\n")])])]),a("p",[a("strong",[e._v("Data/Object Anti-Symmetry")]),e._v(" 95")]),e._v(" "),a("p",[e._v("In both of the above cases the second option is preferable. We do not want to expose\nthe details of our data. Rather we want to express our data in abstract terms. This is not\nmerely accomplished by using interfaces and/or getters and setters. Serious thought needs\nto be put into the best way to represent the data that an object contains. The worst option is\nto blithely add getters and setters.")]),e._v(" "),a("h2",{attrs:{id:"data-object-anti-symmetry"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-object-anti-symmetry"}},[e._v("#")]),e._v(" Data/Object Anti-Symmetry ..")]),e._v(" "),a("p",[e._v("These two examples show the difference between objects and data structures. Objects hide\ntheir data behind abstractions and expose functions that operate on that data. Data struc-\nture expose their data and have no meaningful functions. Go back and read that again.\nNotice the complimentary nature of the two definitions. They are virtual opposites. This\ndifference may seem trivial, but it has far-reaching implications.")]),e._v(" "),a("p",[e._v("Consider, for example, the procedural shape example in Listing 6-5. The Geometry\nclass operates on the three shape classes. The shape classes are simple data structures\nwithout any behavior. All the behavior is in the Geometry class.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Listing 6-4\nAbstract Vehicle\npublic interface Vehicle {\ndouble getPercentFuelRemaining();\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Listing 6-5\nProcedural Shape\npublic class Square {\npublic Point topLeft;\npublic double side;\n}\npublic class Rectangle {\npublic Point topLeft;\npublic double height;\npublic double width;\n}\npublic class Circle {\npublic Point center;\npublic double radius;\n}\npublic class Geometry {\npublic final double PI = 3.141592653589793;\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public double area(Object shape) throws NoSuchShapeException\n{\nif (shape instanceof Square) {\nSquare s = (Square)shape;\nreturn s.side * s.side;\n}\n")])])]),a("p",[e._v("96 "),a("strong",[e._v("Chapter 6: Objects and Data Structures")])]),e._v(" "),a("p",[e._v("Object-oriented programmers might wrinkle their noses at this and complain that it\nis procedural—and they’d be right. But the sneer may not be warranted. Consider what\nwould happen if a perimeter() function were added to Geometry. The shape classes would\nbe unaffected! Any other classes that depended upon the shapes would also be unaffected!\nOn the other hand, if I add a new shape, I must change all the functions in Geometryto\ndeal with it. Again, read that over. Notice that the two conditions are diametrically\nopposed.")]),e._v(" "),a("p",[e._v("Now consider the object-oriented solution in Listing 6-6. Here the area()method is\npolymorphic. No Geometry class is necessary. So if I add a new shape, none of the existing\n"),a("em",[e._v("functions")]),e._v(" are affected, but if I add a new function all of the "),a("em",[e._v("shapes")]),e._v(" must be changed!^1")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("else if (shape instanceof Rectangle) {\nRectangle r = (Rectangle)shape;\nreturn r.height * r.width;\n}\nelse if (shape instanceof Circle) {\nCircle c = (Circle)shape;\nreturn PI * c.radius * c.radius;\n}\nthrow new NoSuchShapeException();\n}\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Listing 6-6\nPolymorphic Shapes\npublic class Square implements Shape {\nprivate Point topLeft;\nprivate double side;\npublic double area() {\nreturn side*side;\n}\n}\npublic class Rectangle implements Shape {\nprivate Point topLeft;\nprivate double height;\nprivate double width;\npublic double area() {\nreturn height * width;\n}\n}\n")])])]),a("ol",[a("li",[e._v("There are ways around this that are well known to experienced object-oriented designers: VISITOR, or dual-dispatch, for\nexample. But these techniques carry costs of their own and generally return the structure to that of a procedural program.")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Listing 6-5 (continued)\nProcedural Shape\n")])])]),a("p",[a("strong",[e._v("The Law of Demeter")]),e._v(" 97")]),e._v(" "),a("p",[e._v("Again, we see the complimentary nature of these two definitions; they are virtual\nopposites! This exposes the fundamental dichotomy between objects and data structures:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Procedural code (code using data structures) makes it easy to add new functions without\nchanging the existing data structures. OO code, on the other hand, makes it easy to add\nnew classes without changing existing functions.\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("The complement is also true:\nProcedural code makes it hard to add new data structures because all the functions must\nchange. OO code makes it hard to add new functions because all the classes must change.\n")])])]),a("p",[e._v("So, the things that are hard for OO are easy for procedures, and the things that are\nhard for procedures are easy for OO!")]),e._v(" "),a("p",[e._v("In any complex system there are going to be times when we want to add new data\ntypes rather than new functions. For these cases objects and OO are most appropriate. On\nthe other hand, there will also be times when we’ll want to add new functions as opposed\nto data types. In that case procedural code and data structures will be more appropriate.")]),e._v(" "),a("p",[e._v("Mature programmers know that the idea that everything is an object "),a("em",[e._v("is a myth")]),e._v(". Some-\ntimes you really "),a("em",[e._v("do")]),e._v(" want simple data structures with procedures operating on them.")]),e._v(" "),a("h2",{attrs:{id:"the-law-of-demeter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-law-of-demeter"}},[e._v("#")]),e._v(" The Law of Demeter")]),e._v(" "),a("p",[e._v("There is a well-known heuristic called the "),a("em",[e._v("Law of Demeter")]),e._v("^2 that says a module should not\nknow about the innards of the "),a("em",[e._v("objects")]),e._v(" it manipulates. As we saw in the last section, objects\nhide their data and expose operations. This means that an object should not expose its\ninternal structure through accessors because to do so is to expose, rather than to hide, its\ninternal structure.")]),e._v(" "),a("p",[e._v("More precisely, the Law of Demeter says that a method "),a("em",[e._v("f")]),e._v(" of a class "),a("em",[e._v("C")]),e._v(" should only call\nthe methods of these:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("•C\n")])])]),a("ul",[a("li",[e._v("An object created by "),a("em",[e._v("f")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public class Circle implements Shape {\nprivate Point center;\nprivate double radius;\npublic final double PI = 3.141592653589793;\npublic double area() {\nreturn PI * radius * radius;\n}\n}\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[a("a",{attrs:{href:"http://en.wikipedia.org/wiki/Law_of_Demeter",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://en.wikipedia.org/wiki/Law_of_Demeter"),a("OutboundLink")],1)])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Listing 6-6 (continued)\nPolymorphic Shapes\n")])])]),a("p",[e._v("98 "),a("strong",[e._v("Chapter 6: Objects and Data Structures")])]),e._v(" "),a("ul",[a("li",[e._v("An object passed as an argument to "),a("em",[e._v("f")])]),e._v(" "),a("li",[e._v("An object held in an instance variable of "),a("em",[e._v("C")])])]),e._v(" "),a("p",[e._v("The method should "),a("em",[e._v("not")]),e._v(" invoke methods on objects that are returned by any of the\nallowed functions. In other words, talk to friends, not to strangers.")]),e._v(" "),a("p",[e._v("The following code^3 appears to violate the Law of Demeter (among other things)\nbecause it calls the getScratchDir()function on the return value of getOptions()and then\ncallsgetAbsolutePath() on the return value of getScratchDir().")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("final String outputDir = ctxt.getOptions().getScratchDir().getAbsolutePath();\n")])])]),a("h3",{attrs:{id:"train-wrecks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#train-wrecks"}},[e._v("#")]),e._v(" Train Wrecks")]),e._v(" "),a("p",[e._v("This kind of code is often called a "),a("em",[e._v("train wreck")]),e._v(" because it look like a bunch of coupled train\ncars. Chains of calls like this are generally considered to be sloppy style and should be\navoided [G36]. It is usually best to split them up as follows:")]),e._v(" "),a("p",[e._v("Options opts = ctxt.getOptions();\nFile scratchDir = opts.getScratchDir();\nfinal String outputDir = scratchDir.getAbsolutePath();\nAre these two snippets of code viola-\ntions of the Law of Demeter? Certainly\nthe containing module knows that the\nctxtobject contains options, which con-\ntain a scratch directory, which has an\nabsolute path. That’s a lot of knowledge\nfor one function to know. The calling\nfunction knows how to navigate through\na lot of different objects.")]),e._v(" "),a("p",[e._v("Whether this is a violation of Demeter depends on whether or not ctxt,Options, and\nScratchDirare objects or data structures. If they are objects, then their internal structure\nshould be hidden rather than exposed, and so knowledge of their innards is a clear viola-\ntion of the Law of Demeter. On the other hand, if ctxt,Options, and ScratchDirare just\ndata structures with no behavior, then they naturally expose their internal structure, and so\nDemeter does not apply.")]),e._v(" "),a("p",[e._v("The use of accessor functions confuses the issue. If the code had been written as fol-\nlows, then we probably wouldn’t be asking about Demeter violations.")]),e._v(" "),a("p",[e._v("final String outputDir = ctxt.options.scratchDir.absolutePath;\nThis issue would be a lot less confusing if data structures simply had public variables\nand no functions, whereas objects had private variables and public functions. However,")]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[e._v("Found somewhere in the apache framework.")])]),e._v(" "),a("p",[a("strong",[e._v("The Law of Demeter")]),e._v(" 99")]),e._v(" "),a("p",[e._v("there are frameworks and standards (e.g., “beans”) that demand that even simple data\nstructures have accessors and mutators.")]),e._v(" "),a("h3",{attrs:{id:"hybrids"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hybrids"}},[e._v("#")]),e._v(" Hybrids .")]),e._v(" "),a("p",[e._v("This confusion sometimes leads to unfortunate hybrid structures that are half object and\nhalf data structure. They have functions that do significant things, and they also have either\npublic variables or public accessors and mutators that, for all intents and purposes, make\nthe private variables public, tempting other external functions to use those variables the\nway a procedural program would use a data structure.^4")]),e._v(" "),a("p",[e._v("Such hybrids make it hard to add new functions but also make it hard to add new data\nstructures. They are the worst of both worlds. Avoid creating them. They are indicative of a\nmuddled design whose authors are unsure of—or worse, ignorant of—whether they need\nprotection from functions or types.")]),e._v(" "),a("h3",{attrs:{id:"hiding-structure"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hiding-structure"}},[e._v("#")]),e._v(" Hiding Structure ...")]),e._v(" "),a("p",[e._v("What if ctxt,options, and scratchDirare objects with real behavior? Then, because\nobjects are supposed to hide their internal structure, we should not be able to navigate\nthrough them. How then would we get the absolute path of the scratch directory?")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ctxt.getAbsolutePathOfScratchDirectoryOption();\n")])])]),a("p",[e._v("or")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ctx.getScratchDirectoryOption().getAbsolutePath()\n")])])]),a("p",[e._v("The first option could lead to an explosion of methods in the ctxt object. The second pre-\nsumes that getScratchDirectoryOption()returns a data structure, not an object. Neither\noption feels good.")]),e._v(" "),a("p",[e._v("Ifctxtis an object, we should be telling it to "),a("em",[e._v("do something;")]),e._v(" we should not be asking it\nabout its internals. So why did we want the absolute path of the scratch directory? What\nwere we going to do with it? Consider this code from (many lines farther down in) the\nsame module:")]),e._v(" "),a("p",[e._v("String outFile = outputDir + \"/\" + className.replace('.', '/') + \".class\";\nFileOutputStream fout = new FileOutputStream(outFile);\nBufferedOutputStream bos = new BufferedOutputStream(fout);\nThe admixture of different levels of detail [G34][G6] is a bit troubling. Dots, slashes,\nfile extensions, and Fileobjects should not be so carelessly mixed together, and mixed\nwith the enclosing code. Ignoring that, however, we see that the intent of getting the abso-\nlute path of the scratch directory was to create a scratch file of a given name.")]),e._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[e._v("This is sometimes called Feature Envy from [Refactoring].")])]),e._v(" "),a("p",[e._v("100 "),a("strong",[e._v("Chapter 6: Objects and Data Structures")])]),e._v(" "),a("p",[e._v("So, what if we told the ctxt object to do this?\nBufferedOutputStream bos = ctxt.createScratchFileStream(classFileName);\nThat seems like a reasonable thing for an object to do! This allows ctxtto hide its\ninternals and prevents the current function from having to violate the Law of Demeter by\nnavigating through objects it shouldn’t know about.")]),e._v(" "),a("h2",{attrs:{id:"data-transfer-objects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-transfer-objects"}},[e._v("#")]),e._v(" Data Transfer Objects ...")]),e._v(" "),a("p",[e._v("The quintessential form of a data structure is a class with public variables and no func-\ntions. This is sometimes called a data transfer object, or DTO. DTOs are very useful struc-\ntures, especially when communicating with databases or parsing messages from sockets,\nand so on. They often become the first in a series of translation stages that convert raw data\nin a database into objects in the application code.")]),e._v(" "),a("p",[e._v("Somewhat more common is the “bean” form shown in Listing 6-7. Beans have private\nvariables manipulated by getters and setters. The quasi-encapsulation of beans seems to\nmake some OO purists feel better but usually provides no other benefit.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Listing 6-7\naddress.java\npublic class Address {\nprivate String street;\nprivate String streetExtra;\nprivate String city;\nprivate String state;\nprivate String zip;\npublic Address(String street, String streetExtra,\nString city, String state, String zip) {\nthis.street = street;\nthis.streetExtra = streetExtra;\nthis.city = city;\nthis.state = state;\nthis.zip = zip;\n}\npublic String getStreet() {\nreturn street;\n}\npublic String getStreetExtra() {\nreturn streetExtra;\n}\npublic String getCity() {\nreturn city;\n}\n")])])]),a("p",[a("strong",[e._v("Bibliography")]),e._v(" 101")]),e._v(" "),a("h3",{attrs:{id:"active-record"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#active-record"}},[e._v("#")]),e._v(" Active Record .")]),e._v(" "),a("p",[e._v("Active Records are special forms of DTOs. They are data structures with public (or bean-\naccessed) variables; but they typically have navigational methods like save and find. Typi-\ncally these Active Records are direct translations from database tables, or other data\nsources.")]),e._v(" "),a("p",[e._v("Unfortunately we often find that developers try to treat these data structures as though\nthey were objects by putting business rule methods in them. This is awkward because it\ncreates a hybrid between a data structure and an object.")]),e._v(" "),a("p",[e._v("The solution, of course, is to treat the Active Record as a data structure and to create\nseparate objects that contain the business rules and that hide their internal data (which are\nprobably just instances of the Active Record).")]),e._v(" "),a("h2",{attrs:{id:"conclusion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[e._v("#")]),e._v(" Conclusion ..")]),e._v(" "),a("p",[e._v("Objects expose behavior and hide data. This makes it easy to add new kinds of objects\nwithout changing existing behaviors. It also makes it hard to add new behaviors to existing\nobjects. Data structures expose data and have no significant behavior. This makes it easy to\nadd new behaviors to existing data structures but makes it hard to add new data structures\nto existing functions.")]),e._v(" "),a("p",[e._v("In any given system we will sometimes want the flexibility to add new data types, and\nso we prefer objects for that part of the system. Other times we will want the flexibility to\nadd new behaviors, and so in that part of the system we prefer data types and procedures.\nGood software developers understand these issues without prejudice and choose the\napproach that is best for the job at hand.")]),e._v(" "),a("h2",{attrs:{id:"bibliography"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bibliography"}},[e._v("#")]),e._v(" Bibliography ...")]),e._v(" "),a("p",[a("strong",[e._v("[Refactoring]:")]),e._v(" "),a("em",[e._v("Refactoring: Improving the Design of Existing Code")]),e._v(" , Martin Fowler et al.,\nAddison-Wesley, 1999.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public String getState() {\nreturn state;\n}\npublic String getZip() {\nreturn zip;\n}\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Listing 6-7 (continued)\naddress.java\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);