(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{543:function(e,t,a){e.exports=a.p+"assets/img/image--081.3e82ce45.jpg"},909:function(e,t,a){"use strict";a.r(t);var o=a(7),n=Object(o.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"_10-conway-s-law-and-system-design"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_10-conway-s-law-and-system-design"}},[e._v("#")]),e._v(" 10. Conway’s Law and System Design")]),e._v(" "),o("p",[e._v("Much of the book so far has focused on the technical challenges in moving toward a fine-\ngrained architecture. But there are other, organizational issues to consider as well. As\nwe’ll learn in this chapter, you ignore your company’s organization chart at your peril!")]),e._v(" "),o("p",[e._v("Our industry is young, and seems to be constantly reinventing itself. And yet a few key\n"),o("em",[e._v("laws")]),e._v("  have stood the test of time. Moore’s law, for example, which states that the density of\ntransistors on integrated circuits doubles every two years, has proved to be uncannily\naccurate (although some people predict that this trend is already slowing). One law that I\nhave found to be almost universally true, and far more useful in my day-to-day work, is\nConway’s law.")]),e._v(" "),o("p",[e._v("Melvin Conway’s paper  "),o("em",[e._v("How Do Committees Invent")]),e._v(" , published in  "),o("em",[e._v("Datamation")]),e._v("  magazine\nin April 1968, observed that:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("Any organization that designs a system (defined more broadly here than just\ninformation systems) will inevitably produce a design whose structure is a copy of the\norganization’s communication structure.\n")])])]),o("p",[e._v("This statement is often quoted, in various forms, as Conway’s law. Eric S. Raymond\nsummarized this phenomenon in  "),o("em",[e._v("The New Hacker’s Dictionary")]),e._v("  (MIT Press) by stating “If\nyou have four groups working on a compiler, you’ll get a 4-pass compiler.”")]),e._v(" "),o("h2",{attrs:{id:"evidence"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#evidence"}},[e._v("#")]),e._v(" Evidence")]),e._v(" "),o("p",[e._v("The story goes that when Melvin Conway submitted his paper on this topic to the Harvard\nBusiness Review, they rejected it, claiming he hadn’t proved his thesis. I’ve seen this\ntheory borne out in so many different situations that I’ve accepted it as true. But you don’t\nhave to take my word for it: since Conway’s original submission, a lot of work has been\ndone in this area. A number of studies have been carried out to explore the interrelation of\norganizational structure and the systems they create.")]),e._v(" "),o("h2",{attrs:{id:"loose-and-tightly-coupled-organizations"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#loose-and-tightly-coupled-organizations"}},[e._v("#")]),e._v(" Loose and Tightly Coupled Organizations")]),e._v(" "),o("p",[e._v("In  "),o("em",[e._v("Exploring the Duality Between Product and Organizational Architectures")]),e._v("  (Harvard\nBusiness School), the authors Alan MacCormack, John Rusnak, and Carliss Baldwin look\nat a number of different software systems, loosely categorized as being created either by\n"),o("em",[e._v("loosely coupled organizations")]),e._v("  or  "),o("em",[e._v("tightly coupled organizations")]),e._v(" . For tightly coupled\norganizations, think commercial product firms that are typically colocated with strongly\naligned visions and goals, while loosely coupled organizations are well represented by\ndistributed open source communities.")]),e._v(" "),o("p",[e._v("In their study, in which they matched similar product pairs from each type of organization,\nthe authors found that the more loosely coupled organizations actually created more\nmodular, less coupled systems, whereas the more tightly focused organization’s software\nwas less modularized.")]),e._v(" "),o("h2",{attrs:{id:"windows-vista"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#windows-vista"}},[e._v("#")]),e._v(" Windows Vista")]),e._v(" "),o("p",[e._v("Microsoft carried out an empirical study where it looked at how its own organizational\nstructure impacted the software quality of a specific product, Windows Vista. Specifically,\nthe researchers looked at multiple factors to determine how error-prone a component in\nthe system would be.^4  After looking at multiple metrics, including commonly used\nsoftware quality metrics like code complexity, they found that the metrics associated with\norganizational structures proved to be the most statistically relevant measures.")]),e._v(" "),o("p",[e._v("So here we have another example of the organizational structure impacting the nature of\nthe system that organization creates.")]),e._v(" "),o("h2",{attrs:{id:"netflix-and-amazon"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#netflix-and-amazon"}},[e._v("#")]),e._v(" Netflix and Amazon")]),e._v(" "),o("p",[e._v("Probably the two poster children for the idea that organizations and architecture should be\naligned are Amazon and Netflix. Early on, Amazon started to understand the benefits of\nteams owning the whole lifecycle of the systems they managed. It wanted teams to own\nand operate the systems they looked after, managing the entire lifecycle. But Amazon also\nknew that small teams can work faster than large teams. This led famously to its  "),o("em",[e._v("two-pizza\nteams")]),e._v(" , where no team should be so big that it could not be fed with two pizzas. This driver\nfor small teams owning the whole lifecycle of their services is a major reason why\nAmazon developed Amazon Web Services. It needed to create the tooling to allow its\nteams to be self-sufficient.")]),e._v(" "),o("p",[e._v("Netflix learned from this example, and ensured that from the beginning it structured itself\naround small, independent teams, so that the services they created would also be\nindependent from each other. This ensured that the architecture of the system was\noptimized for speed of change. Effectively, Netflix designed the organizational structure\nfor the system architecture it wanted.")]),e._v(" "),o("h2",{attrs:{id:"what-can-we-do-with-this"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#what-can-we-do-with-this"}},[e._v("#")]),e._v(" What Can We Do with This?")]),e._v(" "),o("p",[e._v("So evidence, anecdotal and empirical, points to our organizational structure being a strong\ninfluence on the nature (and quality) of the systems we provide. So how does this\nunderstanding help us? Let’s look at a few different organizational situations and\nunderstand what impact each might have on our system design.")]),e._v(" "),o("h2",{attrs:{id:"adapting-to-communication-pathways"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#adapting-to-communication-pathways"}},[e._v("#")]),e._v(" Adapting to Communication Pathways")]),e._v(" "),o("p",[e._v("Let’s first consider a simple, single team. It’s in charge of all aspects of the system design\nand implementation. It can have frequent, fine-grained communication. Imagine that this\nteam is in charge of a single service — say, our music shop’s catalog service. Now\nconsider the inside of a service: lots of fine-grained method or function calls. As we’ve\ndiscussed before, we aim to ensure our services are decomposed such that the pace of\nchange inside a service is much higher than the pace of change between services. This\nsingle team, with its ability for fine-grained communication, matches nicely with the\ncommunication pathways of the code within the service.")]),e._v(" "),o("p",[e._v("This single team finds it easy to communicate about proposed changes and refactorings,\nand typically has a good sense of ownership.")]),e._v(" "),o("p",[e._v("Now let’s imagine a different scenario. Instead of a single, geolocated team owning our\ncatalog service, suppose that teams in the UK and India both are actively involved in\nchanging a service — effectively having joint ownership of the service. Geographical and\ntime zone boundaries here make fine-grained communication between those teams\ndifficult. Instead, they rely on more coarse-grained communication via video conferencing\nand email. How easy is it for a team member in the UK to make a simple refactoring with\nconfidence? The cost of communications in a geographically distributed team is higher,\nand therefore the cost of coordinating changes is higher.")]),e._v(" "),o("p",[e._v("When the cost of coordinating change increases, one of two things happen. Either people\nfind ways to reduce the coordination/communication costs, or they stop making changes.\nThe latter is exactly how we end up with large, hard-to-maintain codebases.")]),e._v(" "),o("p",[e._v("I recall one client project I worked on where ownership of a single service was shared\nbetween two geographical locations. Eventually, each site started specializing what work it\nhandled. This allowed it to take ownership of part of the codebase, within which it could\nhave an easier cost of change. The teams then had more coarse-grained communication\nabout how the two parts interrelated; effectively, the communication pathways made\npossible within the organizational structure matched the coarse-grained API that formed\nthe boundary between the two halves of the codebase.")]),e._v(" "),o("p",[e._v("So where does this leave us when considering evolving our own service design? Well, I\nwould suggest that geographical boundaries between people involved with the\ndevelopment of a system can be a great way to drive when services should be\ndecomposed, and that in general, you should look to assign ownership of a service to a\nsingle, colocated team who can keep the cost of change low.")]),e._v(" "),o("p",[e._v("Perhaps your organization decides that it wants to increase the number of people working\non your project by opening up an office in another country. At this point, think actively\nabout what parts of your system can be moved over. Perhaps this is what drives your\ndecisions about what seams to split out next.")]),e._v(" "),o("p",[e._v("It is also worth noting at this point that, at least based on the observations of the authors of\nthe  "),o("em",[e._v("Exploring the Duality Between Product and Organizational Architectures")]),e._v("  report\npreviously referenced, if the organization building the system is more loosely coupled\n(e.g., consisting of geographically distributed teams), the systems being built tend toward\nthe more modular, and therefore hopefully less coupled. The tendency of a single team\nthat owns many services to lean toward tighter integration is very hard to maintain in a\nmore distributed organization.")]),e._v(" "),o("h2",{attrs:{id:"service-ownership"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#service-ownership"}},[e._v("#")]),e._v(" Service Ownership")]),e._v(" "),o("p",[e._v("What do I mean by  "),o("em",[e._v("service ownership")]),e._v(" ? In general, it means that the team owning a service\nis responsible for making changes to that service. The team should feel free to restructure\nthe code however it wants, as long as that change doesn’t break consuming services. For\nmany teams,  "),o("em",[e._v("ownership")]),e._v("  extends to all aspects of the service, from sourcing requirements\nto building, deploying, and maintaining the application. This model is especially prevalent\nwith microservices, where it is easier for a small team to own a small service. This\nincreased level of ownership leads to increased autonomy and speed of delivery. Having\none team responsible for deploying and maintaining the application means it has an\nincentive to create services that are  "),o("em",[e._v("easy")]),e._v("  to deploy; that is, concerns about “throwing\nsomething over the wall” dissipate when there is no one to throw it to!")]),e._v(" "),o("p",[e._v("This model is certainly one I favor. It pushes the decisions to the people best able to make\nthem, giving the team both increased power and autonomy, but also making it accountable\nfor its work. I’ve seen far too many developers hand their system over for testing or\ndeployment phases and think that their work is done at that point.")]),e._v(" "),o("h2",{attrs:{id:"drivers-for-shared-services"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#drivers-for-shared-services"}},[e._v("#")]),e._v(" Drivers for Shared Services")]),e._v(" "),o("p",[e._v("I have seen many teams adopt a model of shared service ownership. I find this approach\nsuboptimal, for reasons already discussed. However, the drivers that cause people to pick\nshared services are important to understand, especially as we may be able to find some\ncompelling alternative models that can address people’s underlying concerns.")]),e._v(" "),o("h2",{attrs:{id:"too-hard-to-split"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#too-hard-to-split"}},[e._v("#")]),e._v(" Too Hard to Split")]),e._v(" "),o("p",[e._v("Obviously, one of the reasons you may find yourself with a single service owned by more\nthan one team is that the cost of splitting the service is too high, or perhaps your\norganization might not see the point of it. This is a common occurrence with large\nmonolithic systems. If this is the main challenge you face, then I hope some of the advice\ngiven in Chapter 5 will be of use. You could also consider merging teams together, to align\nmore closely with the architecture itself.")]),e._v(" "),o("h2",{attrs:{id:"feature-teams"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#feature-teams"}},[e._v("#")]),e._v(" Feature Teams")]),e._v(" "),o("p",[e._v("The idea of feature teams (aka feature-based teams) is that a small team drives the\ndevelopment of a set of features, implementing all functionality required even if it cuts\nacross component (or even service) boundaries. The goals of feature teams are sensible\nenough. This structure allows the team to retain a focus on the end result and ensures that\nthe work is joined up, avoiding some of the challenges of trying to coordinate changes\nacross multiple different teams.")]),e._v(" "),o("p",[e._v("In many situations, the feature team is a reaction to traditional IT organizations where\nteam structure is aligned around technical boundaries. For example, you might have a\nteam that is responsible for the UI, another that is responsible for the application logic, and\na third handling the database. In this environment, a feature team is a significant step up,\nas it works across all these layers to deliver the functionality.")]),e._v(" "),o("p",[e._v("With wholesale adoption of feature teams, all services can be considered shared. Everyone\ncan change every service, every piece of code. The role of the service custodians here\nbecomes much more complex, if the role exists at all. Unfortunately, I rarely see\nfunctioning custodians at all where this pattern is adopted, leading to the sorts of issues we\ndiscussed earlier.")]),e._v(" "),o("p",[e._v("But let’s again consider what microservices are: services modeled after a business domain,\nnot a technical one. And if our team that owns any given service is similarly aligned along\nthe business domain, it is much more likely that the team will be able to retain a customer\nfocus, and see more of the feature development through, because it has a holistic\nunderstanding and ownership of all the technology associated with a service.")]),e._v(" "),o("p",[e._v("Cross-cutting changes can occur, of course, but their likelihood is significantly reduced by\nour avoiding technology-oriented teams.")]),e._v(" "),o("h2",{attrs:{id:"delivery-bottlenecks"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#delivery-bottlenecks"}},[e._v("#")]),e._v(" Delivery Bottlenecks")]),e._v(" "),o("p",[e._v("One key reason people move toward shared services is to avoid delivery bottlenecks.\nWhat if there is a large backlog of changes that need to be made in a single service? Let’s\nimagine that we are rolling out the ability for a customer to see the genre of a track across\nour products, as well as adding a a brand new type of stock: virtual musical ringtones for\nthe mobile phone. The website team needs to make a change to surface the genre\ninformation, with the mobile app team working to allow users to browse, preview, and buy\nthe ringtones. Both changes need to be made to the catalog service, but unfortunately half\nthe team is out with the flu, and the other half is stuck diagnosing a production failure.")]),e._v(" "),o("p",[e._v("We have a couple of options that don’t involve shared services to avoid this situation. The\nfirst is to just wait. The website and mobile application teams move on to something else.\nDepending on how important the feature is, or how long the delay is likely to be, this may\nbe fine or it may be a major problem.")]),e._v(" "),o("p",[e._v("You could instead add people to the catalog team to help them move through their work\nfaster. The more standardized the technology stack and programming idioms in use across\nyour system, the easier it is for other people to make changes in your services. The\nflipside, of course, as we discussed earlier, is that standardization tends to reduce a team’s\nability to adopt the right solution for the job, and can lead to different sorts of\ninefficiencies. If the team is on the other side of the planet, this might be impossible,\nhowever.")]),e._v(" "),o("p",[e._v("Another option could be to split the catalog into a separate general music catalog and a\nringtone catalog. If the change being made to support ringtones is fairly small, and the\nlikelihood of this being an area in which we will develop heavily in the future is also quite\nlow, this may well be premature. On the other hand, if there are 10 weeks of ringtone-\nrelated features stacked up, splitting out the service could make sense, with the mobile\nteam taking ownership.")]),e._v(" "),o("p",[e._v("There is another model that could work well for us, though.")]),e._v(" "),o("h2",{attrs:{id:"internal-open-source"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#internal-open-source"}},[e._v("#")]),e._v(" Internal Open Source")]),e._v(" "),o("p",[e._v("So what if we’ve tried our hardest, but we just can’t find a way past having a few shared\nservices? At this point, properly embracing the internal open source model can make a lot\nof sense.")]),e._v(" "),o("p",[e._v("With normal open source, a small group of people are considered core committers. They\nare the custodians of the code. If you want a change to an open source project, you either\nask one of the committers to make the change for you, or else you make the change\nyourself and send them a pull request. The core committers are still in charge of the\ncodebase; they are the owners.")]),e._v(" "),o("p",[e._v("Inside the organization, this pattern can work well too. Perhaps the people who worked on\nthe service originally are no longer on a team together; perhaps they are now scattered\nacross the organization. Well, if they still have commit rights, you can find them and ask\nfor their help, perhaps pairing up with them, or if you have the right tooling you can send\nthem a pull request.")]),e._v(" "),o("h2",{attrs:{id:"role-of-the-custodians"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#role-of-the-custodians"}},[e._v("#")]),e._v(" Role of the Custodians")]),e._v(" "),o("p",[e._v("We still want our services to be sensible. We want the code to be of decent quality, and the\nservice itself to exhibit some sort of consistency in how it is put together. We also want to\nmake sure that changes being made now don’t make future planned changes much harder\nthan they need to be. This means that we need to adopt the same patterns used in normal\nopen source internally too, which means separating out a group of trusted committers (the\ncore team), and untrusted committers (people from outside the team submitting changes).")]),e._v(" "),o("p",[e._v("The core team needs to have some way of vetting and approving the changes. It needs to\nmake sure the changes are idiomatically consistent — that is, that they follow the general\ncoding guidelines of the rest of the codebase. The people doing the vetting are therefore\ngoing to have to spend time working with the submitters to make sure the change is of\nsufficient quality.")]),e._v(" "),o("p",[e._v("Good gatekeepers put a lot of work into this, communicating clearly with the submitters\nand encouraging good behavior. Bad gatekeepers can use this as an excuse to exert power\nover others or have religious wars about arbitrary technical decisions. Having seen both\nsets of behavior, I can tell you one thing is clear: either way it takes time. When\nconsidering allowing untrusted committers to submit changes to your codebase, you have\nto decide if the overhead of being a gatekeeper is worth the trouble: could the core team be\ndoing better things with the time it spends vetting patches?")]),e._v(" "),o("h2",{attrs:{id:"maturity"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#maturity"}},[e._v("#")]),e._v(" Maturity")]),e._v(" "),o("p",[e._v("The less stable or mature a service is, the harder it will be to allow people outside the core\nteam to submit patches. Before the key spine of a service is in place, the team may not\nknow what  "),o("em",[e._v("good")]),e._v("  looks like, and therefore may struggle to know what a good submission\nlooks like. During this stage, the service itself is undergoing a high degree of change.")]),e._v(" "),o("p",[e._v("Most open source projects tend to not take submissions from a wider group of untrusted\ncommitters until the core of the first version is done. Following a similar model for your\nown organizations makes sense. If a service is pretty mature, and is rarely changed — for\nexample, our cart service — then perhaps that is the time to open it up for other\ncontributions.")]),e._v(" "),o("h2",{attrs:{id:"tooling"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#tooling"}},[e._v("#")]),e._v(" Tooling")]),e._v(" "),o("p",[e._v("To best support an internal open source model, you’ll need some tooling in place. The use\nof a distributed version control tool with the ability for people to submit pull requests (or\nsomething similar) is important. Depending on the size of the organization, you may also\nneed tooling to allow for a discussion and evolution of patch requests; this may or may not\nmean a full-blown code review system, but the ability to comment inline on patches is\nvery useful. Finally, you’ll need to make it very easy for a committer to build and deploy\nyour software, and make it available for others. Typically this involves having well-\ndefined build and deployment pipelines and centralized artifact repositories.")]),e._v(" "),o("h2",{attrs:{id:"bounded-contexts-and-team-structures"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#bounded-contexts-and-team-structures"}},[e._v("#")]),e._v(" Bounded Contexts and Team Structures")]),e._v(" "),o("p",[e._v("As mentioned before, we look to draw our service boundaries around bounded contexts. It\ntherefore follows that we would like our teams aligned along bounded contexts too. This\nhas multiple benefits. First, a team will find it easier to grasp domain concepts within a\nbounded context, as they are interrelated. Second, services within a bounded context are\nmore likely to be services that talk to each other, making system design and release\ncoordination easier. Finally, in terms of how the delivery team interacts with the business\nstakeholders, it becomes easier for the team to create good relationships with the one or\ntwo experts in that area.")]),e._v(" "),o("h2",{attrs:{id:"the-orphaned-service"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#the-orphaned-service"}},[e._v("#")]),e._v(" The Orphaned Service?")]),e._v(" "),o("p",[e._v("So what about services that are no longer being actively maintained? As we move toward\nfiner-grained architectures, the services themselves become smaller. One of the goals of\nsmaller services, as we have discussed, is the fact that they are simpler. Simpler services\nwith less functionality may not need to change for a while. Consider the humble cart\nservice, which provides some fairly modest capabilities: Add to Cart, Remove from Cart,\nand so on. It is quite conceivable that this service may not have to change for months after\nfirst being written, even if active development is still going on. What happens here? Who\nowns this service?")]),e._v(" "),o("p",[e._v("If your team structures are aligned along the bounded contexts of your organization, then\neven services that are not changed frequently still have a de facto owner. Imagine a team\nthat is aligned with the consumer web sales context. It might handle the website, cart, and\nrecommendation services. Even if the cart service hasn’t been changed in months, it would\nnaturally fall to this team to make the change. One of the benefits of microservices, of\ncourse, is that if the team needs to change the service to add a new feature and not find it\nto its liking, rewriting it shouldn’t take too long at all.")]),e._v(" "),o("p",[e._v("That said, if you’ve adopted a truly polyglot approach, making use of multiple technology\nstacks, then the challenges of making changes to an orphaned service could be\ncompounded if your team doesn’t know the tech stack any longer.")]),e._v(" "),o("h2",{attrs:{id:"case-study-realestate-com-au"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#case-study-realestate-com-au"}},[e._v("#")]),e._v(" Case Study: RealEstate.com.au")]),e._v(" "),o("p",[e._v("REA’s core business is real estate. But this encompasses multiple different facets, each of\nwhich operates as a single line of business (LOB). For example, one line of business deals\nwith residential property in Australia, another commercial, while another might relate to\none of REA’s overseas businesses. These lines of business have IT delivery teams (or\n"),o("em",[e._v("squads")]),e._v(" ) associated with them; some may have only a single squad, while the biggest has\nfour. So for residential property, there are multiple teams involved with creating the\nwebsite and listing services to allow people to browse property. People rotate between\nthese teams every now and then, but tend to stay within that line of business for extended\nperiods, ensuring that the team members can build up a strong awareness of that part of\nthe domain. This in turn helps the communication between the various business\nstakeholders and the team delivering features for them.")]),e._v(" "),o("p",[e._v("Each squad inside a line of business is expected to own the entire lifecycle of the services\nit creates, including building, testing and releasing, supporting, and even\ndecommissioning. A core delivery services team provides advice and guidance to these\nteams, as well as tooling to help it get the job done. A strong culture of automation is key,\nand REA makes heavy use of AWS as a key part of enabling the teams to be more\nautonomous. Figure 10-1 illustrates how this all works.")]),e._v(" "),o("p",[o("img",{attrs:{src:a(543),alt:"img"}})]),e._v(" "),o("p",[o("em",[e._v("Figure 10-1. An overview of Realestate.com.au’s organizational and team structure, and alignment with architecture")])]),e._v(" "),o("p",[e._v("It isn’t just the delivery organization that is aligned to how the business operates. It\nextends to the architecture too. One example of this is integration methods. Within an\nLOB, all services are free to talk to each other in any way they see fit, as decided by the\nsquads who act as their custodians. But between LOBs, all communication is mandated to")]),e._v(" "),o("p",[e._v("be asynchronous batch, one of the few cast-iron rules of the very small architecture team.\nThis coarse-grained communication matches the coarse-grained communication that exists\nbetween the different parts of the business too. By insisting on it being batch, each LOB\nhas a lot of freedom in how it acts and manages itself. It could afford to take its services\ndown whenever it wanted, knowing that as long as it can satisfy the batch integration with\nother parts of the business and its own business stakeholders, no one would care.")]),e._v(" "),o("p",[e._v("This structure has allowed for significant autonomy of not only the teams but also the\ndifferent parts of the business. From a handful of services a few years ago, REA now has\nhundreds, with more services than people, and is growing at a rapid pace. The ability to\ndeliver change has helped the company achieve significant success in the local market to\nthe point where it is expanding overseas. And, most heartening of all, from talking to the\npeople there I get the impression that both the architecture and organizational structure as\nthey stand now are just the latest iteration rather than the destination. I daresay in another\nfive years REA will look very different again.")]),e._v(" "),o("p",[e._v("Those organizations that are adaptive enough to change not only their system architecture\nbut also their organizational structure can yield huge benefits in terms of improved\nautonomy of teams and faster time to market for new features and functionality. REA is\njust one of a number of organizations that are realizing that system architecture doesn’t\nexist in a vacuum.")]),e._v(" "),o("h2",{attrs:{id:"conway-s-law-in-reverse"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#conway-s-law-in-reverse"}},[e._v("#")]),e._v(" Conway’s Law in Reverse")]),e._v(" "),o("p",[e._v("So far, we’ve spoken about how the organization impacts the system design. But what\nabout the reverse? Namely, can a system design change the organization? While I haven’t\nbeen able to find the same quality of evidence to support the idea that Conway’s law\nworks in reverse, I’ve seen it anecdotally.")]),e._v(" "),o("p",[e._v("Probably the best example was a client I worked with many years ago. Back in the days\nwhen the Web was fairly nascent, and the Internet was seen as something that arrived on\nan AOL floppy disk through the door, this company was a large print firm that had a\nsmall, modest website. It had a website because it was the thing to do, but in the grand\nscheme of things it was fairly unimportant to how the business operated. When the\noriginal system was created, a fairly arbitrary technical decision was made as to how the\nsystem would work.")]),e._v(" "),o("p",[e._v("The content for this system was sourced in multiple ways, but most of it came from third\nparties who were placing ads for viewing by the general public. There was an input system\nthat allowed content to be created by the paying third parties, a central system that took\nthat data and enriched it in various ways, and an output system that created the final\nwebsite that the general public could browse.")]),e._v(" "),o("p",[e._v("Whether the original design decisions were right at the time is a conversation for\nhistorians, but many years on the company had changed quite a bit and I and many of my\ncolleagues were starting to wonder if the system design was fit for the company’s present\nstate. Its physical print business had diminished significantly, and the revenues and\ntherefore business operations of the organization were now dominated by its online\npresence.")]),e._v(" "),o("p",[e._v("What we saw at that time was an organization tightly aligned to this three-part system.\nThree channels or divisions in the IT side of the business aligned with each of the input,\ncore, and output parts of the business. Within those channels, there were separate delivery\nteams. What I didn’t realize at the time was that these organizational structures didn’t\npredate the system design, but actually grew up around it. As the print side of the business\ndiminished, and the digital side of the business grew, the system design inadvertently lay\nthe path for how the organization grew.")]),e._v(" "),o("p",[e._v("In the end we realized that whatever the shortcomings of the system design were, we\nwould have to make changes to the organizational structure to make a shift. Many years\nlater, that process remains a work in progress!")]),e._v(" "),o("h2",{attrs:{id:"people"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#people"}},[e._v("#")]),e._v(" People")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("No matter how it looks at first, it’s always a people problem.\nGerry Weinberg,  The Second Law of Consulting\n")])])]),o("p",[e._v("We have to accept that in a microservice environment, it is harder for a developer to just\nthink about writing code in his own little world. He has to be more aware of the\nimplications of things like calls across network boundaries, or the implications of failure.\nWe’ve also talked about the ability of microservices to make it easier to try out new\ntechnologies, from data stores to languages. But if you’re moving from a world where you\nhave a monolithic system, where the majority of your developers have just had to use one\nlanguage and remain completely oblivious to the operational concerns, then throwing\nthem into the world of microservices may be a rude awakening for them.")]),e._v(" "),o("p",[e._v("Likewise, pushing power into development teams to increase autonomy can be fraught.\nPeople who have in the past thrown work over the wall to someone else are accustomed to\nhaving someone else to blame, and may not feel comfortable being fully accountable for\ntheir work. You may even find contractual barriers to having your developers carry\nsupport pagers for the systems they support!")]),e._v(" "),o("p",[e._v("Although this book has mostly been about technology, people are not just a side issue to\nbe considered; they are the people who built what you have now, and will build what\nhappens next. Coming up with a vision for how things should be done without considering\nhow your current staff will feel about this or without considering what capabilities they\nhave is likely to lead to a bad place.")]),e._v(" "),o("p",[e._v("Each organization has its own set of dynamics around this topic. Understand your staff’s\nappetite to change. Don’t push them too fast! Maybe you still have a separate team handle\nfrontline support or deployment for a short period of time, giving your developers time to\nadjust to other new practices. You may, however, have to accept that you need different\nsorts of people in your organization to make all this work. Whatever your approach,\nunderstand that you need to be clear in articulating the responsibilities of your people in a\nmicroservices world, and also be clear why those responsibilities are important to you.\nThis can help you see what your skill gaps might be, and think about how to close them.\nFor many people, this will be a pretty scary journey. Just remember that without people on\nboard, any change you might want to make could be doomed from the start.")]),e._v(" "),o("h2",{attrs:{id:"summary"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#summary"}},[e._v("#")]),e._v(" Summary")]),e._v(" "),o("p",[e._v("Conway’s law highlights the perils of trying to enforce a system design that doesn’t match\nthe organization. This leads us to trying to align service ownership to colocated teams,\nwhich themselves are aligned around the same bounded contexts of the organization.\nWhen the two are not in alignment, we get tension points as outlined throughout this\nchapter. By recognizing the link between the two, we’ll make sure the system we are\ntrying to build makes sense for the organization we’re building it for.")]),e._v(" "),o("p",[e._v("Some of what we covered here touched on the challenges of working with organizations at\nscale. However, there are other technical considerations that we need to worry about when\nour systems start to grow beyond a few discrete services. We’ll address those next.")]),e._v(" "),o("p",[e._v("(^4)  And we all know Windows Vista was quite error-prone!")])])}),[],!1,null,null,null);t.default=n.exports}}]);