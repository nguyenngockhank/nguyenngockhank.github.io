(window.webpackJsonp=window.webpackJsonp||[]).push([[220],{780:function(e,t,a){"use strict";a.r(t);var s=a(7),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"c-h-a-p-t-e-r-e-i-g-h-t"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-h-a-p-t-e-r-e-i-g-h-t"}},[e._v("#")]),e._v(" C H A P T E R E I G H T")]),e._v(" "),a("p",[a("strong",[e._v("Breaking Down Giant Expressions")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("83\n")])])]),a("p",[e._v("The giant squid is an amazing and intelligent animal, but its near-perfect body design has one")]),e._v(" "),a("p",[e._v("fatal flaw: it has a donut-shaped brain that wraps around its esophagus. So if it swallows too")]),e._v(" "),a("p",[e._v("much food at once, it gets brain damage.")]),e._v(" "),a("p",[e._v("What does this have to do with code? Well, code that comes in “chunks” that are too big can")]),e._v(" "),a("p",[e._v("have the same kind of effect. Recent research suggests that most of us can only think about")]),e._v(" "),a("p",[e._v("three or four “things” at a time.* Simply put, the larger an expression of code is, the harder it")]),e._v(" "),a("p",[e._v("will be to understand.")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("K E Y I D E A")]),e._v(" "),a("p",[e._v("Break down your giant expressions into more digestible pieces.")])]),e._v(" "),a("p",[e._v("In this chapter, we’ll go through various ways you can manipulate and break down your code")]),e._v(" "),a("p",[e._v("so that it’s easier to swallow.")]),e._v(" "),a("h3",{attrs:{id:"explaining-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#explaining-variables"}},[e._v("#")]),e._v(" Explaining Variables")]),e._v(" "),a("p",[e._v("The simplest way to break down an expression is to introduce an extra variable that captures")]),e._v(" "),a("p",[e._v("a smaller subexpression. This extra variable is sometimes called an “explaining variable”")]),e._v(" "),a("p",[e._v("because it helps explain what the subexpression means.")]),e._v(" "),a("p",[e._v("Here is an example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if line.split(':')[0].strip() == \"root\":\n")])])]),a("p",[e._v("Here is the same code, now with an explaining variable:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("username = line.split(':')[0].strip()\nif username == \"root\":\n")])])]),a("h3",{attrs:{id:"summary-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#summary-variables"}},[e._v("#")]),e._v(" Summary Variables")]),e._v(" "),a("p",[e._v("Even if an expression doesn’t "),a("em",[e._v("need")]),e._v(" explaining (because you can figure out what it means),")]),e._v(" "),a("p",[e._v("it can still be useful to capture that expression in a new variable. We call this a "),a("em",[e._v("summary")])]),e._v(" "),a("p",[a("em",[e._v("variable")]),e._v(" if its purpose is simply to replace a larger chunk of code with a smaller name that can")]),e._v(" "),a("p",[e._v("be managed and thought about more easily.")]),e._v(" "),a("p",[e._v("For example, consider the expressions in this code:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if ( request.user.id == document.owner_id ) {\n// user can edit this document...\n}\n")])])]),a("ul",[a("li",[e._v("Cowan, N. (2001). The magical number 4 in short-term memory: A reconsideration of mental storage\ncapacity. "),a("em",[e._v("Behavioral and Brain Sciences")]),e._v(" , 24, 97–185.")])]),e._v(" "),a("p",[a("strong",[e._v("84")]),e._v(" CHAPTER EIGHT")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if ( request.user.id != document.owner_id ) {\n// document is read-only...\n}\n")])])]),a("p",[e._v("The expression request.user.id == document.owner_id may not seem that big, but it has five")]),e._v(" "),a("p",[e._v("variables, so it takes a little extra time to think about.")]),e._v(" "),a("p",[e._v("The main concept in this code is, “Does the user own the document?” That concept can be")]),e._v(" "),a("p",[e._v("stated more clearly by adding a summary variable:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("final boolean user_owns_document = (request.user.id == document.owner_id);\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if ( user_owns_document ) {\n// user can edit this document...\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (! user_owns_document ) {\n// document is read-only...\n}\n")])])]),a("p",[e._v("It may not seem like much, but the statement if (user_owns_document) is a little easier to think")]),e._v(" "),a("p",[e._v("about. Also, having user_owns_document defined at the top tells the reader upfront that “this is")]),e._v(" "),a("p",[e._v("a concept we’ll be referring to throughout this function.”")]),e._v(" "),a("h3",{attrs:{id:"using-de-morgan-s-laws"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-de-morgan-s-laws"}},[e._v("#")]),e._v(" Using De Morgan’s Laws")]),e._v(" "),a("p",[e._v("If you ever took a course in circuits or logic, you might remember De Morgan’s laws. They are")]),e._v(" "),a("p",[e._v("two ways to rewrite a boolean expression into an equivalent one:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1) not (a or b or c) ⇔ (not a) and (not b) and (not c)\n2) not (a and b and c) ⇔ (not a) or (not b) or (not c)\n")])])]),a("p",[e._v("If you have trouble remembering these laws, a simple summary is “Distribute the not and")]),e._v(" "),a("p",[e._v("switch and/or.” (Or going the other way, you “factor out the not.”)")]),e._v(" "),a("p",[e._v("You can sometimes use these laws to make a boolean expression more readable. For instance,")]),e._v(" "),a("p",[e._v("if your code is:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('if ( !(file_exists && !is_protected) ) Error("Sorry, could not read file.");\n')])])]),a("p",[e._v("It can be rewritten to:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('if ( !file_exists || is_protected ) Error("Sorry, could not read file.");\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("BREAKING DOWN GIANT EXPRESSIONS 85\n")])])]),a("h3",{attrs:{id:"abusing-short-circuit-logic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#abusing-short-circuit-logic"}},[e._v("#")]),e._v(" Abusing Short-Circuit Logic")]),e._v(" "),a("p",[e._v("In most programming languages, boolean operators perform short-circuit evaluation. For")]),e._v(" "),a("p",[e._v("example, the statement if (a || b) won’t evaluate b if a is true. This behavior is very handy")]),e._v(" "),a("p",[e._v("but can sometimes be abused to accomplish complex logic.")]),e._v(" "),a("p",[e._v("Here is an example of a statement once written by one of the authors:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("assert((!(bucket = FindBucket(key))) || !bucket->IsOccupied());\n")])])]),a("p",[e._v("In English, what this code is saying is, “Get the bucket for this key. If the bucket is not null,")]),e._v(" "),a("p",[e._v("then make sure it isn’t occupied.”")]),e._v(" "),a("p",[e._v("Even though it’s only one line of code, it really makes most programmers stop and think. Now")]),e._v(" "),a("p",[e._v("compare it to this code:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("bucket = FindBucket(key);\nif (bucket != NULL) assert(!bucket->IsOccupied());\n")])])]),a("p",[e._v("It does exactly the same thing, and even though it’s two lines of code, it’s much easier to")]),e._v(" "),a("p",[e._v("understand.")]),e._v(" "),a("p",[e._v("So why was the code written as a single giant expression in the first place? At the time, it felt")]),e._v(" "),a("p",[e._v("very clever. There’s a certain pleasure in paring logic down to a concise nugget of code. That’s")]),e._v(" "),a("p",[e._v("understandable—it’s like solving a miniature puzzle, and we all like to have fun at work. The")]),e._v(" "),a("p",[e._v("problem is that the code was a mental speed bump for anyone reading through the code.")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("K E Y I D E A")]),e._v(" "),a("p",[e._v("Beware of “clever” nuggets of code—they’re often confusing when others read the\ncode later.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Does this mean you should avoid making use of short-circuit behavior? No. There are plenty\n\nof cases where it can be used cleanly, for instance:\n\n")])])]),a("p",[e._v("if (object && object->method()) ...")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("There is also a newer idiom worth mentioning: in languages like Python, JavaScript, and Ruby,\n\nthe “or” operator returns one of its arguments (it doesn’t convert to a boolean), so code like:\n\n")])])]),a("p",[e._v("x = a || b || c")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("can be used to pick out the first “truthy” value from a, b, or c.\n\n### Example: Wrestling with Complicated Logic\n\nSuppose you’re implementing the following Range class:\n\n")])])]),a("p",[e._v("struct Range {\nint begin;\nint end;")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("**86** CHAPTER EIGHT\n\n\n")])])]),a("p",[e._v("// For example, [0,5) overlaps with [3,8)\nbool OverlapsWith(Range other);\n};")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("The following figure shows some example ranges:\n\nNote that end is noninclusive. So A, B, and C don’t overlap with each other, but D overlaps\n\nwith all of them.\n\nHere is one attempt at implementing OverlapsWith()—it checks if either endpoint of its range\n\nfalls inside the other’s range:\n\n")])])]),a("p",[e._v("bool Range::OverlapsWith(Range other) {\n// Check if 'begin' or 'end' falls inside 'other'.\nreturn (begin >= other.begin && begin <= other.end) ||\n(end >= other.begin && end <= other.end);\n}")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Even though the code is only two lines long, there’s a lot going on. The following figure shows\n\nall the logic involved.\n\nThere are so many cases and conditions to think about that it’s easy for a bug to slip by.\n\nSpeaking of which, there _is_ a bug. The previous code will claim that the Range [0,2) overlaps\n\nwith [2,4) when in fact it doesn’t.\n\n")])])]),a("p",[e._v("BREAKING DOWN GIANT EXPRESSIONS 87")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\nThe problem is that you have to be careful when comparing begin/end values using <= or just\n\n<. Here’s a fix to this problem:\n\n")])])]),a("p",[e._v("return (begin >= other.begin && begin < other.end) ||\n(end > other.begin && end <= other.end);")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Now it’s correct, right? Actually, there’s _another_ bug. This code has ignored the case when begin/\n\nend completely surround other.\n\nHere’s a fix that handles this case, too:\n\n")])])]),a("p",[e._v("return (begin >= other.begin && begin < other.end) ||\n(end > other.begin && end <= other.end) ||\n(begin <= other.begin && end >= other.end) ;")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Yikes—this code has become way too complicated. You can’t expect anyone to read this code\n\nand confidently know that it’s correct. So what do we do? How can we break down this giant\n\nexpression?\n\n**Finding a More Elegant Approach**\n\nThis is one of those times when you should stop and consider a different approach altogether.\n\nWhat started as a simple problem (checking whether two ranges overlap) turned into a\n\nsurprisingly convoluted piece of logic. This is often a sign that **there must be an easier way.**\n\nBut finding a more elegant solution takes creativity. How do you go about it? One technique\n\nis to see if you can solve the problem the “opposite” way. Depending on the situation you’re\n\nin, this could mean iterating through arrays in reverse or filling in some data structure\n\nbackward rather than forward.\n\nHere, the opposite of OverlapsWith() is “doesn’t overlap.” Determining if two ranges _don’t_\n\noverlap turns out to be a much simpler problem, because there are only two possibilities:\n\n")])])]),a("p",[e._v("1.The other range ends before this one begins.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("2. The other range begins after this one ends.\n\nWe can turn this into code quite easily:\n\n")])])]),a("p",[e._v("bool Range::OverlapsWith(Range other) {\nif (other.end <= begin) return false; // They end before we begin\nif (other.begin >= end) return false; // They begin after we end")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code")])]),a("p",[e._v("return true; // Only possibility left: they overlap\n}")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Each line of code here is much simpler—it involves only a single comparison. That leaves the\n\nreader with enough brainpower to focus on whether <= is correct.\n\n**88** CHAPTER EIGHT\n\n\n### Breaking Down Giant Statements\n\nThis chapter is about breaking down individual expressions, but the same techniques apply to\n\nbreaking down larger statements as well. For example, the following JavaScript code has a lot\n\nto take in at once:\n\n")])])]),a("p",[e._v('var update_highlight = function (message_num) {\nif ($("#vote_value" + message_num).html() === "Up") {\n$("#thumbs_up" + message_num).addClass("highlighted");\n$("#thumbs_down" + message_num).removeClass("highlighted");\n} else if ($("#vote_value" + message_num).html() === "Down") {\n$("#thumbs_up" + message_num).removeClass("highlighted");\n$("#thumbs_down" + message_num).addClass("highlighted");\n} else {\n$("#thumbs_up" + message_num).removeClass("highighted");\n$("#thumbs_down" + message_num).removeClass("highlighted");\n}\n};')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("The individual expressions in this code aren’t that big, but when placed all together, it forms\n\none giant statement that hits you all at once.\n\nFortunately, a lot of the expressions are the same, which means we can extract them out as\n\nsummary variables at the top of the function (this is also an instance of the DRY—Don’t Repeat\n\nYourself—principle):\n\n")])])]),a("p",[e._v('var update_highlight = function (message_num) {\nvar thumbs_up = $("#thumbs_up" + message_num);\nvar thumbs_down = $("#thumbs_down" + message_num);\nvar vote_value = $("#vote_value" + message_num).html();\nvar hi = "highlighted";')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code")])]),a("p",[e._v('if ( vote_value === "Up") {\nthumbs_up .addClass( hi );\nthumbs_down .removeClass( hi );\n} else if ( vote_value === "Down") {\nthumbs_up .removeClass( hi );\nthumbs_down .addClass( hi );\n} else {\nthumbs_up .removeClass( hi );\nthumbs_down .removeClass( hi );\n}\n};')]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('The creation of var hi = "highlighted" isn’t strictly needed, but as there were _six_ copies of it,\n\nthere were compelling benefits:\n\n- It helps avoid typing mistakes. (In fact, did you notice that in the first example, the string\n    was misspelled as "highighted" in the fifth case?)\n- It shrinks the line width even more, making the code easier to scan through.\n- If the class name needed to change, there’s just one place to change it.\n\n')])])]),a("p",[e._v("BREAKING DOWN GIANT EXPRESSIONS 89")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\n### Another Creative Way to Simplify Expressions\n\nHere’s another example with a lot going on in each expression, this time in C++:\n\n")])])]),a("p",[e._v("void AddStats(const Stats& add_from, Stats* add_to) {\nadd_to->set_total_memory(add_from.total_memory() + add_to->total_memory());\nadd_to->set_free_memory(add_from.free_memory() + add_to->free_memory());\nadd_to->set_swap_memory(add_from.swap_memory() + add_to->swap_memory());\nadd_to->set_status_string(add_from.status_string() + add_to->status_string());\nadd_to->set_num_processes(add_from.num_processes() + add_to->num_processes());")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code")])]),a("p",[e._v("}")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Once again, your eyes are faced with code that’s long and similar, but not exactly the same.\n\nAfter ten seconds of careful scrutiny, you might realize that each line is doing the same thing,\n\njust to a different field each time:\n\n")])])]),a("p",[e._v("add_to->set_ XXX (add_from. XXX () + add_to-> XXX ());")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("In C++, we can define a macro to implement this:\n\n")])])]),a("p",[e._v("void AddStats(const Stats& add_from, Stats* add_to) {\n#define ADD_FIELD(field) add_to->set_##field(add_from.field() + add_to->field())")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code")])]),a("p",[e._v("ADD_FIELD(total_memory);\nADD_FIELD(free_memory);\nADD_FIELD(swap_memory);\nADD_FIELD(status_string);\nADD_FIELD(num_processes);")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code")])]),a("p",[e._v("#undef ADD_FIELD\n}")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Now that we’ve stripped away all the clutter, you can look at the code and immediately\n\nunderstand the essence of what’s happening. It’s very clear that each line is doing the same\n\nthing.\n\nNote that we’re not advocating using macros very often—in fact, we usually avoid them\n\nbecause they can make code confusing and introduce subtle bugs. But sometimes, as in this\n\ncase, they’re simple and can provide a clear benefit to readability.\n\n### Summary\n\nGiant expressions are hard to think about. This chapter showed a number of ways to break\n\nthem down so the reader can digest them piece by piece.\n\n**90** CHAPTER EIGHT\n\n\nOne simple technique is to introduce “explaining variables” that capture the value of some\n\nlarge subexpression. This approach has three benefits:\n\n- It breaks down a giant expression into pieces.\n- It documents the code by describing the subexpression with a succinct name.\n- It helps the reader identify the main “concepts” in the code.\n\nAnother technique is to manipulate your logic using De Morgan’s laws—this technique can\n\nsometimes rewrite a boolean expression in a cleaner way (e.g., if (!(a && !b)) turns into if\n\n(!a || b)).\n\nWe showed an example where a complex logical condition was broken down into tiny\n\nstatements like “if (a < b) ...”. In fact, _all_ of the improved-code examples in this chapter had\n\nif statements with no more than _two_ values inside them. This setup is ideal. It may not always\n\nseem possible to do this—sometimes it requires “negating” the problem or considering the\n\nopposite of your goal.\n\nFinally, even though this chapter is about breaking down individual expressions, these same\n\ntechniques often apply to larger blocks of code, too. So be aggressive in breaking down complex\n\nlogic wherever you see it.\n\n")])])]),a("p",[e._v("BREAKING DOWN GIANT EXPRESSIONS 91")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\n")])])])])])}),[],!1,null,null,null);t.default=n.exports}}]);