(window.webpackJsonp=window.webpackJsonp||[]).push([[377],{1142:function(e,t,s){"use strict";s.r(t);var n=s(7),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"_13-comments-should-describe-things-that-aren-t-obvious-from-the-code"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-comments-should-describe-things-that-aren-t-obvious-from-the-code"}},[e._v("#")]),e._v(" 13. Comments Should Describe Things that aren’t Obvious from the Code")]),e._v(" "),s("p",[e._v("The reason for writing comments is that statements in a programming\nlanguage can’t capture all of the important information that was in the\nmind of the developer when the code was written. Comments record this\ninformation so that developers who come along later can easily understand\nand modify the code. The guiding principle for comments is that\ncomments should describe things that aren’t obvious from the code.")]),e._v(" "),s("p",[e._v("There are many things that aren’t obvious from the code. Sometimes it’s low-level details that aren’t obvious. For example, when a pair of indices describe a range, it isn’t obvious whether the elements given by the indices are inside the range or out. Sometimes it’s not clear why code is needed, or why it was implemented in a particular way. Sometimes there are rules the developer followed, such as “always invoke a before b.” You might be able to guess at a rule by looking at all of the code, but this is painful and error-prone; a comment can make the rule explicit and clear.")]),e._v(" "),s("p",[e._v("One of the most important reasons for comments is abstractions, which\ninclude a lot of information that isn’t obvious from the code. The idea of\nan abstraction is to provide a simple way of thinking about something, but\ncode is so detailed that it can be hard to see the abstraction just from\nreading the code. Comments can provide a simpler, higher-level view\n(“after this method is invoked, network traffic will be limited to\nmaxBandwidth bytes per second”). Even if this information can be deduced\nby reading the code, we don’t want to force users of a module to do that:\nreading the code is time-consuming and forces them to consider a lot of\ninformation that isn’t needed to use the module. Developers should be\nable to understand the abstraction provided by a module without reading any code other than its externally visible declarations. The only way to do this is by supplementing the declarations with comments.")]),e._v(" "),s("p",[e._v("This chapter discusses what information needs to be described in comments and how to write good comments. As you will see, good comments typically explain things at a different level of detail than the code, which is more detailed in some situations and less detailed (more abstract) in others.")]),e._v(" "),s("h2",{attrs:{id:"_13-1-pick-conventions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-1-pick-conventions"}},[e._v("#")]),e._v(" 13.1  Pick conventions")]),e._v(" "),s("p",[e._v("The first step in writing comments is to decide on conventions for\ncommenting, such as what you will comment and the format you will use\nfor comments. If you are programming in a language for which there\nexists a document compilation tool, such as Javadoc for Java, Doxygen for\nC++, or godoc for Go!, follow the conventions of the tools. None of these\nconventions is perfect, but the tools provide enough benefits to make up\nfor that. If you are programming in an environment where there are no\nexisting conventions to follow, try to adopt the conventions from some\nother language or project that is similar; this will make it easier for other\ndevelopers to understand and adhere to your conventions.")]),e._v(" "),s("p",[e._v("Conventions serve two purposes. First, they ensure consistency, which\nmakes comments easier to read and understand. Second, they help to\nensure that you actually write comments. If you don’t have a clear idea\nwhat you are going to comment and how, it’s easy to end up writing no\ncomments at all.")]),e._v(" "),s("p",[e._v("Most comments fall into one of the following categories:")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("Interface")]),e._v(": a comment block that immediately precedes the declaration of a module such as a class, data structure, function, or method. The comment describe’s the module’s interface. For a class, the comment describes the overall abstraction provided by the class. For a method or function, the comment describes its overall behavior, its arguments and return value, if any, any side effects or exceptions that it generates, and any other requirements the caller must satisfy before invoking the method.")]),e._v(" "),s("li",[s("strong",[e._v("Data structure member")]),e._v(": a comment next to the declaration of a field in a data structure, such as an instance variable or static variable for a class.")]),e._v(" "),s("li",[s("strong",[e._v("Implementation comment")]),e._v(": a comment inside the code of a method or function, which describes how the code works internally.")]),e._v(" "),s("li",[s("strong",[e._v("Cross-module comment")]),e._v(": a comment describing dependencies that cross module boundaries.")])]),e._v(" "),s("p",[e._v("The most important comments are those in the first two categories. Every class should have an interface comment, every class variable should have a comment, and every method should have an interface comment.\nOccasionally, the declaration for a variable or method is so obvious that there is nothing useful to add in a comment (getters and setters sometimes fall in this category), but this is rare; it is easier to comment everything rather than spend energy worrying about whether a comment is needed.\nImplementation comments are often unnecessary (see Section 13.6 below).\nCross-module comments are the most rare of all and they are problematic to write, but when they are needed they are quite important; Section 13.7 discusses them in more detail.")]),e._v(" "),s("h2",{attrs:{id:"_13-2-don-t-repeat-the-code"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-2-don-t-repeat-the-code"}},[e._v("#")]),e._v(" 13.2  Don’t repeat the code")]),e._v(" "),s("p",[e._v("Unfortunately, many comments are not particularly helpful. The most\ncommon reason is that the comments repeat the code: all of the\ninformation in the comment can easily be deduced from the code next to\nthe comment. Here is a code sample that appeared in a recent research\npaper:")]),e._v(" "),s("div",{staticClass:"language-py extra-class"},[s("pre",{pre:!0,attrs:{class:"language-py"}},[s("code",[e._v("ptr_copy "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" get_copy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Get pointer copy")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" is_unlocked"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("ptr_copy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Is obj free?")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" obj "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# return current obj")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" is_copy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("ptr_copy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Already a copy?")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" obj "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# return obj")]),e._v("\nthread_id "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" get_thread_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("ptr_copy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" thread_id "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" ctx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("thread_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Locked by current ctx")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" ptr_copy "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Return copy")]),e._v("\n")])])]),s("p",[e._v("There is no useful information in any of these comments except for the\n“Locked by” comment, which suggests something about the thread that\nmight not be obvious from the code. Notice that these comments are at")]),e._v(" "),s("p",[e._v("roughly the same level of detail as the code: there is one comment per line\nof code, which describes that line. Comments like this are rarely useful.")]),e._v(" "),s("p",[e._v("Here are more examples of comments that repeat the code:")]),e._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Add a horizontal scroll bar")]),e._v("\nhScrollBar "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("JScrollBar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("JScrollBar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("HORIZONTAL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("hScrollBar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BorderLayout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("SOUTH"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Add a vertical scroll bar")]),e._v("\nvScrollBar "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("JScrollBar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("JScrollBar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("VERTICAL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("vScrollBar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("BorderLayout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("EAST"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Initialize the caret-position related values")]),e._v("\ncaretX     "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\ncaretY     "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\ncaretMemX  "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),s("p",[e._v("None of these comments provide any value. For the first two comments, the code is already clear enough that it doesn’t really need comments; in the third case, a comment might be useful, but the current comment doesn’t provide enough detail to be helpful.")]),e._v(" "),s("p",[e._v("After you have written a comment, ask yourself the following question: could someone who has never seen the code write the comment just by looking at the code next to the comment? If the answer is yes, as in the examples above, then the comment doesn’t make the code any easier to understand. Comments like these are why some people think that comments are worthless.")]),e._v(" "),s("p",[e._v("Another common mistake is to use the same words in the comment\nthat appear in the name of the entity being documented:")]),e._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*\n * Obtain a normalized resource name from REQ.\n */")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("static")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("getNormalizedResourceNames")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("HTTPRequest")]),e._v(" req"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*\n * Downcast PARAMETER to TYPE.\n */")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("static")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Object")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("downCastParameter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" parameter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*\n * The horizontal padding of each line in the text.\n */")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("static")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("final")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("int")]),e._v(" textHorizontalPadding "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n")])])]),s("p",[e._v("These comments just take the words from the method or variable name,\nperhaps add a few words from argument names and types, and form them\ninto a sentence. For example, the only thing in the second comment that\nisn’t in the code is the word “to”! Once again, these comments could be\nwritten just by looking at the declarations, without any understanding the\nmethods of variables; as a result, they have no value.")]),e._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[e._v("Comment Repeats Code")]),e._v(" "),s("p",[e._v("If the information in a comment is already obvious from the code next\nto the comment, then the comment isn’t helpful. One example of this is\nwhen the comment uses the same words that make up the name of the\nthing it is describing.")])]),e._v(" "),s("p",[e._v("At the same time, there is important information that is missing from\nthe comments: for example, what is a “normalized resource name”, and\nwhat are the elements of the array returned by\ngetNormalizedResourceNames? What does “downcast” mean? What are the")]),e._v(" "),s("p",[e._v("units of padding, and is the padding on one side of each line or both?\nDescribing these things in comments would be helpful.")]),e._v(" "),s("p",[e._v("A first step towards writing good comments is to use different words\nin the comment from those in the name of the entity being described.\nPick words for the comment that provide additional information about the\nmeaning of the entity, rather than just repeating its name. For example,\nhere is a better comment for textHorizontalPadding:")]),e._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*\n * The amount of blank space to leave on the left and\n * right sides of each line of text, in pixels.\n */")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("static")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("final")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("int")]),e._v(" textHorizontalPadding "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),s("p",[e._v("This comment provides additional information that is not obvious from the\ndeclaration itself, such as the units (pixels) and the fact that padding\napplies to both sides of each line. Instead of using the term “padding”, the\ncomment explains what padding is, in case the reader isn’t already\nfamiliar with the term.")]),e._v(" "),s("h2",{attrs:{id:"_13-3-lower-level-comments-add-precision"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-3-lower-level-comments-add-precision"}},[e._v("#")]),e._v(" 13.3  Lower-level comments add precision")]),e._v(" "),s("p",[e._v("Now that you know what not to do, let’s discuss what information you\nshould put in comments. Comments augment the code by providing\ninformation at a different level of detail. Some comments provide\ninformation at a lower, more detailed, level than the code; these comments\nadd precision by clarifying the exact meaning of the code. Other\ncomments provide information at a higher, more abstract, level than the\ncode; these comments offer intuition, such as the reasoning behind the\ncode, or a simpler and more abstract way of thinking about the code.\nComments at the same level as the code are likely to repeat the code. This\nsection discusses the lower-level approach in more detail, and the next\nsection discusses the higher-level approach.")]),e._v(" "),s("p",[e._v("Precision is most useful when commenting variable declarations such\nas class instance variables, method arguments, and return values. The\nname and type in a variable declaration are typically not very precise.\nComments can fill in missing details such as:\nWhat are the units for this variable?\nAre the boundary conditions inclusive or exclusive?\nIf a null value is permitted, what does it imply?\nIf a variable refers to a resource that must eventually be freed or\nclosed, who is responsible for freeing or closing it?\nAre there certain properties that are always true for the variable\n(invariants), such as “this list always contains at least one entry”?")]),e._v(" "),s("p",[e._v("Some of this information could potentially be figured out by examining all\nof the code where the variable is used. However, this is time-consuming\nand error-prone; the declaration’s comment should be clear and complete\nenough to make this unnecessary. When I say that the comment for a\ndeclaration should describe things that aren’t obvious from the code, “the\ncode” refers to the code next to the comment (the declaration), not “all of\nthe code in the application.”")]),e._v(" "),s("p",[e._v("The most common problem with comments for variables is that the comments are too vague. Here are two examples of comments that aren’t precise enough:")]),e._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Current offset in resp Buffer")]),e._v("\nuint32_t offset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Contains all line-widths inside the document and")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// number of appearances.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("TreeMap")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v(" lineWidths"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),s("p",[e._v("In the first example, it’s not clear what “current” means. In the second example, it’s not clear that the keys in the TreeMap are line widths and values are occurrence counts. Also, are widths measured in pixels or characters? The revised comments below provide additional details:")]),e._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//  Position in this buffer of the first object that hasn't")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//  been returned to the client.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("uint32_t")]),e._v(" offset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//  Holds statistics about line lengths of the form <length, count>")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//  where length is the number of characters in a line (including")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//  the newline), and count is the number of lines with")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//  exactly that many characters. If there are no lines with")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//  a particular length, then there is no entry for that length.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" TreeMap"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("Integer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" Integer"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" numLinesWithLength"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),s("p",[e._v("The second declaration uses a longer name that conveys more information.\nIt also changes “width” to “length”, because this term is more likely to\nmake people think that the units are characters rather than pixels. Notice\nthat the second comment documents not only the details of each entry, but\nalso what it means if an entry is missing.")]),e._v(" "),s("p",[e._v("When documenting a variable, think nouns, not verbs. In other words,\nfocus on what the variable represents, not how it is manipulated. Consider\nthe following comment:")]),e._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/* FOLLOWER VARIABLE: indicator variable that allows the Receiver and the\n * PeriodicTasks thread to communicate about whether a heartbeat has been\n * received within the follower's election timeout window.\n * Toggled to TRUE when a valid heartbeat is received.\n * Toggled to FALSE when the election timeout window is reset.  */")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("boolean")]),e._v(" receivedValidHeartbeat"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),s("p",[e._v("This documentation describes how the variable is modified by several\npieces of code in the class. The comment will be both shorter and more\nuseful if it describes what the variable represents rather than mirroring the\ncode structure:\n/* True means that a heartbeat has been received since the last\ntime")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("the election timer was reset. Used for communication between the")])]),e._v(" "),s("li",[s("p",[e._v("Receiver and PeriodicTasks threads.  */\nprivate boolean receivedValidHeartbeat;")])])]),e._v(" "),s("p",[e._v("Given this documentation, it’s easy to infer that the variable must be set to\ntrue when a heartbeat is received and false when the election timer is reset.")]),e._v(" "),s("h2",{attrs:{id:"_13-4-higher-level-comments-enhance-intuition"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-4-higher-level-comments-enhance-intuition"}},[e._v("#")]),e._v(" 13.4  Higher-level comments enhance intuition")]),e._v(" "),s("p",[e._v("The second way in which comments can augment code is by providing\nintuition. These comments are written at a higher level than the code. They\nomit details and help the reader to understand the overall intent and\nstructure of the code. This approach is commonly used for comments\ninside methods, and for interface comments. For example, consider the\nfollowing code:")]),e._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// If there is a LOADING readRpc using the same session")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// as PKHash pointed to by assignPos, and the last PKHash")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// in that readRPC is smaller than current assigning")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// PKHash, then we put assigning PKHash into that readRPC.")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("int")]),e._v(" readActiveRpcId "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" RPC_ID_NOT_ASSIGNED"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("int")]),e._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v(" NUM_READ_RPC"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("session "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" readRpc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("session\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" readRpc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("status "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" LOADING\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" readRpc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("maxPos "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v(" assignPos\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" readRpc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("numHashes "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v(" MAX_PKHASHES_PERRPC\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        readActiveRpcId "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("p",[e._v("The comment is too low-level and detailed. On the one hand, it partially\nrepeats the code: “if there is a LOADING readRPC” just duplicates the test\n"),s("code",[e._v("readRpc[i].status == LOADING")]),e._v(". On the other hand, the comment doesn’t\nexplain the overall purpose of this code, or how it fits into the method that\ncontains it. As a result, the comment doesn’t help the reader to understand\nthe code.")]),e._v(" "),s("p",[e._v("Here is a better comment:")]),e._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Try to append the current key hash onto an existing")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// RPC to the desired server that hasn't been sent yet.")]),e._v("\n")])])]),s("p",[e._v("This comment doesn’t contain any details; instead, it describes the code’s\noverall function at a higher level. With this high-level information, a\nreader can explain almost everything that happens in the code: the loop\nmust be iterating over all the existing remote procedure calls (RPCs); the\nsession test is probably used to see if a particular RPC is destined for the right server; the LOADING test suggests that RPCs can have multiple states, and in some states it isn’t safe to add more hashes; the "),s("code",[e._v("MAX - PKHASHES_PERRPC")]),e._v(" test suggests that there is a limit to how many hashes can be sent in a single RPC. The only thing not explained by the comment is the maxPos test. Furthermore, the new comment provides a basis for readers to judge the code: does it do everything that is needed to add the key hash to an existing RPC? The original comment didn’t describe the overall intent of the code, so it’s hard for a reader to decide whether the code is behaving correctly.")]),e._v(" "),s("p",[e._v("Higher-level comments are more difficult to write than lower-level\ncomments because you must think about the code in a different way. Ask\nyourself: What is this code trying to do? What is the simplest thing you\ncan say that explains everything in the code? What is the most important\nthing about this code?")]),e._v(" "),s("p",[e._v("Engineers tend to be very detail-oriented. We love details and are good\nat managing lots of them; this is essential for being a good engineer. But,\ngreat software designers can also step back from the details and think\nabout a system at a higher level. This means deciding which aspects of the\nsystem are most important, and being able to ignore the low-level details\nand think about the system only in terms of its most fundamental\ncharacteristics. This is the essence of abstraction (finding a simple way to\nthink about a complex entity), and it’s also what you must do when writing\nhigher-level comments. A good higher-level comment expresses one or a\nfew simple ideas that provide a conceptual framework, such as “append to\nan existing RPC.” Given the framework, it becomes easy to see how\nspecific code statements relate to the overall goal.")]),e._v(" "),s("p",[e._v("Here is another code sample, which has a good higher-level comment:")]),e._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("numProcessedPKHashes "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v(" readRpc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("numHashes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Some of the key hashes couldn't be looked up in")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// this request (either because they aren't stored")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// on the server, the server crashed, or there")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// wasn't enough space in the response message).")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Mark the unprocessed hashes so they will get")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// reassigned to new RPCs.")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("size_t p "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" removePos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" p "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v(" insertPos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" p"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("activeRpcId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("numProcessedPKHashes "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n                numProcessedPKHashes"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("--")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("else")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v(" assignPos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n                    assignPos "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n                activeRpcId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" RPC_ID_NOT_ASSIGNED"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("p",[e._v("This comment does two things. The second sentence provides an abstract\ndescription of what the code does. The first sentence is different: it\nexplains (in high level terms) why the code is executed. Comments of the\nform “how we get here” are very useful for helping people to understand\ncode. For example, when documenting a method, it can be very helpful to\ndescribe the conditions under which the method is most likely to be\ninvoked (especially if the method is only invoked in unusual situations).")]),e._v(" "),s("h2",{attrs:{id:"_13-5-interface-documentation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-5-interface-documentation"}},[e._v("#")]),e._v(" 13.5  Interface documentation")]),e._v(" "),s("p",[e._v("One of the most important roles for comments is to define abstractions.\nRecall from Chapter 4 that an abstraction is a simplified view of an entity,\nwhich preserves essential information but omits details that can safely be\nignored. Code isn’t suitable for describing abstractions; it’s too low level\nand it includes implementation details that shouldn’t be visible in the\nabstraction. The only way to describe an abstraction is with comments. If\nyou want code that presents good abstractions, you must document\nthose abstractions with comments.")]),e._v(" "),s("p",[e._v("The first step in documenting abstractions is to separate interface\ncomments from implementation comments. Interface comments provide\ninformation that someone needs to know in order to use a class or method;\nthey define the abstraction. Implementation comments describe how a\nclass or method works internally in order to implement the abstraction.\nIt’s important to separate these two kinds of comments, so that users of an\ninterface are not exposed to implementation details. Furthermore, these\ntwo forms had better be different. If interface comments must also\ndescribe the implementation, then the class or method is shallow. This\nmeans that the act of writing comments can provide clues about the quality\nof a design; Chapter 15 will return to this idea.")]),e._v(" "),s("p",[e._v("The interface comment for a class provides a high-level description of\nthe abstraction provided by the class, such as the following:")]),e._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n* This class implements a simple server-side interface to the HTTP\n* protocol: by using this class, an application can receive HTTP\n* requests, process them, and return responses. Each instance of\n* this class corresponds to a particular socket used to receive\n* requests. The current implementation is single-threaded and\n* processes one request at a time.\n*/")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Http")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("p",[e._v("This comment describes the overall capabilities of the class, without any\nimplementation details or even the specifics of particular methods. It also\ndescribes what each instance of the class represents. Finally, the comments\ndescribe the limitations of the class (it does not support concurrent access\nfrom multiple threads), which may be important to developers\ncontemplating whether to use it.")]),e._v(" "),s("p",[e._v("The interface comment for a method includes both higher-level\ninformation for abstraction and lower-level details for precision:\nThe comment usually starts with a sentence or two describing the\nbehavior of the method as perceived by callers; this is the higher-\nlevel abstraction.")]),e._v(" "),s("p",[e._v("The comment must describe each argument and the return value (if\nany). These comments must be very precise, and must describe any\nconstraints on argument values as well as dependencies between\narguments.")]),e._v(" "),s("p",[e._v("If the method has any side effects, these must be documented in the\ninterface comment. A side effect is any consequence of the method\nthat affects the future behavior of the system but is not part of the\nresult. For example, if the method adds a value to an internal data\nstructure, which can be retrieved by future method calls, this is a side\neffect; writing to the file system is also a side effect.\nA method’s interface comment must describe any exceptions that can\nemanate from the method.")]),e._v(" "),s("p",[e._v("If there are any preconditions that must be satisfied before a method\nis invoked, these must be described (perhaps some other method must\nbe invoked first; for a binary search method, the list being searched\nmust be sorted). It is a good idea to minimize preconditions, but any\nthat remain must be documented.\nHere is the interface comment for a method that copies data out of a\nBuffer object:")]),e._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n* Copy a range of bytes from a buffer to an external location.\n*\n* \\param offset\n*        Index within the buffer of the first byte to copy.\n* \\param length\n*        Number of bytes to copy.\n* \\param dest\n*        Where to copy the bytes: must have room for at least\n*        length bytes.\n*\n* \\return\n*        The return value is the actual number of bytes copied,\n*        which may be less than length if the requested range of\n*        bytes extends past the end of the buffer. 0 is returned\n\n*        if there is no overlap between the requested range and\n*        the actual buffer.\n*/")]),e._v("\nuint32_t\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Buffer")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("copy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("uint32_t offset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" uint32_t length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(" dest"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n")])])]),s("p",[e._v("The syntax of this comment (e.g., \\return) follows the conventions of")]),e._v(" "),s("p",[e._v("Doxygen, a program that extracts comments from C/C++ code and\ncompiles them into Web pages. The goal of the comment is to provide all\nthe information a developer needs in order to invoke the method, including\nhow special cases are handled (note how this method follows the advice of\nChapter 10 and defines out of existence any errors associated with the\nrange specification). The developer should not need to read the body of the\nmethod in order to invoke it, and the interface comment provides no")]),e._v(" "),s("p",[e._v("information about how the method is implemented, such as how it scans\nits internal data structures to find the desired data.")]),e._v(" "),s("p",[e._v("For a more extended example, let’s consider a class called\nIndexLookup, which is part of a distributed storage system. The storage")]),e._v(" "),s("p",[e._v("system holds a collection of tables, each of which contains many objects.\nIn addition, each table can have one or more indexes; each index provides\nefficient access to objects in the table based on a particular field of the\nobject. For example, one index might be used to look up objects based on\ntheir name field, and another index might be used to look up objects based\non their age field. With these indexes, applications can quickly extract all of the objects with a particular name, or all of those with an age in a given\nrange.")]),e._v(" "),s("p",[e._v("The IndexLookup class provides a convenient interface for performing indexed lookups. Here is an example of how it might be used in an application:")]),e._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[e._v("query "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("IndexLookup")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("table"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" key1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" key2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),e._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    object "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" query"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("getNext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("object "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// _... process object ..._")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("p",[e._v("The application first constructs an object of type IndexLookup, providing")]),e._v(" "),s("p",[e._v("arguments that select a table, an index, and a range within the index (for\nexample, if the index is based on an age field, key1 and key2 might be\nspecified as 21 and 65 to select all objects with ages between those\nvalues). Then the application calls the getNext method repeatedly. Each invocation returns one object that falls within the desired range; once all of the matching objects have been returned,"),s("code",[e._v("getNext returns NULL")]),e._v(". Because the storage system is distributed, the implementation of this class is somewhat complex. The objects in a table may be spread across multiple servers, and each index may also be distributed across a different set of\nservers; the code in the IndexLookup class must first communicate with all of the relevant index servers to collect information about the objects in the range, then it must communicate with the servers that actually store the objects in order to retrieve their values.")]),e._v(" "),s("p",[e._v("Now let’s consider what information needs to be included in the\ninterface comment for this class. For each piece of information given\nbelow, ask yourself whether a developer needs to know that information in\norder to use the class (my answers to the questions are at the end of the\nchapter):")]),e._v(" "),s("ol",[s("li",[e._v("The format of messages that the IndexLookup class sends to the servers holding indexes and objects.")]),e._v(" "),s("li",[e._v("The comparison function used to determine whether a particular object falls in the desired range (is comparison done using integers, floating-point numbers, or strings?).")]),e._v(" "),s("li",[e._v("The data structure used to store indexes on servers.")]),e._v(" "),s("li",[e._v("Whether or not IndexLookup issues multiple requests to different servers concurrently.")]),e._v(" "),s("li",[e._v("The mechanism for handling server crashes. Here is the original version of the interface comment for the IndexLookup class; the excerpt also includes a few lines from the class’s definition, which are referred to in the comment:")])]),e._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('/*\n* This class implements the client side framework for index range\n* lookups. It manages a single LookupIndexKeys RPC and multiple\n* IndexedRead RPCs. Client side just includes "IndexLookup.h" in\n* its header to use IndexLookup class. Several parameters can be\nset\n* in the config below:\n* - The number of concurrent indexedRead RPCs\n* - The max number of PKHashes a indexedRead RPC can hold at a time\n* - The size of the active PKHashes\n*\n* To use IndexLookup, the client creates an object of this class by\n* providing all necessary information. After construction of\n* IndexLookup, client can call getNext() function to move to next\n* available object. If getNext() returns NULL, it means we reached\n* the last object. Client can use getKey, getKeyLength, getValue,\n* and getValueLength to get object data of current object.\n*/')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("IndexLookup")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/// Max number of concurrent indexedRead RPCs")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("static")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("uint8_t")]),e._v(" NUM_READ_RPC "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/// Max number of PKHashes that can be sent in one")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/// indexedRead RPC")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("static")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("uint32_t")]),e._v(" MAX_PKHASHES_PERRPC "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("256")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/// Max number of PKHashes that activeHashes can")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/// hold at once.")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("static")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" size_t MAX_NUM_PK "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<<")]),e._v(" LG_BUFFER_SIZE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("p",[e._v("Before reading further, see if you can identify the problems with this comment. Here are the problems that I found:\nMost of the first paragraph concerns the implementation, not the interface. As one example, users don’t need to know the names of the particular remote procedure calls used to communicate with the servers. The configuration parameters referred to in the second half of the first paragraph are all private variables that are relevant only to the maintainer of the class, not to its users. All of this implementation information should be omitted from the comment.")]),e._v(" "),s("p",[e._v("The comment also includes several things that are obvious. For example, there’s no need to tell users to include "),s("code",[e._v("IndexLookup.h")]),e._v(": anyone who writes C++ code will be able to guess that this is necessary. In addition, the text “by providing all necessary information” says nothing, so it can be omitted.")]),e._v(" "),s("p",[e._v("A shorter comment for this class is sufficient (and preferable):")]),e._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*\n* This class is used by client applications to make range queries\n* using indexes. Each instance represents a single range query.\n*\n* To start a range query, a client creates an instance of this\n* class. The client can then call getNext() to retrieve the objects\n* in the desired range. For each object returned by getNext(), the\n* caller can invoke getKey(), getKeyLength(), getValue(), and\n* getValueLength() to get information about that object.\n*/")]),e._v("\n")])])]),s("p",[e._v("The last paragraph of this comment is not strictly necessary, since it\nmostly duplicates information in the comments for individual methods.\nHowever, it can be helpful to have examples in the class documentation\nthat illustrate how its methods work together, particularly for deep classes\nwith usage patterns that are nonobvious. Note that the new comment does\nnot mention NULL return values from getNext. This comment is not\nintended to document every detail of each method; it just provides high\nlevel information to help readers understand how the methods work\ntogether and when each method might be invoked. For details, readers can\nrefer to the interface comments for individual methods. This comment\nalso does not mention server crashes; that is because server crashes are\ninvisible to users of this class (the system automatically recovers from\nthem).")]),e._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[e._v("Implementation Documentation Contaminates Interface")]),e._v(" "),s("p",[e._v("This red flag occurs when interface documentation, such as that for a method, describes implementation details that aren’t needed in order to use the thing being documented.")])]),e._v(" "),s("p",[e._v("Now consider the following code, which shows the first version of the\ndocumentation for the isReady method in "),s("code",[e._v("IndexLookup")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/**\n* Check if the next object is RESULT_READY. This function is\n* implemented in a DCFT module, each execution of isReady() tries\n* to make small progress, and getNext() invokes isReady() in a\n* while loop, until isReady() returns true.\n*\n* isReady() is implemented in a rule-based approach. We check\n* different rules by following a particular order, and perform\n* certain actions if some rule is satisfied.\n*\n* \\return\n*         True means the next Object is available. Otherwise, return\n*         false.\n*/")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("bool")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("IndexLookup")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("::")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("isReady")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("p",[e._v("Once again, most of this documentation, such as the reference to DCFT\nand the entire second paragraph, concerns the implementation, so it\ndoesn’t belong here; this is one of the most common errors in interface\ncomments. Some of the implementation documentation is useful, but it\nshould go inside the method, where it will be clearly separated from\ninterface documentation. In addition, the first sentence of the\ndocumentation is cryptic (what does RESULT_READY mean?) and some")]),e._v(" "),s("p",[e._v("important information is missing. Finally, it isn’t necessary to describe the\nimplementation of getNext here. Here is a better version of the comment:")]),e._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("/*\n* Indicates whether an indexed read has made enough progress for\n* getNext to return immediately without blocking. In addition, this\n* method does most of the real work for indexed reads, so it must\n* be invoked (either directly, or indirectly by calling getNext) in\n* order for the indexed read to make progress.\n*\n* \\return\n*         True means that the next invocation of getNext will not block\n*         (at least one object is available to return, or the end of the\n*         lookup has been reached); false means getNext may block.\n*/")]),e._v("\n")])])]),s("p",[e._v("This version of the comment provides more precise information about\nwhat “ready” means, and it provides the important information that this\nmethod must eventually be invoked if the indexed retrieval is to move\nforward.")]),e._v(" "),s("h2",{attrs:{id:"_13-6-implementation-comments-what-and-why-not-how"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-6-implementation-comments-what-and-why-not-how"}},[e._v("#")]),e._v(" 13.6  Implementation comments: what and why, not how")]),e._v(" "),s("p",[e._v("Implementation comments are the comments that appear inside methods\nto help readers understand how they work internally. Most methods are so\nshort and simple that they don’t need any implementation comments:\ngiven the code and the interface comments, it’s easy to figure out how a\nmethod works.")]),e._v(" "),s("p",[e._v("The main goal of implementation comments is to help readers\nunderstand what the code is doing (not how it does it). Once readers\nknow what the code is trying to do, it’s usually easy to understand how the\ncode works. For short methods, the code only does one thing, which is\nalready described in its interface comment, so no implementation\ncomments are needed. Longer methods have several blocks of code that do\ndifferent things as part of the method’s overall task. Add a comment\nbefore each of the major blocks to provide a high-level (more abstract)\ndescription of what that block does. Here is an example:")]),e._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Phase 1: Scan active RPCs to see if any have completed.")]),e._v("\n")])])]),s("p",[e._v("For loops, it’s helpful to have a comment before the loop that describes\nwhat happens in each iteration:")]),e._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Each iteration of the following loop extracts one request from")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// the request message, increments the corresponding object, and")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// appends a response to the response message.")]),e._v("\n")])])]),s("p",[e._v("Notice how this comment describes the loop at a more abstract and intuitive level; it doesn’t go into any details about how a request is extracted from the request message or how the object is incremented.")]),e._v(" "),s("p",[e._v("Loop comments are only needed for longer or more complex loops, where it may not be obvious what the loop is doing; many loops are short and simple enough that their behavior is already obvious.")]),e._v(" "),s("p",[e._v("In addition to describing what the code is doing, implementation comments are also useful to explain why. If there are tricky aspects to the code that won’t be obvious from reading it, you should document them.")]),e._v(" "),s("p",[e._v("For example, if a bug fix requires the addition of code whose purpose isn’t totally obvious, add a comment describing why the code is needed. For bug fixes where there is a well-written bug report describing the problem, the comment can refer to the issue in the bug tracking database rather than repeating all its details (“Fixes RAM-436, related to device driver crashes in Linux 2.4.x”). Developers can look in the bug database for more details (this is an example of avoiding duplication in comments, which will be\ndiscussed in Chapter 16).")]),e._v(" "),s("p",[e._v("For longer methods, it can be helpful to write comments for a few of\nthe most important local variables. However, most local variables don’t\nneed documentation if they have good names. If all of the uses of a\nvariable are visible within a few lines of each other, it’s usually easy to\nunderstand the variable’s purpose without a comment. In this case it’s OK\nto let readers read the code to figure out the meaning of the variable.\nHowever, if the variable is used over a large span of code, then you should\nconsider adding a comment to describe the variable. When documenting\nvariables, focus on what the variable represents, not how it is manipulated\nin the code.")]),e._v(" "),s("h2",{attrs:{id:"_13-7-cross-module-design-decisions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-7-cross-module-design-decisions"}},[e._v("#")]),e._v(" 13.7  Cross-module design decisions")]),e._v(" "),s("p",[e._v("In a perfect world, every important design decision would be encapsulated within a single class. Unfortunately, real systems inevitably end up with design decisions that affect multiple classes. For example, the design of a network protocol will affect both the sender and the receiver, and these may be implemented in different places. Cross-module decisions are often complex and subtle, and they account for many bugs, so good documentation for them is crucial.")]),e._v(" "),s("p",[e._v("The biggest challenge with cross-module documentation is finding a place to put it where it will naturally be discovered by developers.")]),e._v(" "),s("p",[e._v("Sometimes there is an obvious central place to put such documentation.\nFor example, the RAMCloud storage system defines a Status value, which is returned by each request to indicate success or failure. Adding a Status for a new error condition requires modifying many different files (one file maps Status values to exceptions, another provides a human-readable message for each Status, and so on). Fortunately, there is one obvious place where developers will have to go when adding a new status value, which is the declaration of the Status enum. We took advantage of this by adding comments in that enum to identify all of the other places that must also be modified:")]),e._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("typedef")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("enum")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Status")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\nSTATUS_OK "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\nSTATUS_UNKNOWN_TABLET                "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n\nSTATUS_WRONG_VERSION                 "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("\n\nSTATUS_INDEX_DOESNT_EXIST            "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("29")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\nSTATUS_INVALID_PARAMETER             "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n\nSTATUS_MAX_VALUE                     "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Note: if you add a new status value you must make the following")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// additional updates:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// (1)  Modify STATUS_MAX_VALUE to have a value equal to the")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//      largest defined status value, and make sure its definition")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//      is the last one in the list. STATUS_MAX_VALUE is used")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//      primarily for testing.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// (2)  Add new entries in the tables "messages" and "symbols" in')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//      Status.cc.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// (3)  Add a new exception class to ClientException.h")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('// (4)  Add a new "case" to ClientException::throwException to map')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//      from the status value to a status-specific ClientException")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//      subclass.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// (5)  In the Java bindings, add a static class for the exception")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//      to ClientException.java")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// (6)  Add a case for the status of the exception to throw the")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//      exception in ClientException.java")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// (7)  Add the exception to the Status enum in Status.java, making")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//      sure the status is in the correct position corresponding to")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//      its status code.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),s("p",[e._v("New status values will be added at the end of the existing list, so the comments are also placed at the end, where they are most likely to be seen.")]),e._v(" "),s("p",[e._v("Unfortunately, in many cases there is not an obvious central place to put cross-module documentation. One example from the RAMCloud storage system was the code for dealing with zombie servers, which are servers that the system believes have crashed, but in fact are still running.\nNeutralizing zombie servers required code in several different modules, and these pieces of code all depend on each other. None of the pieces of code is an obvious central place to put documentation. One possibility is to duplicate parts of the documentation in each location that depends on it.\nHowever, this is awkward, and it is difficult to keep such documentation up to date as the system evolves. Alternatively, the documentation can be located in one of the places where it is needed, but in this case it’s unlikely that developers will see the documentation or know where to look for it.")]),e._v(" "),s("p",[e._v("I have recently been experimenting with an approach where cross-\nmodule issues are documented in a central file called designNotes. The file\nis divided up into clearly labeled sections, one for each major topic. For\nexample, here is an excerpt from the file:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("...\n\nZombies\n\nA zombie is a server that is considered dead by the rest of the cluster; \nany data stored on the server has been recovered and will be managed by \nother servers. However, if a zombie is not actually dead (e.g., it was just disconnected from the other servers for a while) two forms of inconsistency can arise:\n* A zombie server must not serve read requests once replacement servers have taken over; otherwise it may return stale data that does not reflect writes accepted by the replacement servers.\n* The zombie server must not accept write requests once replacement servers have begun replaying its log during recovery; if it does, these writes may be lost (the new values may not be stored on the replacement servers and thus will not be returned by reads).\n\nRAMCloud uses two techniques to neutralize zombies. First,\n...\n")])])]),s("p",[e._v("Then, in any piece of code that relates to one of these issues there is a\nshort comment referring to the designNotes file:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('// See "Zombies" in designNotes.\n')])])]),s("p",[e._v("With this approach, there is only a single copy of the documentation and it\nis relatively easy for developers to find it when they need it. However, this\nhas the disadvantage that the documentation is not near any of the pieces\nof code that depend on it, so it may be difficult to keep up-to-date as the\nsystem evolves.")]),e._v(" "),s("h2",{attrs:{id:"_13-8-conclusion"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-8-conclusion"}},[e._v("#")]),e._v(" 13.8  Conclusion")]),e._v(" "),s("p",[e._v("The goal of comments is to ensure that the structure and behavior of the\nsystem is obvious to readers, so they can quickly find the information they\nneed and make modifications to the system with confidence that they will\nwork. Some of this information can be represented in the code in a way\nthat will already be obvious to readers, but there is a significant amount of\ninformation that can’t easily be deduced from the code. Comments fill in\nthis information.")]),e._v(" "),s("p",[e._v("When following the rule that comments should describe things that\naren’t obvious from the code, “obvious” is from the perspective of\nsomeone reading your code for the first time (not you). When writing\ncomments, try to put yourself in the mindset of the reader and ask yourself\nwhat are the key things he or she will need to know. If your code is\nundergoing review and a reviewer tells you that something is not obvious,\ndon’t argue with them; if a reader thinks it’s not obvious, then it’s not\nobvious. Instead of arguing, try to understand what they found confusing\nand see if you can clarify that, either with better comments or better code.")]),e._v(" "),s("h2",{attrs:{id:"_13-9-answers-to-questions-from-section-13-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-9-answers-to-questions-from-section-13-5"}},[e._v("#")]),e._v(" 13.9  Answers to questions from Section 13.5")]),e._v(" "),s("p",[e._v("Does a developer need to know each of the following pieces of information in order to use the IndexLookup class?")]),e._v(" "),s("ol",[s("li",[e._v("The format of messages that the IndexLookup class sends to the servers holding indexes and objects. No: this is an implementation detail that should be hidden within the class.")]),e._v(" "),s("li",[e._v("The comparison function used to determine whether a particular object falls in the desired range (is comparison done using integers, floating-point numbers, or strings?). Yes: users of the class need to know this information.")]),e._v(" "),s("li",[e._v("The data structure used to store indexes on servers. No: this information should be encapsulated on the servers; not even the implementation of IndexLookup should need to know this.")]),e._v(" "),s("li",[e._v("Whether or not IndexLookup issues multiple requests to different servers concurrently. Possibly: if IndexLookup uses special techniques to improve performance, then the documentation should provide some high-level information about this, since users may care about performance.")]),e._v(" "),s("li",[e._v("The mechanism for handling server crashes. No: RAMCloud recovers automatically from server crashes, so crashes are not visible to application-level software; thus, there is no need to mention crashes in the interface documentation for IndexLookup. If crashes were reflected up to applications, then the interface documentation would need to describe how they manifest themselves (but not the details of how crash recovery works).")])])])}),[],!1,null,null,null);t.default=a.exports}}]);