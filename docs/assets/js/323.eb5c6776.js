(window.webpackJsonp=window.webpackJsonp||[]).push([[323],{949:function(e,t,o){"use strict";o.r(t);var n=o(7),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"_15-write-the-comments-first"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_15-write-the-comments-first"}},[e._v("#")]),e._v(" 15.  Write The Comments First")]),e._v(" "),o("h2",{attrs:{id:"use-comments-as-part-of-the-design-process"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#use-comments-as-part-of-the-design-process"}},[e._v("#")]),e._v(" (Use Comments As Part Of The Design Process)")]),e._v(" "),o("p",[e._v("Many developers put off writing documentation until the end of the\ndevelopment process, after coding and unit testing are complete. This is\none of the surest ways to produce poor quality documentation. The best\ntime to write comments is at the beginning of the process, as you write the\ncode. Writing the comments first makes documentation part of the design\nprocess. Not only does this produce better documentation, but it also\nproduces better designs and it makes the process of writing documentation\nmore enjoyable.")]),e._v(" "),o("h2",{attrs:{id:"_15-1-delayed-comments-are-bad-comments"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_15-1-delayed-comments-are-bad-comments"}},[e._v("#")]),e._v(" 15.1  Delayed comments are bad comments")]),e._v(" "),o("p",[e._v("Almost every developer I have ever met puts off writing comments. When\nasked why they don’t write documentation earlier, they say that the code is\nstill changing. If they write documentation early, they say, they’ll have to\nrewrite it when the code changes; better to wait until the code stabilizes.\nHowever, I suspect that there is also another reason, which is that they\nview documentation as drudge work; thus, they put it off as long as\npossible.")]),e._v(" "),o("p",[e._v("Unfortunately, this approach has several negative consequences. First,\ndelaying documentation often means that it never gets written at all. Once\nyou start delaying, it’s easy to delay a bit more; after all, the code will be\neven more stable in a few more weeks. By the time the code has inarguably\nstabilized, there is a lot of it, which means the task of writing\ndocumentation has become huge and even less attractive. There’s never a\nconvenient time to stop for a few days and fill in all of the missing")]),e._v(" "),o("p",[e._v("comments, and it’s easy to rationalize that the best thing for the project is\nto move on and fix bugs or write the next new feature. This will create\neven more undocumented code.")]),e._v(" "),o("p",[e._v("Even if you do have the self-discipline to go back and write the\ncomments (and don’t fool yourself: you probably don’t), the comments\nwon’t be very good. By this time in the process, you have checked out\nmentally. In your mind, this piece of code is done; you are eager to move\non to your next project. You know that writing comments is the right thing\nto do, but it’s no fun. You just want to get through it as quickly as possible.\nThus, you make a quick pass over the code, adding just enough comments\nto look respectable. By now, it’s been a while since you designed the code,\nso your memories of the design process are becoming fuzzy. You look at\nthe code as you are writing the comments, so the comments repeat the\ncode. Even if you try to reconstruct the design ideas that aren’t obvious\nfrom the code, there will be things you don’t remember. Thus, the\ncomments are missing some of the most important things they should\ndescribe.")]),e._v(" "),o("h2",{attrs:{id:"_15-2-write-the-comments-rst"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_15-2-write-the-comments-rst"}},[e._v("#")]),e._v(" 15.2  Write the comments rst")]),e._v(" "),o("p",[e._v("I use a different approach to writing comments, where I write the\ncomments at the very beginning:\nFor a new class, I start by writing the class interface comment.\nNext, I write interface comments and signatures for the most\nimportant public methods, but I leave the method bodies empty.\nI iterate a bit over these comments until the basic structure feels\nabout right.\nAt this point I write declarations and comments for the most\nimportant class instance variables in the class.\nFinally, I fill in the bodies of the methods, adding implementation\ncomments as needed.\nWhile writing method bodies, I usually discover the need for\nadditional methods and instance variables. For each new method I\nwrite the interface comment before the body of the method; for\ninstance variables I fill in the comment at the same time that I write\nthe variable declaration.")]),e._v(" "),o("p",[e._v("When the code is done, the comments are also done. There is never a\nbacklog of unwritten comments.")]),e._v(" "),o("p",[e._v("The comments-first approach has three benefits. First, it produces\nbetter comments. If you write the comments as you are designing the\nclass, the key design issues will be fresh in your mind, so it’s easy to\nrecord them. It’s better to write the interface comment for each method\nbefore its body, so you can focus on the method’s abstraction and interface\nwithout being distracted by its implementation. During the coding and\ntesting process you will notice and fix problems with the comments. As a\nresult, the comments improve over the course of development.")]),e._v(" "),o("h2",{attrs:{id:"_15-3-comments-are-a-design-tool"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_15-3-comments-are-a-design-tool"}},[e._v("#")]),e._v(" 15.3  Comments are a design tool")]),e._v(" "),o("p",[e._v("The second, and most important, benefit of writing the comments at the\nbeginning is that it improves the system design. Comments provide the\nonly way to fully capture abstractions, and good abstractions are\nfundamental to good system design. If you write comments describing the\nabstractions at the beginning, you can review and tune them before writing\nimplementation code. To write a good comment, you must identify the\nessence of a variable or piece of code: what are the most important aspects\nof this thing? It’s important to do this early in the design process;\notherwise you are just hacking code.")]),e._v(" "),o("p",[e._v("Comments serve as a canary in the coal mine of complexity. If a\nmethod or variable requires a long comment, it is a red flag that you don’t\nhave a good abstraction. Remember from Chapter 4 that classes should be\ndeep: the best classes have very simple interfaces yet implement powerful\nfunctions. The best way to judge the complexity of an interface is from the\ncomments that describe it. If the interface comment for a method provides\nall the information needed to use the method and is also short and simple,\nthat indicates that the method has a simple interface. Conversely, if there’s\nno way to describe a method completely without a long and complicated\ncomment, then the method has a complex interface. You can compare a\nmethod’s interface comment with the implementation to get a sense of\nhow deep the method is: if the interface comment must describe all the\nmajor features of the implementation, then the method is shallow. The\nsame idea applies to variables: if it takes a long comment to fully describe")]),e._v(" "),o("p",[e._v("a variable, it’s a red flag that suggests you may not have chosen the right\nvariable decomposition. Overall, the act of writing comments allows you\nto evaluate your design decisions early, so you can discover and fix\nproblems.")]),e._v(" "),o("div",{staticClass:"custom-block danger"},[o("p",{staticClass:"custom-block-title"},[e._v("Hard to Describe")]),e._v(" "),o("p",[e._v("The comment that describes a method or variable should be simple and\nyet complete. If you find it difficult to write such a comment, that’s an\nindicator that there may be a problem with the design of the thing you\nare describing.")])]),e._v(" "),o("p",[e._v("Of course, comments are only a good indicator of complexity if they are complete and clear. If you write a method interface comment that doesn’t provide all the information needed to invoke the method, or one that is so cryptic that it’s hard to understand, then that comment doesn’t provide a good measure of the method’s depth.")]),e._v(" "),o("h2",{attrs:{id:"_15-4-early-comments-are-fun-comments"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_15-4-early-comments-are-fun-comments"}},[e._v("#")]),e._v(" 15.4  Early comments are fun comments")]),e._v(" "),o("p",[e._v("The third and final benefit of writing comments early is that it makes\ncomment-writing more fun. For me, one of the most enjoyable parts of\nprogramming is the early design phase for a new class, where I’m fleshing\nout the abstractions and structure for the class. Most of my comments are\nwritten during this phase, and the comments are how I record and test the\nquality of my design decisions. I’m looking for the design that can be\nexpressed completely and clearly in the fewest words. The simpler the\ncomments, the better I feel about my design, so finding simple comments\nis a source of pride. If you are programming strategically, where your\nmain goal is a great design rather than just writing code that works, then\nwriting comments should be fun, since that’s how you identify the best\ndesigns.")]),e._v(" "),o("h2",{attrs:{id:"_15-5-are-early-comments-expensive"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_15-5-are-early-comments-expensive"}},[e._v("#")]),e._v(" 15.5  Are early comments expensive?")]),e._v(" "),o("p",[e._v("Now let’s revisit the argument for delaying comments, which is that it\navoids the cost of reworking the comments as the code evolves. A simple\nback-of-the-envelope calculation will show that this doesn’t save much.\nFirst, estimate the total fraction of development time that you spend\ntyping in code and comments together, including time to revise code and\ncomments; it’s unlikely that this will be more than about 10% of all\ndevelopment time. Even if half of your total code lines are comments,\nwriting comments probably doesn’t account for more than about 5% of\nyour total development time. Delaying the comments until the end will\nsave only a fraction of this, which isn’t very much.")]),e._v(" "),o("p",[e._v("Writing the comments first will mean that the abstractions will be\nmore stable before you start writing code. This will probably save time\nduring coding. In contrast, if you write the code first, the abstractions will\nprobably evolve as you code, which will require more code revisions than\nthe comments-first approach. When you consider all of these factors, it’s\npossible that it might be faster overall to write the comments first.")]),e._v(" "),o("h2",{attrs:{id:"_15-6-conclusion"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_15-6-conclusion"}},[e._v("#")]),e._v(" 15.6  Conclusion")]),e._v(" "),o("p",[e._v("If you haven’t ever tried writing the comments first, give it a try. Stick\nwith it long enough to get used to it. Then think about how it affects the\nquality of your comments, the quality of your design, and your overall\nenjoyment of software development. After you have tried this for a while,\nlet me know whether your experience matches mine, and why or why not.")])])}),[],!1,null,null,null);t.default=s.exports}}]);